<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Exiled.API</name>
    </assembly>
    <members>
        <member name="T:Exiled.API.Enums.AdminToyType">
            <summary>
            Unique identifier for the different types of admin toys.
            </summary>
            <seealso cref="P:Exiled.API.Features.Toys.AdminToy.ToyType"/>
        </member>
        <member name="F:Exiled.API.Enums.AdminToyType.PrimitiveObject">
            <summary>
            Primitive Object toy.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AdminToyType.LightSource">
            <summary>
            Light source toy.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AdminToyType.ShootingTarget">
            <summary>
            ShootingTarget toy.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.AmmoType">
            <summary>
            Ammo types present in the game.
            </summary>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetAmmoType(ItemType)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetItemType(Exiled.API.Enums.AmmoType)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetWeaponAmmoType(Exiled.API.Enums.FirearmType)"/>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.None">
            <summary>
            Not ammo.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato556">
            <summary>
            5.56mm Ammunition.
            Used by <see cref="F:ItemType.GunE11SR"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato762">
            <summary>
            7.62mm Ammunition.
            Used by and <see cref="F:ItemType.GunLogicer"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Nato9">
            <summary>
            9mm Ammunition.
            Used by <see cref="F:ItemType.GunCOM15"/>,.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Ammo12Gauge">
            <summary>
            12 gauge shotgun ammo.
            Used by <see cref="F:ItemType.GunShotgun"/>
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AmmoType.Ammo44Cal">
            <summary>
            44 Caliber Revolver Ammo
            Used by <see cref="F:ItemType.GunRevolver"/>
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.AuthenticationType">
            <summary>
            Players authentication types.
            </summary>
            <seealso cref="P:Exiled.API.Features.Player.AuthenticationType"/>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Steam">
            <summary>
            Indicates that the player has been authenticated through Steam.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Discord">
            <summary>
            Indicates that the player has been authenticated through Discord.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Northwood">
            <summary>
            Indicates that the player has been authenticated as a Northwood staff member.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.Unknown">
            <summary>
            Indicates that the player has been authenticated through an unknown provider.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.LocalHost">
            <summary>
            Indicates that the player has been authenticated as localhost.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.AuthenticationType.DedicatedServer">
            <summary>
            Indicates that the player has been authenticated as DedicatedServer.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.BloodType">
            <summary>
            Unique identifier for the different types of blood decals.
            </summary>
            <seealso cref="M:Exiled.API.Features.Map.PlaceBlood(UnityEngine.Vector3,UnityEngine.Vector3)"/>
            <seealso cref="M:Exiled.API.Features.Player.PlaceBlood(UnityEngine.Vector3)"/>
        </member>
        <member name="F:Exiled.API.Enums.BloodType.Default">
            <summary>
            The default blood decal.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BloodType.Scp106">
            <summary>
            The blood decal placed after Scp106 sends someone to the pocket dimension.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BloodType.Spreaded">
            <summary>
            The spreaded blood decal.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.BloodType.Faded">
            <summary>
            The faded blood decal.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.CameraType">
            <summary>
            Unique identifier for the different types of SCP-079 cameras.
            </summary>
            <seealso cref="P:Exiled.API.Features.Camera.Type"/>
            <seealso cref="M:Exiled.API.Features.Camera.Get(Exiled.API.Enums.CameraType)"/>
            <seealso cref="M:Exiled.API.Features.Camera.TryGet(Exiled.API.Enums.CameraType,Exiled.API.Features.Camera@)"/>
        </member>
        <member name="F:Exiled.API.Enums.CameraType.Unknown">
            <summary>
            Represents an unknown camera.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ConfigType">
            <summary>
            The different types of configuration files distribution.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ConfigType.Default">
            <summary>
            Default distribution, every plugin will share the same config file.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ConfigType.Separated">
            <summary>
            Separated distribution, each plugin will have an individual config file.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DamageType">
            <summary>
            Identifiers for types of damage.
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.Hurt(System.Single,Exiled.API.Enums.DamageType,System.String)"/>
            <seealso cref="M:Exiled.API.Features.Player.Hurt(Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement)"/>
            <seealso cref="M:Exiled.API.Features.Player.Hurt(Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement,System.String)"/>
            <seealso cref="M:Exiled.API.Features.Player.Kill(Exiled.API.Enums.DamageType,System.String)"/>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Unknown">
            <summary>
            Unknown damage source.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Falldown">
            <summary>
            Fall damage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Warhead">
            <summary>
            Alpha Warhead.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Decontamination">
            <summary>
            LCZ Decontamination.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Asphyxiation">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Asphyxiated"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Poison">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Poisoned"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Bleeding">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Bleeding"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Firearm">
            <summary>
            Damage dealt by a <see cref="T:Exiled.API.Features.Items.Firearm"/> when the <see cref="T:ItemType"/> used is not available.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.MicroHid">
            <summary>
            Damage dealt by a <see cref="T:Exiled.API.Features.Items.MicroHid"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Tesla">
            <summary>
            Damage dealt by a Tesla Gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp">
            <summary>
            Damage is dealt by a <see cref="F:Exiled.API.Enums.Side.Scp"/> when the <see cref="T:PlayerRoles.RoleTypeId"/> used is not available.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Explosion">
            <summary>
            Damage dealt by frag grenades.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp018">
            <summary>
            Damage dealt by SCP-018.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp207">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Scp207"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Recontainment">
            <summary>
            Damage is dealt by SCP Recontainment procedure.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Crushed">
            <summary>
            Crushed by the checkpoint killer trigger.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.FemurBreaker">
            <summary>
            Damage caused by the femur breaker.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.PocketDimension">
            <summary>
            Damage caused by the pocket dimension.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.FriendlyFireDetector">
            <summary>
            Damage caused by the friendly fire detector.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.SeveredHands">
            <summary>
            Damage caused by severed hands.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Custom">
            <summary>
            Damage caused by a custom source.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp049">
            <summary>
            Damage caused by <see cref="F:PlayerRoles.RoleTypeId.Scp049"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp096">
            <summary>
            Damage caused by <see cref="F:PlayerRoles.RoleTypeId.Scp096"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp173">
            <summary>
            Damage caused by <see cref="F:PlayerRoles.RoleTypeId.Scp173"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp939">
            <summary>
            Damage caused by <see cref="F:PlayerRoles.RoleTypeId.Scp939"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp0492">
            <summary>
            Damage caused by <see cref="F:PlayerRoles.RoleTypeId.Scp0492"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp106">
            <summary>
            Damage caused by <see cref="F:PlayerRoles.RoleTypeId.Scp106"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Crossvec">
            <summary>
            Damage caused by <see cref="F:ItemType.GunCrossvec"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Logicer">
            <summary>
            Damage caused by <see cref="F:ItemType.GunLogicer"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Revolver">
            <summary>
            Damage caused by <see cref="F:ItemType.GunRevolver"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Shotgun">
            <summary>
            Damage caused by <see cref="F:ItemType.GunShotgun"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.AK">
            <summary>
            Damage caused by <see cref="F:ItemType.GunAK"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Com15">
            <summary>
            Damage caused by <see cref="F:ItemType.GunCOM15"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Com18">
            <summary>
            Damage caused by <see cref="F:ItemType.GunCOM18"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Fsp9">
            <summary>
            Damage caused by <see cref="F:ItemType.GunFSP9"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.E11Sr">
            <summary>
            Damage caused by <see cref="F:ItemType.GunE11SR"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Hypothermia">
            <summary>
            <see cref="F:Exiled.API.Enums.EffectType.Hypothermia"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.ParticleDisruptor">
            <summary>
            Damage caused by <see cref="F:ItemType.ParticleDisruptor"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.CardiacArrest">
            <summary>
            Damage caused by <see cref="F:Exiled.API.Enums.EffectType.CardiacArrest"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Com45">
            <summary>
            Damage caused by <see cref="F:ItemType.GunCom45"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Jailbird">
            <summary>
            Damage caused by <see cref="F:ItemType.Jailbird"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Frmg0">
            <summary>
            Damage caused by <see cref="F:ItemType.GunFRMG0"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.A7">
            <summary>
            Damage caused by <see cref="F:ItemType.GunA7"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp3114">
            <summary>
            Damage caused by <see cref="F:PlayerRoles.RoleTypeId.Scp3114"/>
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Strangled">
            <summary>
            Damage caused by Scp3114's strangling ability.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Marshmallow">
            <summary>
            Damage caused by the marshmallow man.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp1507">
            <summary>
            Damage caused by <see cref="F:PlayerRoles.RoleTypeId.Flamingo"/>, <see cref="F:PlayerRoles.RoleTypeId.AlphaFlamingo"/> or <see cref="F:PlayerRoles.RoleTypeId.ZombieFlamingo"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Snowball">
            <summary>
            Damage caused by <see cref="F:ItemType.Snowball"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DamageType.Scp956">
            <summary>
            Damage caused by Pinata.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DecontaminationState">
            <summary>
            Represents the state of a <see cref="T:LightContainmentZoneDecontamination.DecontaminationController"/>.
            </summary>
            <seealso cref="P:Exiled.API.Features.Map.DecontaminationState"/>
        </member>
        <member name="F:Exiled.API.Enums.DecontaminationState.Disabled">
            <summary>
            Decontamination is disable.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DecontaminationState.Start">
            <summary>
            Decontamination has started.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DecontaminationState.Remain10Minutes">
            <summary>
            It's remain 10 minutes.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DecontaminationState.Remain5Minutes">
            <summary>
            It's remain 5 minutes.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DecontaminationState.Remain1Minute">
            <summary>
            It's remain 1 minutes.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DecontaminationState.Countdown">
            <summary>
            It's remain 30 seconds.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DecontaminationState.Lockdown">
            <summary>
            All doors is closed lock.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DecontaminationState.Finish">
            <summary>
            The decontamination has been done.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DoorBeepType">
            <summary>
            Door beep types.
            </summary>
            <seealso cref="M:Exiled.API.Features.Doors.Door.PlaySound(Exiled.API.Enums.DoorBeepType)"/>
        </member>
        <member name="F:Exiled.API.Enums.DoorBeepType.PermissionDenied">
            <summary>
            Permission denied beep.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorBeepType.LockBypassDenied">
            <summary>
            Lock bypass is denied.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorBeepType.InteractionDenied">
            <summary>
            Interaction denied.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorBeepType.InteractionAllowed">
            <summary>
            Interaction allowed.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DoorLockType">
            <summary>
            All possible door locks.
            </summary>
            <seealso cref="M:Exiled.API.Features.Doors.Door.LockAll(System.Single,Exiled.API.Enums.DoorLockType)"/>
            <seealso cref="M:Exiled.API.Features.Doors.Door.ChangeLock(Exiled.API.Enums.DoorLockType)"/>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.None">
            <summary>
            Unlocked.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Regular079">
            <summary>
            Regular SCP-079 door lock.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Lockdown079">
            <summary>
            SCP-079 lockdown room lock.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Warhead">
            <summary>
            Alpha Warhead detonation lock.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.AdminCommand">
            <summary>
            Locked via admin command.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.DecontLockdown">
            <summary>
            Locked by decontamination lockdown (after decon starts).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.DecontEvacuate">
            <summary>
            Locked by decontamination evacuation (during final countdown to decon).
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.SpecialDoorFeature">
            <summary>
            Special door features.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.NoPower">
            <summary>
            Door has no power.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Isolation">
            <summary>
            Isloation.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorLockType.Lockdown2176">
            <summary>
            Locked down by SCP-2176.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.DoorType">
            <summary>
            Unique identifier for the different types of doors.
            </summary>
            <seealso cref="P:Exiled.API.Features.Doors.Door.Type"/>
            <seealso cref="M:Exiled.API.Features.Doors.Door.Get(Exiled.API.Enums.DoorType)"/>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.UnknownDoor">
            <summary>
            Represents an unknown door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp914Door">
            <summary>
            Represents the 914 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GR18Inner">
            <summary>
            Represents the GR18_INNER door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp049Gate">
            <summary>
            Represents the Unsecured door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp049Armory">
            <summary>
            Represents the 049_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp079First">
            <summary>
            Represents the 079_FIRST door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp079Second">
            <summary>
            Represents the 079_SECOND door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp096">
            <summary>
            Represents the 096 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp079Armory">
            <summary>
            Represents the 079_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp106Primary">
            <summary>
            Represents the 106_PRIMARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp106Secondary">
            <summary>
            Represents the 106_SECONDARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Gate">
            <summary>
            Represents the 173_GATE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Connector">
            <summary>
            Represents the door between the 173 gate and the 173 armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Armory">
            <summary>
            Represents the 173_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173Bottom">
            <summary>
            Represents the 173_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GR18Gate">
            <summary>
            Represents the GR18 gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp914Gate">
            <summary>
            Represents the 914 gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp939Cryo">
            <summary>
            Represents the 939_CRYO door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointLczA">
            <summary>
            Represents the CHECKPOINT_LCZ_A door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointLczB">
            <summary>
            Represents the CHECKPOINT_LCZ_B door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EntranceDoor">
            <summary>
            Represents any entrance zone styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EscapePrimary">
            <summary>
            Represents the ESCAPE_PRIMARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.EscapeSecondary">
            <summary>
            Represents the ESCAPE_SECONDARY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ServersBottom">
            <summary>
            Represents the SERVERS_BOTTOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GateA">
            <summary>
            Represents the GATE_A door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.GateB">
            <summary>
            Represents the GATE_B door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HczArmory">
            <summary>
            Represents the HCZ_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HeavyContainmentDoor">
            <summary>
            Represents any heavy containment styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HID">
            <summary>
            Represents the HID door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HIDLeft">
            <summary>
            Represents the HID_LEFT door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.HIDRight">
            <summary>
            Represents the HID_RIGHT door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Intercom">
            <summary>
            Represents the INTERCOM door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczArmory">
            <summary>
            Represents the LCZ_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczCafe">
            <summary>
            Represents the LCZ_CAFE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LczWc">
            <summary>
            Represents the LCZ_WC door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.LightContainmentDoor">
            <summary>
            Represents any light containment styled door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.NukeArmory">
            <summary>
            Represents the NUKE_ARMORY door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.NukeSurface">
            <summary>
            Represents the NUKE_SURFACE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.PrisonDoor">
            <summary>
            Represents any of the Class-D cell doors.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.SurfaceGate">
            <summary>
            Represents the SURFACE_GATE door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp330">
            <summary>
            Represents the 330 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp330Chamber">
            <summary>
            Represents the 330_CHAMBER door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointGate">
            <summary>
            Represents the Gate in the Checkpoint between EZ and HCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.SurfaceDoor">
            <summary>
            Represents the Gate in the Checkpoint between EZ and HCZ.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointEzHczA">
            <summary>
            Represents the CHECKPOINT_EZ_HCZ_A door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointEzHczB">
            <summary>
            Represents the CHECKPOINT_EZ_HCZ_B door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.UnknownGate">
            <summary>
            Represents an unknown Gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.UnknownElevator">
            <summary>
            Represents an unknown Elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ElevatorGateA">
            <summary>
            Represents the Elevator door for <see cref="F:Interactables.Interobjects.ElevatorManager.ElevatorGroup.GateA"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ElevatorGateB">
            <summary>
            Represents the Elevator door for <see cref="F:Interactables.Interobjects.ElevatorManager.ElevatorGroup.GateB"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ElevatorNuke">
            <summary>
            Represents the Elevator door for <see cref="F:Interactables.Interobjects.ElevatorManager.ElevatorGroup.Nuke"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ElevatorScp049">
            <summary>
            Represents the Elevator door for <see cref="F:Interactables.Interobjects.ElevatorManager.ElevatorGroup.Scp049"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ElevatorLczA">
            <summary>
            Represents the Elevator door for <see cref="F:Interactables.Interobjects.ElevatorManager.ElevatorGroup.LczA01"/> and <see cref="F:Interactables.Interobjects.ElevatorManager.ElevatorGroup.LczA02"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.ElevatorLczB">
            <summary>
            Represents the Elevator door for <see cref="F:Interactables.Interobjects.ElevatorManager.ElevatorGroup.LczB01"/> and <see cref="F:Interactables.Interobjects.ElevatorManager.ElevatorGroup.LczB02"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointArmoryA">
            <summary>
            Represents the Armory door in <see cref="F:Exiled.API.Enums.RoomType.HczEzCheckpointA"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.CheckpointArmoryB">
            <summary>
            Represents the Armory door in <see cref="F:Exiled.API.Enums.RoomType.HczEzCheckpointB"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Airlock">
            <summary>
            Represents the door inside <see cref="F:Exiled.API.Enums.RoomType.LczAirlock"/> with <see cref="T:Interactables.Interobjects.AirlockController"/> component.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.DoorType.Scp173NewGate">
            <summary>
            Represents the New Gate where Scp173 spawn in the <see cref="F:Exiled.API.Enums.RoomType.Hcz049"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EffectCategory">
            <summary>
            An enum which represents the categories of an effect.
            </summary>
            <seealso cref="M:Exiled.API.Extensions.EffectTypeExtension.GetCategories(Exiled.API.Enums.EffectType)"/>
        </member>
        <member name="F:Exiled.API.Enums.EffectCategory.None">
            <summary>
            Represents an uncategorized effect.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectCategory.Positive">
            <summary>
            Represents an effect with a positive player impact.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectCategory.Negative">
            <summary>
            Represents an effect with a negative player impact.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectCategory.Movement">
            <summary>
            Represents an effect which modifies a player's movement speed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectCategory.Harmful">
            <summary>
            Represents an effect which deals damage to a player over time.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EffectType">
            <summary>
            Status effects as enum.
            </summary>
            <seealso cref="M:Exiled.API.Extensions.EffectTypeExtension.TryGetEffectType(CustomPlayerEffects.StatusEffectBase,Exiled.API.Enums.EffectType@)"/>
            <seealso cref="M:Exiled.API.Extensions.EffectTypeExtension.TryGetType(Exiled.API.Enums.EffectType,System.Type@)"/>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.None">
            <summary>
            This EffectType do not exist it's only use when not found or error.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.AmnesiaItems">
            <summary>
            The player isn't able to open their inventory or reload a weapon.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.AmnesiaVision">
            <summary>
            The player isn't able to see properly.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Asphyxiated">
            <summary>
            Drains the player's stamina and then health.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Bleeding">
            <summary>
            Damages the player over time.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Blinded">
            <summary>
            Blurs the player's screen.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Burned">
            <summary>
            Increases damage the player receives. Does not apply any standalone damage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Concussed">
            <summary>
            Blurs the player's screen while rotating.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Corroding">
            <summary>
            Effect given to player after being hurt by SCP-106.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Deafened">
            <summary>
            Deafens the player.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Decontaminating">
            <summary>
            Removes 10% of the player's health per second.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Disabled">
            <summary>
            Slows down the player's movement.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Ensnared">
            <summary>
            Prevents the player from moving.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Exhausted">
            <summary>
            Halves the player's maximum stamina and stamina regeneration rate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Flashed">
            <summary>
            Flashes the player.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Hemorrhage">
            <summary>
            Drains the player's health while sprinting.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Invigorated">
            <summary>
            Reduces the player's FOV, gives infinite stamina and gives the effect of underwater sound.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.BodyshotReduction">
            <summary>
            Reduces damage taken by body shots.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Poisoned">
            <summary>
            Damages the player every 5 seconds, starting low and increasing over time.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scp207">
            <summary>
            Increases the speed of the player while also draining health.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Invisible">
            <summary>
            Makes the player invisible.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.SinkHole">
            <summary>
            Slows down the player's movement with the SCP-106 sinkhole effect.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.DamageReduction">
            <summary>
            Reduces overall damage taken.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.MovementBoost">
            <summary>
            Increases movement speed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.RainbowTaste">
            <summary>
            Reduces the severity of negative effects.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.SeveredHands">
            <summary>
            Drops the player's current item, disables interaction with objects, and deals damage while effect is active.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Stained">
            <summary>
            Prevents the player from sprinting and reduces movement speed by 20%.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Vitality">
            <summary>
            Causes the player to become gain immunity to certain negative status effects.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Hypothermia">
            <summary>
            Cause the player to slowly take damage, reduces bullet accuracy, and increases item pickup time.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scp1853">
            <summary>
            Increases the player's motor function, causing the player to reduce the weapon draw time, reload spead, item pickup speed, and medical item usage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.CardiacArrest">
            <summary>
            Effect given to player after being hurt by SCP-049.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.InsufficientLighting">
            <summary>
            Cause the lighting in the facility to dim heavily for the player.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.SoundtrackMute">
            <summary>
            Disable ambient sound.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.SpawnProtected">
            <summary>
            Protects players from enemy damage if the config is enabled.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Traumatized">
            <summary>
            Make Scp106 able to see you when he is in the ground (stalking), causes the player's screens to become monochromatic when seeing Scp106, and instantly killed if attacked by Scp106.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.AntiScp207">
            <summary>
            It slows down the player, providing a passive health regeneration and saving the player from death once.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scanned">
            <summary>
            The effect that SCP-079 gives the scanned player with the Breach Scanner.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.PocketCorroding">
            <summary>
            Teleports the player to the pocket dimension and drains health until the player escapes or is killed. The amount of damage recieved increases the longer the effect is applied.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.SilentWalk">
            <summary>
            Reduces walking sound by 10%.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Marshmallow">
            <summary>
            Makes you a marshmallow guy.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Strangled">
            <summary>
            The effect that is given to the player when getting attacked by SCP-3114's Strangle ability.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Ghostly">
            <summary>
            Makes the player nearly invisible, and allows them to pass through doors.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.BecomingFlamingo">
            <summary>
            Makes you a flamingo.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scp559">
            <summary>
            Makes you a Child after eating Cake.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Scp956Target">
            <summary>
            Scp956 found you.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EffectType.Snowed">
            <summary>
            you are snowed.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ElevatorType">
            <summary>
            The unique type of elevator.
            </summary>
            <seealso cref="P:Exiled.API.Features.Lift.Type"/>
            <seealso cref="M:Exiled.API.Features.Lift.Get(Exiled.API.Enums.ElevatorType)"/>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Unknown">
            <summary>
            Unknown elevator Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.GateA">
            <summary>
            Entrance Gate A elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.GateB">
            <summary>
            Entrance Gate B elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Nuke">
            <summary>
            Heavy Containment Zone Nuke elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.Scp049">
            <summary>
            Heavy Containment Zone SCP-049 elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.LczA">
            <summary>
            Light Containment Zone checkpoint A elevator.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ElevatorType.LczB">
            <summary>
            Light Containment Zone checkpoint B elevator.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EnvironmentType">
            <summary>
            A set of environment types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Development">
            <summary>
            The development environment, for developers.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Testing">
            <summary>
            The testing environment, for testing things.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Production">
            <summary>
            The production environment, for the public.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.Ptb">
            <summary>
            The ptb environment, for Public Test Builds.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EnvironmentType.ProductionDebug">
            <summary>
            The Production enviroemnt, for the public, with debugging features.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.EscapeScenario">
            <summary>
            A set of different Escape Scenario Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EscapeScenario.None">
            <summary>
            No Escape Scenario.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EscapeScenario.ClassD">
            <summary>
            ClassD Escape Scenario.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EscapeScenario.CuffedClassD">
            <summary>
            Cuffed ClassD Escape.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EscapeScenario.Scientist">
            <summary>
            Scientist Escape.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EscapeScenario.CuffedScientist">
            <summary>
            Cuffed Scientist Escape.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.EscapeScenario.CustomEscape">
            <summary>
            Unspecified Escape.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.FirearmType">
            <summary>
            Represents a firearm.
            </summary>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetAttachmentIdentifiers(Exiled.API.Enums.FirearmType,System.UInt32)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetBaseCode(Exiled.API.Enums.FirearmType)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetFirearmType(ItemType)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetItemType(Exiled.API.Enums.FirearmType)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetMaxAmmo(Exiled.API.Enums.FirearmType)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetWeaponAmmoType(Exiled.API.Enums.FirearmType)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.TryGetAttachments(Exiled.API.Enums.FirearmType,System.UInt32,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier}@)"/>
            <seealso cref="P:Exiled.API.Features.Items.Firearm.FirearmType"/>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.None">
            <summary>
            Not a firearm.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.Com15">
            <summary>
            Represents the <see cref="F:ItemType.GunCOM15"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.Com18">
            <summary>
            Represents the <see cref="F:ItemType.GunCOM18"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.E11SR">
            <summary>
            Represents the <see cref="F:ItemType.GunE11SR"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.Crossvec">
            <summary>
            Represents the <see cref="F:ItemType.GunCrossvec"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.FSP9">
            <summary>
            Represents the <see cref="F:ItemType.GunFSP9"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.Logicer">
            <summary>
            Represents the <see cref="F:ItemType.GunLogicer"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.Revolver">
            <summary>
            Represents the <see cref="F:ItemType.GunRevolver"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.AK">
            <summary>
            Represents the <see cref="F:ItemType.GunAK"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.Shotgun">
            <summary>
            Represents the <see cref="F:ItemType.GunShotgun"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.Com45">
            <summary>
            Represents the <see cref="F:ItemType.GunCom45"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.ParticleDisruptor">
            <summary>
            Represents the <see cref="F:ItemType.ParticleDisruptor"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.FRMG0">
            <summary>
            Represents the <see cref="F:ItemType.GunFRMG0"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.FirearmType.A7">
            <summary>
            Represents the <see cref="F:ItemType.GunA7"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.GeneratorState">
            <summary>
            Represents the state of a <see cref="T:Exiled.API.Features.Generator"/>.
            </summary>
            <seealso cref="P:Exiled.API.Features.Generator.State"/>
            <seealso cref="M:Exiled.API.Features.Generator.Get(Exiled.API.Enums.GeneratorState)"/>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.None">
            <summary>
            Generator is locked.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.Unlocked">
            <summary>
            Generator is unlocked.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.Open">
            <summary>
            Generator is open.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.Activating">
            <summary>
            Generator is activating.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GeneratorState.Engaged">
            <summary>
            Generator is engaged.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.GlassType">
            <summary>
            Unique identifier for the different types of Window.
            </summary>
            <seealso cref="P:Exiled.API.Features.Window.Type"/>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Unknown">
            <summary>
            Represents an unknown window.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.GR18">
            <summary>
            Represents all the windows in <see cref="F:Exiled.API.Enums.RoomType.LczGlassBox"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Scp049">
            <summary>
            Represents the window in <see cref="F:Exiled.API.Enums.RoomType.Hcz049"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.MicroHid">
            <summary>
            Represents the windows in <see cref="F:Exiled.API.Enums.RoomType.HczHid"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Scp079">
            <summary>
            Represents the window in <see cref="F:Exiled.API.Enums.RoomType.Hcz079"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Scp079Trigger">
            <summary>
            Represents the <see cref="P:Exiled.API.Features.Recontainer.ActivatorWindow"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Scp330">
            <summary>
            Represents the window in <see cref="F:Exiled.API.Enums.RoomType.Lcz330"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.Plants">
            <summary>
            Represents all the windows in <see cref="F:Exiled.API.Enums.RoomType.LczPlants"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.HczEzCheckpointA">
            <summary>
            Represents all the windows in <see cref="F:Exiled.API.Enums.RoomType.HczEzCheckpointA"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.HczEzCheckpointB">
            <summary>
            Represents all the windows in <see cref="F:Exiled.API.Enums.RoomType.HczEzCheckpointB"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.GlassType.TestRoom">
            <summary>
            Represents the window in <see cref="F:Exiled.API.Enums.RoomType.HczTestRoom"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.KeycardPermissions">
            <summary>
            The types of permissions assigned to keycards.
            </summary>
            <seealso cref="P:Exiled.API.Features.Generator.KeycardPermissions"/>
            <seealso cref="M:Exiled.API.Features.Generator.SetPermissionFlag(Exiled.API.Enums.KeycardPermissions,System.Boolean)"/>
            <seealso cref="P:Exiled.API.Features.Items.Keycard.Permissions"/>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.Checkpoints">
            <summary>
            Opens checkpoints.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ExitGates">
            <summary>
            Opens <see cref="F:Exiled.API.Enums.DoorType.GateA">Gate A</see> and <see cref="F:Exiled.API.Enums.DoorType.GateB">Gate B</see>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.Intercom">
            <summary>
            Opens <see cref="F:Exiled.API.Enums.DoorType.Intercom">the Intercom door</see>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.AlphaWarhead">
            <summary>
            Opens the Alpha Warhead detonation button on surface.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelOne">
            <summary>
            Opens <see cref="F:Exiled.API.Enums.DoorType.Scp914Gate"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelTwo">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelOne"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.Checkpoints"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelThree">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.ContainmentLevelTwo"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.Intercom"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.AlphaWarhead"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelOne">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.Checkpoints"/>, Opens Light Containment armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelTwo">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelOne"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.ExitGates"/>, Opens Heavy Containment armories.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelThree">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.ArmoryLevelTwo"/>, <see cref="F:Exiled.API.Enums.KeycardPermissions.Intercom"/>, Opens MicroHID room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.KeycardPermissions.ScpOverride">
            <summary>
            <see cref="F:Exiled.API.Enums.KeycardPermissions.Checkpoints"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.LeadingTeam">
            <summary>
            The team that is currently leading the round.
            </summary>
            <seealso cref="M:Exiled.API.Extensions.RoleExtensions.GetLeadingTeam(PlayerRoles.Team)"/>
            <seealso cref="P:Exiled.API.Features.Player.LeadingTeam"/>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.FacilityForces">
            <summary>
            Represents the Scientists, Guards, and NTF team.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.ChaosInsurgency">
            <summary>
            Represents the Class-D and Chaos Insurgency team.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Anomalies">
            <summary>
            Represents the SCP team.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Draw">
            <summary>
            Represents a draw.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.LeadingTeam.Flamingo">
            <summary>
            Represents the Flamingo team.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.PingType">
            <summary>
            Enum that represents the type of SCP-079 ping.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PingType.Generator">
            <summary>
            Represents a generator ping.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PingType.Projectile">
            <summary>
            Represents a projectile ping.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PingType.MicroHid">
            <summary>
            Represents a Micro-HID ping.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PingType.Human">
            <summary>
            Represents a human ping.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PingType.Elevator">
            <summary>
            Represents an elevator ping.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PingType.Door">
            <summary>
            Represents a door ping.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PingType.Default">
            <summary>
            Represents a general ping.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.PluginPriority">
            <summary>
            Provides simple and readable plugin priority values.
            </summary>
            <seealso cref="P:Exiled.API.Interfaces.IPlugin`1.Priority"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Default">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.Medium"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Last">
            <summary>
            Execute the plugin last, after other ones.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Lowest">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.Last"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Lower">
            <summary>
            Default plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Low">
            <summary>
            Low plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Medium">
            <summary>
            Medium plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.High">
            <summary>
            Higher plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Higher">
            <summary>
            Higher plugin priority.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.Highest">
            <inheritdoc cref="F:Exiled.API.Enums.PluginPriority.First"/>
        </member>
        <member name="F:Exiled.API.Enums.PluginPriority.First">
            <summary>
            Execute the plugin first, before other ones.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ProjectileType">
            <summary>
            Projectile types.
            </summary>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetItemType(Exiled.API.Enums.ProjectileType)"/>
            <seealso cref="M:Exiled.API.Extensions.ItemExtensions.GetProjectileType(ItemType)"/>
        </member>
        <member name="F:Exiled.API.Enums.ProjectileType.None">
            <summary>
            Not a projectile.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ProjectileType.FragGrenade">
            <summary>
            High explosive grenade.
            Used by <see cref="F:ItemType.GrenadeHE"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ProjectileType.Flashbang">
            <summary>
            Flashbang.
            Used by <see cref="F:ItemType.GrenadeFlash"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ProjectileType.Scp018">
            <summary>
            SCP-018 ball.
            Used by <see cref="F:ItemType.SCP018"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ProjectileType.Scp2176">
            <summary>
            SCP-2176 lightbulb.
            Used by <see cref="F:ItemType.SCP2176"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ProjectileType.Coal">
            <summary>
            Coal from chrithmass tree.
            Used by <see cref="F:ItemType.Coal"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ProjectileType.SpecialCoal">
            <summary>
            Coal but Special.
            Used by <see cref="F:ItemType.SpecialCoal"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ProjectileType.Snowball">
            <summary>
            Snowball from snow.
            Used by <see cref="F:ItemType.Snowball"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RadioRange">
            <summary>
            All possible <see cref="T:Exiled.API.Features.Items.Radio"/> ranges.
            </summary>
            <seealso cref="P:Exiled.API.Features.Items.Radio.Range"/>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Short">
            <summary>
            The shortest range with the lowest battery usage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Medium">
            <summary>
            The standard, default range.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Long">
            <summary>
            A longer range with increased battery usage.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RadioRange.Ultra">
            <summary>
            The longest range with the most battery usage.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ReservedSlotEventResult">
            <summary>
            Result for ReservedSlots event.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ReservedSlotEventResult.UseBaseGameSystem">
            <summary>
            Don't override the base game decision.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ReservedSlotEventResult.CanUseReservedSlots">
            <summary>
            Override: player has a reserved slot.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ReservedSlotEventResult.CannotUseReservedSlots">
            <summary>
            Override: player doesn't have a reserved slot.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ReservedSlotEventResult.AllowConnectionUnconditionally">
            <summary>
            Bypass the reserved slots system and allow the connection unconditionally.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RespawnEffectType">
            <summary>
            Layers game respawn effects.
            </summary>
            <seealso cref="M:Exiled.API.Features.Respawn.PlayEffect(Exiled.API.Enums.RespawnEffectType)"/>
            <seealso cref="M:Exiled.API.Features.Respawn.PlayEffects(Exiled.API.Enums.RespawnEffectType[])"/>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.PlayChaosInsurgencyMusic">
            <summary>
            Plays the <see cref="F:Exiled.API.Enums.Side.ChaosInsurgency"/> music to alive <see cref="F:PlayerRoles.RoleTypeId.ClassD"/> and <see cref="F:Exiled.API.Enums.Side.ChaosInsurgency"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.SummonChaosInsurgencyVan">
            <summary>
            Summons the <see cref="F:Exiled.API.Enums.Side.ChaosInsurgency"/> van.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RespawnEffectType.SummonNtfChopper">
            <summary>
            Summons the NTF chopper.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.RoomType">
            <summary>
            Unique identifier for the different types of rooms.
            </summary>
            <seealso cref="P:Exiled.API.Features.Room.Type"/>
            <seealso cref="M:Exiled.API.Features.Room.Get(Exiled.API.Enums.RoomType)"/>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Unknown">
            <summary>
            Unknown Room Type.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczArmory">
            <summary>
            Light Containment Zone's Armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCurve">
            <summary>
            Light Containment Zone's Curved Hall.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczStraight">
            <summary>
            Light Containment Zone's Straight Hall.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz914">
            <summary>
            Light Containment Zone's SCP-914 room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCrossing">
            <summary>
            Light Containment Zone's 4-Way intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczTCross">
            <summary>
            Light Containment Zone's 3-Way intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCafe">
            <summary>
            Light Containment Zone's PC-15's room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczPlants">
            <summary>
            Light Containment Zone's VT-00's room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczToilets">
            <summary>
            Light Containment Zone's Water Closet.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczAirlock">
            <summary>
            Light Containment Zone's Airlock room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz173">
            <summary>
            Light Containment Zone's PT-00 room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczClassDSpawn">
            <summary>
            Light Containment Zone's Class-D spawn room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCheckpointB">
            <summary>
            Light Containment Zone's Checkpoint B room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczGlassBox">
            <summary>
            Light Containment Zone's GR-18's room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.LczCheckpointA">
            <summary>
            Light Containment Zone's Checkpoint A room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz079">
            <summary>
            Heavy Containment Zone's SCP-079 room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczEzCheckpointA">
            <summary>
            Heavy Containment Zone's Entrance Checkpoint A room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczEzCheckpointB">
            <summary>
            Heavy Containment Zone's Entrance Checkpoint B room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczArmory">
            <summary>
            Heavy Containment Zone's 3-Way Intersection + Armory room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz939">
            <summary>
            Heavy Containment Zone's SCP-939 room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczHid">
            <summary>
            Heavy Containment Zone's MicroHID straight hall.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz049">
            <summary>
            Heavy Containment Zone's SCP-049 + SCP-173's room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczCrossing">
            <summary>
            Heavy Containment Zone's 4-way intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz106">
            <summary>
            Heavy Containment Zone's SCP-106 room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczNuke">
            <summary>
            Heavy Containment Zone's nuke room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTesla">
            <summary>
            Heavy Containment Zone's Tesla straight hall.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczServers">
            <summary>
            Heavy Containment Zone's Servers room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTCross">
            <summary>
            Heavy Containment Zone's 3-way intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczCurve">
            <summary>
            Heavy Containment Zone's cruved hall.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Hcz096">
            <summary>
            Heavy Containment Zone's SCP-096 room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzVent">
            <summary>
            Entrance Zone's Red Vent room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzIntercom">
            <summary>
            Entrance Zone's Intercom room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzGateA">
            <summary>
            Entrance Zone's Gate A room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzDownstairsPcs">
            <summary>
            Entrance Zone's straight hall with PC's on a lower level.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCurve">
            <summary>
            Entrance Zone's curved hall.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzPcs">
            <summary>
            Entrance Zone's straight hall with PC's on the main level.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCrossing">
            <summary>
            Entrance Zone's 4-way intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCollapsedTunnel">
            <summary>
            Entrance Zone's Red Collapsed Tunnel Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzConference">
            <summary>
            Entrance Zone's straight hall with Dr.L's locked room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzStraight">
            <summary>
            Entrance Zone's straight hall
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCafeteria">
            <summary>
            Entrance Zone's Cafeteria Room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzUpstairsPcs">
            <summary>
            Entrance Zone's straight hall with PC's and upper level.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzGateB">
            <summary>
            Entrance Zone's Gate B room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzShelter">
            <summary>
            Entrance Zone's Shelter rfoom.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Pocket">
            <summary>
            The Pocket Dimension.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Surface">
            <summary>
            The Surface.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczStraight">
            <summary>
            Heavy Containment Zone's straight hall.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzTCross">
            <summary>
            Entrance Zone's 3-way intersection.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.Lcz330">
            <summary>
            Light Containment ZOne's SCP-330 room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.EzCheckpointHallway">
            <summary>
            Entrance Zone's straight hall before the entrance/heavy checkpoint.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczTestRoom">
            <summary>
            Heavy Containment Zone's test room's straight hall.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczElevatorA">
            <summary>
            Heavy Containment Zone's Elevator System A room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.RoomType.HczElevatorB">
            <summary>
            Heavy Containment Elevator Zone's System B room.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ShootingTargetButton">
            <summary>
            Possible shooting target buttons.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.IncreaseHp">
            <summary>
            Increase HP button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.DecreaseHp">
            <summary>
            Decrease HP button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.IncreaseResetTime">
            <summary>
            Increase reset time button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.DecreaseResetTime">
            <summary>
            Decrease reset time button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.Reset">
            <summary>
            Reset button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.Remove">
            <summary>
            Remove button.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetButton.ToggleSync">
            <summary>
            Toggle sync mode button.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ShootingTargetType">
            <summary>
            Shooting target types present in the game.
            </summary>
            <seealso cref="P:Exiled.API.Features.Toys.ShootingTargetToy.Type"/>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetType.Unknown">
            <summary>
            Unknown target.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetType.Sport">
            <summary>
            Radial sport target.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetType.ClassD">
            <summary>
            D-Class target.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ShootingTargetType.Binary">
            <summary>
            Binary target.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.Side">
            <summary>
            In which side a certain <see cref="T:PlayerRoles.RoleTypeId"/> belongs.
            </summary>
            <seealso cref="M:Exiled.API.Extensions.RoleExtensions.GetSide(PlayerRoles.RoleTypeId)"/>
            <seealso cref="M:Exiled.API.Extensions.RoleExtensions.GetSide(PlayerRoles.Team)"/>
            <seealso cref="M:Exiled.API.Features.Player.Get(Exiled.API.Enums.Side)"/>
            <seealso cref="P:Exiled.API.Features.Round.AliveSides"/>
            <seealso cref="T:Exiled.API.Enums.Side"/>
        </member>
        <member name="F:Exiled.API.Enums.Side.Scp">
            <summary>
            SCP team. Same as <see cref="F:PlayerRoles.Team.SCPs"/>.
            Contains all SCP-related roles: <see cref="F:PlayerRoles.RoleTypeId.Scp049"/>, <see cref="F:PlayerRoles.RoleTypeId.Scp0492"/>, <see cref="F:PlayerRoles.RoleTypeId.Scp079"/>, <see cref="F:PlayerRoles.RoleTypeId.Scp096"/>,
            <see cref="F:PlayerRoles.RoleTypeId.Scp106"/>, <see cref="F:PlayerRoles.RoleTypeId.Scp173"/>, <see cref="F:PlayerRoles.RoleTypeId.Scp939"/>, and <see cref="F:PlayerRoles.RoleTypeId.Scp3114"/> and <see cref="F:PlayerRoles.RoleTypeId.ZombieFlamingo"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Mtf">
            <summary>
            Mobile Task Forces team.
            Contains <see cref="F:PlayerRoles.RoleTypeId.Scientist"/>, <see cref="F:PlayerRoles.RoleTypeId.FacilityGuard"/>, <see cref="F:PlayerRoles.RoleTypeId.NtfPrivate"/>, <see cref="F:PlayerRoles.RoleTypeId.NtfSergeant"/>,
            <see cref="F:PlayerRoles.RoleTypeId.NtfCaptain"/> and <see cref="F:PlayerRoles.RoleTypeId.NtfSpecialist"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.ChaosInsurgency">
            <summary>
            Chaos Insurgency team.
            Contains <see cref="F:PlayerRoles.RoleTypeId.ClassD"/>, <see cref="F:PlayerRoles.RoleTypeId.ChaosConscript"/>, <see cref="F:PlayerRoles.RoleTypeId.ChaosRepressor"/>, <see cref="F:PlayerRoles.RoleTypeId.ChaosRifleman"/> and <see cref="F:PlayerRoles.RoleTypeId.ChaosMarauder"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Tutorial">
            <summary>
            Tutorial team. Contains <see cref="F:PlayerRoles.RoleTypeId.Tutorial"/>. Same as <see cref="F:PlayerRoles.Team.OtherAlive"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.None">
            <summary>
            No team. Same as <see cref="F:PlayerRoles.Team.Dead"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.Side.Flamingo">
            <summary>
            Tutorial team. Contains <see cref="F:PlayerRoles.RoleTypeId.Flamingo"/> and <see cref="F:PlayerRoles.RoleTypeId.AlphaFlamingo"/>. Same as <see cref="F:PlayerRoles.Team.Flamingos"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.SpawnLocationType">
            <summary>
            All of the valid spawn location types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside330">
            <summary>
            The inside of SCP-330's room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside330Chamber">
            <summary>
            The inside of SCP-330's room test chamber.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside049Armory">
            <summary>
            The inside of SCP-049's Armory room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside079Secondary">
            <summary>
            The inside of the inner SCP-079 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside096">
            <summary>
            The inside of SCP-096's locked room behind its spawn.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside173Armory">
            <summary>
            The inside of the armory next to SCP-173's spawn.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside173Bottom">
            <summary>
            The inside of the door at the bottom of SCP-173's stairs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside173Connector">
            <summary>
            On the side closest to SCP-173's spawn, on the top of the stairs.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideEscapePrimary">
            <summary>
            Inside the first Escape door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideEscapeSecondary">
            <summary>
            Inside the second Escape door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideIntercom">
            <summary>
            Just inside the Intercom door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideLczArmory">
            <summary>
            Inside the LCZ Armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideLczCafe">
            <summary>
            Inside the LCZ PC-15 room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideNukeArmory">
            <summary>
            Inside the Nuke armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideSurfaceNuke">
            <summary>
            Inside the surface nuke room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside079First">
            <summary>
            Inside the first SCP-079 gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside173Gate">
            <summary>
            Inside SCP-173's gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.Inside914">
            <summary>
            Just inside of SCP-914.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideGateA">
            <summary>
            Inside the Gate-A room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideGateB">
            <summary>
            Inside the Gate-B room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideGr18">
            <summary>
            Inside the GR-18 door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideHczArmory">
            <summary>
            Inside the 3-way intersection HCZ Armory.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideHid">
            <summary>
            Inside the Micro-HID room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideHidLeft">
            <summary>
            Just inside the left door next to Micro-HID room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideHidRight">
            <summary>
            Just inside the right door next to Micro-HID room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideLczWc">
            <summary>
            Just inside the LCZ WC door.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideServersBottom">
            <summary>
            Just inside the door at the bottom of the server's room.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnLocationType.InsideLocker">
            <summary>
            Inside a random locker on the map.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.SpawnReason">
            <summary>
            Possible spawn reasons.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.None">
            <summary>
            No reason specified.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.RoundStart">
            <summary>
            The round has just started.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.LateJoin">
            <summary>
            The player joined and the round recently started.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Respawn">
            <summary>
            The player was dead and is respawning.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Died">
            <summary>
            The player has died.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Escaped">
            <summary>
            The player has escaped.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Revived">
            <summary>
            The player was revived by SCP-049.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.ForceClass">
            <summary>
            The player's role was changed by an admin command or plugin.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.Destroyed">
            <summary>
            The player will be destroyed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.SpawnReason.ItemUsage">
            <summary>
            The player was spawned due to the usage of an item.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ThrowRequest">
            <summary>
            Possible throwable throw types.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ThrowRequest.BeginThrow">
            <summary>
            Requesting to begin throwing a throwable item.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ThrowRequest.WeakThrow">
            <summary>
            Requesting to confirm a weak throw.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ThrowRequest.FullForceThrow">
            <summary>
            Requesting to confirm a strong throw.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ThrowRequest.CancelThrow">
            <summary>
            Requesting to cancel a throw.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.UsableRippleType">
             <summary>
             All RippleTriggers usable in the game.
             </summary>
            
        </member>
        <member name="F:Exiled.API.Enums.UsableRippleType.FireArm">
            <summary>
            The FireArm Ripple.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.UsableRippleType.Footstep">
            <summary>
            The Footstep Ripple.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.WarheadStatus">
            <summary>
            All the available warhead statuses.
            </summary>
            <seealso cref="P:Exiled.API.Features.Warhead.Status"/>
        </member>
        <member name="F:Exiled.API.Enums.WarheadStatus.NotArmed">
            <summary>
            The warhead is not armed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.WarheadStatus.Armed">
            <summary>
            The warhead is armed.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.WarheadStatus.InProgress">
            <summary>
            The warhead detonation is in progress.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.WarheadStatus.Detonated">
            <summary>
            The warhead has detonated.
            </summary>
        </member>
        <member name="T:Exiled.API.Enums.ZoneType">
            <summary>
            Facility zone types.
            </summary>
            <seealso cref="P:Exiled.API.Features.Room.Zone"/>
            <seealso cref="P:Exiled.API.Features.Camera.Zone"/>
            <seealso cref="P:Exiled.API.Features.Player.Zone"/>
            <seealso cref="P:Exiled.API.Features.Doors.Door.Zone"/>
            <seealso cref="M:Exiled.API.Features.Doors.Door.Random(Exiled.API.Enums.ZoneType,System.Boolean)"/>
            <seealso cref="M:Exiled.API.Features.Room.Random(Exiled.API.Enums.ZoneType)"/>
            <seealso cref="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,Exiled.API.Enums.ZoneType)"/>
            <seealso cref="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})"/>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Unspecified">
            <summary>
            An unspecified zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.LightContainment">
            <summary>
            The Light Containment Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.HeavyContainment">
            <summary>
            The Heavy Containment Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Entrance">
            <summary>
            The Entrance Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Surface">
            <summary>
            The Surface Zone.
            </summary>
        </member>
        <member name="F:Exiled.API.Enums.ZoneType.Other">
            <summary>
            An unknown type of zone.
            </summary>
        </member>
        <member name="T:Exiled.API.Extensions.CommonExtensions">
            <summary>
            A set of extensions for common things.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.CommonExtensions.GetRandomValue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a random value from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="enumerable"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to be used to get a random value.</param>
            <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IEnumerable`1"/> elements.</typeparam>
            <returns>Returns a random value from <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.CommonExtensions.GetRandomValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Gets a random value from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that matches the provided condition.
            </summary>
            <param name="enumerable"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to be used to get a random value.</param>
            <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IEnumerable`1"/> elements.</typeparam>
            <param name="condition">The condition to require.</param>
            <returns>Returns a random value from <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.CommonExtensions.Multiply(UnityEngine.AnimationCurve,System.Single)">
            <summary>
            Modify the curve with the amount used.
            </summary>
            <param name="curve">The AnimationCurve to modify.</param>
            <param name="amount">The multiplier number.</param>
            <returns>The new modfied curve.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.CommonExtensions.Add(UnityEngine.AnimationCurve,System.Single)">
            <summary>
            Modify the curve with the amount used.
            </summary>
            <param name="curve">The AnimationCurve to mofify.</param>
            <param name="amount">The add number.</param>
            <returns>The new modfied curve.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.DamageTypeExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Enums.DamageType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.DamageTypeExtensions.TranslationIdConversion">
            <summary>
            Gets conversion information between <see cref="F:PlayerStatsSystem.DeathTranslation.Id"/>s and <see cref="T:Exiled.API.Enums.DamageType"/>s.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.DamageTypeExtensions.TranslationConversion">
            <summary>
            Gets conversion information between <see cref="T:PlayerStatsSystem.DeathTranslation"/>s and <see cref="T:Exiled.API.Enums.DamageType"/>s.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.DamageTypeExtensions.ItemConversion">
            <summary>
            Gets conversion information between <see cref="T:ItemType"/>s and <see cref="T:Exiled.API.Enums.DamageType"/>s.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.DamageTypeExtensions.IsWeapon(Exiled.API.Enums.DamageType,System.Boolean)">
            <summary>
            Check if a <see cref="T:Exiled.API.Enums.DamageType">damage type</see> is caused by a weapon.
            </summary>
            <param name="type">The damage type to be checked.</param>
            <param name="checkMicro">Indicates whether or not the MicroHid damage type should be taken into account.</param>
            <returns>Returns whether or not the <see cref="T:Exiled.API.Enums.DamageType"/> is caused by weapon.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DamageTypeExtensions.IsScp(Exiled.API.Enums.DamageType,System.Boolean)">
            <summary>
            Check if a <see cref="T:Exiled.API.Enums.DamageType">damage type</see> is caused by a SCP.
            </summary>
            <param name="type">The damage type to be checked.</param>
            <param name="checkItems">Indicates whether or not the SCP-items damage types should be taken into account.</param>
            <returns>Returns whether or not the <see cref="T:Exiled.API.Enums.DamageType"/> is caused by SCP.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DamageTypeExtensions.IsStatusEffect(Exiled.API.Enums.DamageType)">
            <summary>
            Check if a <see cref="T:Exiled.API.Enums.DamageType">damage type</see> is caused by a status effect.
            </summary>
            <param name="type">The damage type to be checked.</param>
            <returns>Returns whether or not the <see cref="T:Exiled.API.Enums.DamageType"/> is caused by status effect.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DamageTypeExtensions.GetDamageType(PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.DamageType"/> of an <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>s.
            </summary>
            <param name="damageHandlerBase">The DamageHandler to convert.</param>
            <returns>The <see cref="T:Exiled.API.Enums.DamageType"/> of the <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.DoorTypeExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Enums.DoorType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.DoorTypeExtensions.IsGate(Exiled.API.Enums.DoorType)">
            <summary>
            Checks if a <see cref="T:Exiled.API.Enums.DoorType">door type</see> is a gate.
            </summary>
            <param name="door">The door to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.DoorType"/> is a gate or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DoorTypeExtensions.IsCheckpoint(Exiled.API.Enums.DoorType)">
            <summary>
            Checks if a <see cref="T:Exiled.API.Enums.DoorType">door type</see> is a checkpoint.
            </summary>
            <param name="door">The door to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.DoorType"/> is a checkpoint or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.DoorTypeExtensions.IsElevator(Exiled.API.Enums.DoorType)">
            <summary>
            Checks if a <see cref="T:Exiled.API.Enums.DoorType">door type</see> is an elevator.
            </summary>
            <param name="door">The door to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.DoorType"/> is an elevator or not.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.EffectTypeExtension">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.EffectTypeExtension.EffectTypeToType">
            <summary>
            Gets a dictionary that maps each <see cref="T:Exiled.API.Enums.EffectType"/> to its corresponding <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.EffectTypeExtension.TypeToEffectType">
            <summary>
            Gets a dictionary that maps each <see cref="T:System.Type"/> to its corresponding <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.Type(Exiled.API.Enums.EffectType)">
            <summary>
            Gets an instance of <see cref="T:System.Type"/> points to an effect.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> enum.</param>
            <returns>The <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.TryGetType(Exiled.API.Enums.EffectType,System.Type@)">
            <summary>
            Gets an instance of <see cref="T:System.Type"/> points to an effect.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> enum.</param>
            <param name="type">The type found with the corresponding EffecType.</param>
            <returns>Whether or not the effectType has been found.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.GetEffectType(CustomPlayerEffects.StatusEffectBase)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.EffectType"/> of the specified <see cref="T:CustomPlayerEffects.StatusEffectBase"/>.
            </summary>
            <param name="statusEffectBase">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> enum.</param>
            <returns>The <see cref="T:Exiled.API.Enums.EffectType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.TryGetEffectType(CustomPlayerEffects.StatusEffectBase,Exiled.API.Enums.EffectType@)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.EffectType"/> of the specified <see cref="T:CustomPlayerEffects.StatusEffectBase"/>.
            </summary>
            <param name="statusEffectBase">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> enum.</param>
            <param name="effect">The effect found.</param>
            <returns>Whether or not the effect has been found.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.IsHarmful(Exiled.API.Enums.EffectType)">
            <summary>
            Returns whether or not the provided <paramref name="effect"/> drains health over time.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>Whether or not the effect drains health over time.</returns>
            <seealso cref="M:Exiled.API.Extensions.EffectTypeExtension.IsHealing(Exiled.API.Enums.EffectType)"/>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.IsHealing(Exiled.API.Enums.EffectType)">
            <summary>
            Returns whether or not the provided <paramref name="effect"/> heals a player.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>Whether or not the effect heals.</returns>
            <seealso cref="M:Exiled.API.Extensions.EffectTypeExtension.IsHarmful(Exiled.API.Enums.EffectType)"/>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.IsNegative(Exiled.API.Enums.EffectType)">
            <summary>
            Returns whether or not the provided <paramref name="effect"/> is a negative effect.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>Whether or not the effect is a negative effect.</returns>
            <seealso cref="M:Exiled.API.Extensions.EffectTypeExtension.IsHarmful(Exiled.API.Enums.EffectType)"/>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.IsPositive(Exiled.API.Enums.EffectType)">
            <summary>
            Returns whether or not the provided <paramref name="effect"/> is a positive effect.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>Whether or not the effect is a positive effect.</returns>
            <seealso cref="M:Exiled.API.Extensions.EffectTypeExtension.IsHealing(Exiled.API.Enums.EffectType)"/>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.IsMovement(Exiled.API.Enums.EffectType)">
            <summary>
            Returns whether or not the provided <paramref name="effect"/> affects the player's movement speed.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>Whether or not the effect modifies the player's movement speed.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.IsDisplayed(Exiled.API.Enums.EffectType)">
            <summary>
            Returns whether or not the provided <paramref name="effect"/> is displayed to spectators as text.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>Whether or not the effect is displayed to spectators as text.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.EffectTypeExtension.GetCategories(Exiled.API.Enums.EffectType)">
            <summary>
            Returns the <see cref="T:Exiled.API.Enums.EffectCategory"/> of the given <paramref name="effect"/>.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>The <see cref="T:Exiled.API.Enums.EffectCategory"/> representing the effect.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.ItemExtensions">
            <summary>
            A set of extensions for <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsAmmo(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an ammo.
            </summary>
            <param name="item">The item to be checked.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is an ammo or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsWeapon(ItemType,System.Boolean)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a weapon.
            </summary>
            <param name="type">The item to be checked.</param>
            <param name="checkMicro">Indicates whether the MicroHID item should be taken into account or not.</param>
            <returns>Returns whether the <see cref="T:ItemType"/> is a weapon or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsScp(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is an SCP.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether or not the <see cref="T:ItemType"/> is an SCP.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsThrowable(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a throwable item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether or not the <see cref="T:ItemType"/> is a throwable item.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsMedical(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a medical item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether or not the <see cref="T:ItemType"/> is a medical item.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsUtility(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a utility item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether or not the <see cref="T:ItemType"/> is an utilty item.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsArmor(ItemType)">
            <summary>
            Check if a <see cref="T:ItemType"/> is an armor item.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether or not the <see cref="T:ItemType"/> is an armor.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.IsKeycard(ItemType)">
            <summary>
            Check if an <see cref="T:ItemType">item</see> is a keycard.
            </summary>
            <param name="type">The item to be checked.</param>
            <returns>Returns whether or not the <see cref="T:ItemType"/> is a keycard.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemBase(ItemType)">
            <summary>
            Given an <see cref="T:ItemType"/>, returns the matching <see cref="T:InventorySystem.Items.ItemBase"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/>.</param>
            <returns>The <see cref="T:InventorySystem.Items.ItemBase"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetPickupBase(ItemType)">
            <summary>
            Given an <see cref="T:ItemType"/>, returns the matching <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/>.</param>
            <returns>The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemBase``1(ItemType)">
            <summary>
            Given an <see cref="T:ItemType"/>, returns the matching <see cref="T:InventorySystem.Items.ItemBase"/>, casted to <typeparamref name="T"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/>.</param>
            <typeparam name="T">The type to cast the <see cref="T:InventorySystem.Items.ItemBase"/> to.</typeparam>
            <returns>The <see cref="T:InventorySystem.Items.ItemBase"/> casted to <typeparamref name="T"/>, or <see langword="null"/> if not found or couldn't be casted.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetMaxAmmo(Exiled.API.Enums.FirearmType)">
            <summary>
            Gets the maximum ammo of a weapon.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Enums.FirearmType">weapon</see> that you want to get maximum of.</param>
            <returns>Returns the maximum.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetWeaponAmmoType(Exiled.API.Enums.FirearmType)">
            <summary>
            Returns the <see cref="T:Exiled.API.Enums.AmmoType"/> of the weapon is using.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.FirearmType"/> to convert.</param>
            <returns>The given weapon's AmmoType.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetAmmoType(ItemType)">
            <summary>
            Converts a valid ammo <see cref="T:ItemType"/> into an <see cref="T:Exiled.API.Enums.AmmoType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to convert.</param>
            <returns>The ammo type of the given item type.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetFirearmType(ItemType)">
            <summary>
            Converts a valid firearm <see cref="T:ItemType"/> into a <see cref="T:Exiled.API.Enums.FirearmType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to convert.</param>
            <returns>The firearm type of the given item.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemType(Exiled.API.Enums.AmmoType)">
            <summary>
            Converts an <see cref="T:Exiled.API.Enums.AmmoType"/> into it's corresponding <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.AmmoType"/> to convert.</param>
            <returns>The Item type of the specified ammo.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemType(Exiled.API.Enums.FirearmType)">
            <summary>
            Converts a <see cref="T:Exiled.API.Enums.FirearmType"/> into it's corresponding <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.FirearmType"/> to convert.</param>
            <returns>The Item type of the specified firearm.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetProjectileType(ItemType)">
            <summary>
            Converts a valid projectile <see cref="T:ItemType"/> into a <see cref="T:Exiled.API.Enums.ProjectileType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to convert.</param>
            <returns>The projectile type of the given item type, or <see cref="F:Exiled.API.Enums.ProjectileType.None"/> if the provided item type is not a projectile.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemType(Exiled.API.Enums.ProjectileType)">
            <summary>
            Converts a <see cref="T:Exiled.API.Enums.ProjectileType"/> into the corresponding <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.ProjectileType"/> to convert.</param>
            <returns>The Item type of the specified grenade.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetItemTypes(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Items.Item"/>s into the corresponding <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ItemType"/>s.
            </summary>
            <param name="items">The items to convert.</param>
            <returns>A new <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:ItemType"/>s.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetAttachmentIdentifiers(Exiled.API.Enums.FirearmType,System.UInt32)">
            <summary>
            Gets all <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>s present on a <see cref="T:Exiled.API.Enums.FirearmType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.FirearmType"/> to iterate over.</param>
            <param name="code">The <see cref="T:System.UInt32"/> value which represents the attachments code to check.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> value which represents all the attachments present on the specified <see cref="T:ItemType"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.TryGetAttachments(Exiled.API.Enums.FirearmType,System.UInt32,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier}@)">
            <summary>
            Tries to get all <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>s present on a <see cref="T:Exiled.API.Enums.FirearmType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.FirearmType"/> to iterate over.</param>
            <param name="code">The <see cref="T:System.UInt32"/> value which represents the attachments code to check.</param>
            <param name="identifiers">The attachments present on the specified <see cref="T:Exiled.API.Enums.FirearmType"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:Exiled.API.Enums.FirearmType"/> is a weapon.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetAttachmentsCode(System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Gets the value resulting from the sum of all elements within a specific <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="identifiers">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compute.</param>
            <returns>A <see cref="T:System.UInt32"/> value that represents the attachments code.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetBaseCode(Exiled.API.Enums.FirearmType)">
            <summary>
            Gets the base code of the specified <see cref="T:Exiled.API.Enums.FirearmType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.FirearmType"/> to check.</param>
            <returns>The corresponding base code.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.ItemExtensions.GetCategory(ItemType)">
            <summary>
            Gets the <see cref="T:ItemCategory"/> of the specified <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to check.</param>
            <returns><see cref="T:ItemCategory"/> of the specified <see cref="T:ItemType"/>.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.MirrorExtensions">
            <summary>
            A set of extensions for <see cref="N:Mirror"/> Networking.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.WriterExtensions">
            <summary>
            Gets <see cref="T:System.Reflection.MethodInfo"/> corresponding to <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SyncVarDirtyBits">
            <summary>
            Gets a all DirtyBit <see cref="T:System.UInt64"/> from <see cref="T:Exiled.API.Extensions.StringExtensions"/>(format:classname.methodname).
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.RpcFullNames">
            <summary>
            Gets Rpc's FullName <see cref="T:System.String"/> corresponding to <see cref="T:Exiled.API.Extensions.StringExtensions"/>(format:classname.methodname).
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SetDirtyBitsMethodInfo">
            <summary>
            Gets a <see cref="M:Mirror.NetworkBehaviour.SetSyncVarDirtyBit(System.UInt64)"/>'s <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Extensions.MirrorExtensions.SendSpawnMessageMethodInfo">
            <summary>
            Gets a NetworkServer.SendSpawnMessage's <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.PlayBeepSound(Exiled.API.Features.Player)">
            <summary>
            Plays a beep sound that only the target <paramref name="player"/> can hear.
            </summary>
            <param name="player">Target to play sound to.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SetPlayerInfoForTargetOnly(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String)">
            <summary>
            Set <see cref="P:Exiled.API.Features.Player.CustomInfo"/> on the <paramref name="target"/> player that only the <paramref name="player"/> can see.
            </summary>
            <param name="player">Only this player can see info.</param>
            <param name="target">Target to set info.</param>
            <param name="info">Setting info.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.PlayGunSound(Exiled.API.Features.Player,UnityEngine.Vector3,ItemType,System.Byte,System.Byte)">
            <summary>
            Plays a gun sound that only the <paramref name="player"/> can hear.
            </summary>
            <param name="player">Target to play.</param>
            <param name="position">Position to play on.</param>
            <param name="itemType">Weapon' sound to play.</param>
            <param name="volume">Sound's volume to set.</param>
            <param name="audioClipId">GunAudioMessage's audioClipId to set (default = 0).</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SetRoomColorForTargetOnly(Exiled.API.Features.Room,Exiled.API.Features.Player,UnityEngine.Color)">
            <summary>
            Sets <see cref="P:Exiled.API.Features.Room.Color"/> of a <paramref name="room"/> that only the <paramref name="target"/> player can see.
            </summary>
            <param name="room">Room to modify.</param>
            <param name="target">Only this player can see room color.</param>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SetName(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String)">
            <summary>
            Sets <see cref="P:Exiled.API.Features.Player.DisplayNickname"/> of a <paramref name="player"/> that only the <paramref name="target"/> player can see.
            </summary>
            <param name="target">Only this player can see the name changed.</param>
            <param name="player">Player that will desync the CustomName.</param>
            <param name="name">Nickname to set.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SetRoomLightIntensityForTargetOnly(Exiled.API.Features.Room,Exiled.API.Features.Player,System.Single)">
            <summary>
            Sets <see cref="T:Exiled.API.Features.Room"/> of a <paramref name="room"/> that only the <paramref name="target"/> player can see.
            </summary>
            <param name="room">Room to modify.</param>
            <param name="target">Only this player can see room color.</param>
            <param name="multiplier">Light intensity multiplier to set.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ChangeAppearance(Exiled.API.Features.Player,PlayerRoles.RoleTypeId,System.Boolean,System.Byte)">
            <summary>
            Change <see cref="T:Exiled.API.Features.Player"/> character model for appearance.
            It will continue until <see cref="T:Exiled.API.Features.Player"/>'s <see cref="T:PlayerRoles.RoleTypeId"/> changes.
            </summary>
            <param name="player">Player to change.</param>
            <param name="type">Model type.</param>
            <param name="skipJump">Whether or not to skip the little jump that works around an invisibility issue.</param>
            <param name="unitId">The UnitNameId to use for the player's new role, if the player's new role uses unit names. (is NTF).</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ChangeAppearance(Exiled.API.Features.Player,PlayerRoles.RoleTypeId,System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},System.Boolean,System.Byte)">
            <summary>
            Change <see cref="T:Exiled.API.Features.Player"/> character model for appearance.
            It will continue until <see cref="T:Exiled.API.Features.Player"/>'s <see cref="T:PlayerRoles.RoleTypeId"/> changes.
            </summary>
            <param name="player">Player to change.</param>
            <param name="type">Model type.</param>
            <param name="playersToAffect">The players who should see the changed appearance.</param>
            <param name="skipJump">Whether or not to skip the little jump that works around an invisibility issue.</param>
            <param name="unitId">The UnitNameId to use for the player's new role, if the player's new role uses unit names. (is NTF).</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.PlayCassieAnnouncement(Exiled.API.Features.Player,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Send CASSIE announcement that only <see cref="T:Exiled.API.Features.Player"/> can hear.
            </summary>
            <param name="player">Target to send.</param>
            <param name="words">Announcement words.</param>
            <param name="makeHold">Same on <see cref="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isHeld.</param>
            <param name="makeNoise">Same on <see cref="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isNoisy.</param>
            <param name="isSubtitles">Same on <see cref="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isSubtitles.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.MessageTranslated(Exiled.API.Features.Player,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Send CASSIE announcement with custom subtitles for translation that only <see cref="T:Exiled.API.Features.Player"/> can hear and see it.
            </summary>
            <param name="player">Target to send.</param>
            <param name="words">The message to be reproduced.</param>
            <param name="translation">The translation should be show in the subtitles.</param>
            <param name="makeHold">Same on <see cref="M:Exiled.API.Features.Cassie.MessageTranslated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isHeld.</param>
            <param name="makeNoise">Same on <see cref="M:Exiled.API.Features.Cassie.MessageTranslated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isNoisy.</param>
            <param name="isSubtitles">Same on <see cref="M:Exiled.API.Features.Cassie.MessageTranslated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"/>'s isSubtitles.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeSyncVar(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.String,System.Object)">
            <summary>
            Send fake values to client's <see cref="T:Mirror.SyncVarAttribute"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="propertyName">Property name starting with Network.</param>
            <param name="value">Value of send to target.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.ResyncSyncVar(Mirror.NetworkIdentity,System.Type,System.String)">
            <summary>
            Force resync to client's <see cref="T:Mirror.SyncVarAttribute"/>.
            </summary>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="propertyName">Property name starting with Network.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeTargetRpc(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.String,System.Object[])">
            <summary>
            Send fake values to client's <see cref="T:Mirror.ClientRpcAttribute"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="rpcName">Property name starting with Rpc.</param>
            <param name="values">Values of send to target.</param>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.SendFakeSyncObject(Exiled.API.Features.Player,Mirror.NetworkIdentity,System.Type,System.Action{Mirror.NetworkWriter})">
            <summary>
            Send fake values to client's <see cref="T:Mirror.SyncObject"/>.
            </summary>
            <param name="target">Target to send.</param>
            <param name="behaviorOwner"><see cref="T:Mirror.NetworkIdentity"/> of object that owns <see cref="T:Mirror.NetworkBehaviour"/>.</param>
            <param name="targetType"><see cref="T:Mirror.NetworkBehaviour"/>'s type.</param>
            <param name="customAction">Custom writing action.</param>
            <example>
            EffectOnlySCP207.
            <code>
             MirrorExtensions.SendCustomSync(player, player.ReferenceHub.networkIdentity, typeof(PlayerEffectsController), (writer) => {
              writer.WriteUInt64(1ul);                                           // DirtyObjectsBit
              writer.WriteUInt32(1);                                             // DirtyIndexCount
              writer.WriteByte((byte)SyncList&lt;byte&gt;.Operation.OP_SET);     // Operations
              writer.WriteUInt32(17);                                            // EditIndex
              writer.WriteByte(1);                                               // Value
             });
            </code>
            </example>
        </member>
        <member name="M:Exiled.API.Extensions.MirrorExtensions.EditNetworkObject(Mirror.NetworkIdentity,System.Action{Mirror.NetworkIdentity})">
            <summary>
            Edit <see cref="T:Mirror.NetworkIdentity"/>'s parameter and sync.
            </summary>
            <param name="identity">Target object.</param>
            <param name="customAction">Edit function.</param>
        </member>
        <member name="T:Exiled.API.Extensions.QueueExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.Queue`1"/> extensions.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.QueueExtensions.RemoveFromQueue``1(System.Collections.Generic.Queue{``0},``0)">
            <summary>
            Removes a specific value from a queue.
            </summary>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> to remove from.</param>
            <param name="data">The item to remove.</param>
            <typeparam name="T">The <see cref="T:System.Type"/> of data used.</typeparam>
        </member>
        <member name="T:Exiled.API.Extensions.ReflectionExtensions">
            <summary>
            A set of extensions for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.ReflectionExtensions.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a static method.
            </summary>
            <param name="type">The method type.</param>
            <param name="methodName">The method name.</param>
            <param name="param">The method parameters.</param>
        </member>
        <member name="M:Exiled.API.Extensions.ReflectionExtensions.InvokeStaticEvent(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a static event.
            </summary>
            <param name="type">The event type.</param>
            <param name="eventName">The event name.</param>
            <param name="param">The event arguments.</param>
        </member>
        <member name="M:Exiled.API.Extensions.ReflectionExtensions.CopyProperties(System.Object,System.Object)">
            <summary>
            Copy all properties from the source class to the target one.
            </summary>
            <param name="target">The target object.</param>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="T:Exiled.API.Extensions.RoleExtensions">
            <summary>
            A set of extensions for <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetColor(PlayerRoles.RoleTypeId)">
            <summary>
            Gets a <see cref="T:PlayerRoles.RoleTypeId">role's</see> <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/> to get the color of.</param>
            <returns>The <see cref="T:UnityEngine.Color"/> of the role.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetSide(PlayerRoles.RoleTypeId)">
            <summary>
            Gets a <see cref="T:PlayerRoles.RoleTypeId">role's</see> <see cref="T:Exiled.API.Enums.Side"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/> to check the side of.</param>
            <returns><see cref="T:Exiled.API.Enums.Side"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetSide(PlayerRoles.Team)">
            <summary>
            Gets a <see cref="T:PlayerRoles.Team">team's</see> <see cref="T:Exiled.API.Enums.Side"/>.
            </summary>
            <param name="team">The <see cref="T:PlayerRoles.Team"/> to get the <see cref="T:Exiled.API.Enums.Side"/> of.</param>
            <returns><see cref="T:Exiled.API.Enums.Side"/>.</returns>.
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetTeam(PlayerRoles.RoleTypeId)">
            <summary>
            Gets the <see cref="T:PlayerRoles.Team"/> of the given <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns><see cref="T:PlayerRoles.Team"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetFullName(PlayerRoles.RoleTypeId)">
            <summary>
            Gets the full name of the given <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="typeId">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetRoleBase(PlayerRoles.RoleTypeId)">
            <summary>
            Gets the base <see cref="T:PlayerRoles.PlayerRoleBase"/> of the given <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>The <see cref="T:PlayerRoles.PlayerRoleBase"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.TryGetRoleBase(PlayerRoles.RoleTypeId,PlayerRoles.PlayerRoleBase@)">
            <summary>
            Tries to get the base <see cref="T:PlayerRoles.PlayerRoleBase"/> of the given <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <param name="roleBase">The <see cref="T:PlayerRoles.PlayerRoleBase"/> to return.</param>
            <returns>The <see cref="T:PlayerRoles.PlayerRoleBase"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetLeadingTeam(PlayerRoles.Team)">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.LeadingTeam"/>.
            </summary>
            <param name="team">Team.</param>
            <returns><see cref="T:Exiled.API.Enums.LeadingTeam"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.IsFpcRole(PlayerRoles.RoleTypeId)">
            <summary>
            Checks whether a <see cref="T:PlayerRoles.RoleTypeId"/> is an <see cref="T:PlayerRoles.FirstPersonControl.IFpcRole"/> or not.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>Returns whether <paramref name="roleType"/> is an <see cref="T:PlayerRoles.FirstPersonControl.IFpcRole"/> or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetRandomSpawnLocation(PlayerRoles.RoleTypeId)">
            <summary>
            Gets a random spawn point of a <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/> to get the spawn point from.</param>
            <returns>Returns a <see cref="T:Exiled.API.Features.Spawn.SpawnLocation"/> representing the spawn, or <see langword="null"/> if no spawns were found.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetStartingInventory(PlayerRoles.RoleTypeId)">
            <summary>
            Gets the starting items of a <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>An <see cref="T:System.Array"/> of <see cref="T:ItemType"/> that the role receives on spawn. Will be empty for classes that do not spawn with items.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoleExtensions.GetStartingAmmo(PlayerRoles.RoleTypeId)">
            <summary>
            Gets the starting ammo of a <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns>An <see cref="T:System.Array"/> of <see cref="T:ItemType"/> that the role receives on spawn. Will be empty for classes that do not spawn with ammo.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.RoomExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Enums.RoomType"/> and <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.RoomExtensions.IsGate(Exiled.API.Enums.RoomType)">
            <summary>
            Checks if a <see cref="T:Exiled.API.Enums.RoomType">room type</see> is a gate.
            </summary>
            <param name="room">The room to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.RoomType"/> is a gate or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoomExtensions.IsCheckpoint(Exiled.API.Enums.RoomType)">
            <summary>
            Checks if a <see cref="T:Exiled.API.Enums.RoomType">room type</see> is a checkpoint.
            </summary>
            <param name="room">The room to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.RoomType"/> is a checkpoint or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoomExtensions.IsLczCheckpoint(Exiled.API.Enums.RoomType)">
            <summary>
            Checks if a <see cref="T:Exiled.API.Enums.RoomType">room type</see> is a Lcz checkpoint.
            </summary>
            <param name="room">The room to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.RoomType"/> is a Lcz checkpoint or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoomExtensions.IsHczCheckpoint(Exiled.API.Enums.RoomType)">
            <summary>
            Checks if a <see cref="T:Exiled.API.Enums.RoomType">room type</see> is a Hcz checkpoint.
            </summary>
            <param name="room">The room to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.RoomType"/> is a Hcz checkpoint or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoomExtensions.IsScp(Exiled.API.Enums.RoomType)">
            <summary>
             Checks if a <see cref="T:Exiled.API.Enums.RoomType">room type</see> contains any SCP.
            </summary>
            <param name="room">The room to be checked.</param>
            <returns>Returns whether the <see cref="T:Exiled.API.Enums.RoomType"/> contains any SCP or not.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoomExtensions.GetZone(MapGeneration.FacilityZone)">
            <summary>
            Converts the provided <see cref="T:MapGeneration.FacilityZone"/> into the corresponding <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
            <param name="facility">The <see cref="T:MapGeneration.FacilityZone"/> to convert.</param>
            <returns>ZoneType.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.RoomExtensions.GetZone(Exiled.API.Enums.ZoneType)">
            <summary>
            Converts the provided <see cref="T:Exiled.API.Enums.ZoneType"/> into the corresponding <see cref="T:MapGeneration.FacilityZone"/>.
            </summary>
            <param name="facility">The <see cref="T:Exiled.API.Enums.ZoneType"/> to convert.</param>
            <returns>FacilityZone.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.SpawnExtensions">
            <summary>
            A set of extensions for <see cref="T:Exiled.API.Enums.SpawnLocationType"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Extensions.SpawnExtensions.ReversedLocations">
            <summary>
            The names of spawn locations who's positions are on the opposite side of their door, and must be corrected.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.SpawnExtensions.GetDoor(Exiled.API.Enums.SpawnLocationType)">
            <summary>
            Tries to get the <see cref="T:UnityEngine.Transform"/> of the door used for a specific <see cref="T:Exiled.API.Enums.SpawnLocationType"/>.
            </summary>
            <param name="location">The <see cref="T:Exiled.API.Enums.SpawnLocationType"/> to check.</param>
            <returns>The <see cref="T:UnityEngine.Transform"/> used for that spawn location. Can be <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.SpawnExtensions.GetPosition(Exiled.API.Enums.SpawnLocationType)">
            <summary>
            Tries to get the <see cref="T:UnityEngine.Vector3"/> used for a specific <see cref="T:Exiled.API.Enums.SpawnLocationType"/>.
            </summary>
            <param name="location">The <see cref="T:Exiled.API.Enums.SpawnLocationType"/> to check.</param>
            <returns>The <see cref="T:UnityEngine.Vector3"/> used for that spawn location. Can be <see cref="P:UnityEngine.Vector3.zero"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.SpawnExtensions.GetDoorName(Exiled.API.Enums.SpawnLocationType)">
            <summary>
            The names of the doors attached to each spawn location.
            </summary>
            <param name="spawnLocation">The <see cref="T:Exiled.API.Enums.SpawnLocationType"/>.</param>
            <returns>Returns the door name.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.StringExtensions">
            <summary>
            A set of extensions for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.GetDistance(System.String,System.String)">
            <summary>
            Compute the distance between two <see cref="T:System.String"/>.
            </summary>
            <param name="firstString">The first string to be compared.</param>
            <param name="secondString">The second string to be compared.</param>
            <returns>Returns the distance between the two strings.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.ExtractCommand(System.String)">
            <summary>
            Extract command name and arguments from a <see cref="T:System.String"/>.
            </summary>
            <param name="commandLine">The <see cref="T:System.String"/> to extract from.</param>
            <returns>Returns a <see cref="T:System.ValueTuple"/> containing the exctracted command name and arguments.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.ToSnakeCase(System.String,System.Boolean)">
            <summary>
            Converts a <see cref="T:System.String"/> to snake_case convention.
            </summary>
            <param name="str">The string to be converted.</param>
            <param name="shouldReplaceSpecialChars">Indicates whether special chars has to be replaced or not.</param>
            <returns>Returns the new snake_case string.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a string.
            </summary>
            <typeparam name="T">The type of the IEnumerable.</typeparam>
            <param name="enumerable">The instance.</param>
            <param name="showIndex">Indicates whether the enumerator index should be shown or not.</param>
            <returns>Returns the converted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.RemoveBracketsOnEndOfName(System.String)">
            <summary>
            Removes the prefab-generated brackets (#) on <see cref="T:UnityEngine.GameObject"/> names.
            </summary>
            <param name="name">Name of the <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>Name without brackets.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.GetBefore(System.String,System.Char)">
            <summary>
            Retrieves a string before a symbol from an input.
            </summary>
            <param name="input">The input.</param>
            <param name="symbol">The symbol.</param>
            <returns>Substring before the symbol.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.SplitCamelCase(System.String)">
            <summary>
            Splits camel case string to space-separated words. Ex: SomeCamelCase -> Some Camel Case.
            </summary>
            <param name="input">Camel case string.</param>
            <returns>Splitted string.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.RemoveSpaces(System.String)">
            <summary>
            Removes all space symbols from string.
            </summary>
            <param name="input">Input string.</param>
            <returns>String without spaces.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.GetRawUserId(System.String)">
            <summary>
            Gets the player's user id without the authentication.
            </summary>
            <param name="userId">The user id.</param>
            <returns>Returns the raw user id.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.StringExtensions.GetHashedUserId(System.String)">
            <summary>
            Gets a SHA256 hash of a player's user id without the authentication.
            </summary>
            <param name="userId">The user id.</param>
            <returns>The hashed userid.</returns>
        </member>
        <member name="T:Exiled.API.Extensions.UserGroupExtensions">
            <summary>
            Contains a useful extension to compare two <see cref="T:UserGroup"/>'s.
            </summary>
        </member>
        <member name="M:Exiled.API.Extensions.UserGroupExtensions.EqualsTo(UserGroup,UserGroup)">
            <summary>
            Compares two <see cref="T:UserGroup"/>'s for equality.
            </summary>
            <param name="this">The first <see cref="T:UserGroup"/>.</param>
            <param name="other">The second <see cref="T:UserGroup"/>.</param>
            <returns><see langword="true"/> if they are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.UserGroupExtensions.GetKey(UserGroup)">
            <summary>
            Searches for a key of a group in the <see cref="T:PermissionsHandler">RemoteAdmin</see> config.
            </summary>
            <param name="this">The <see cref="T:UserGroup"/>.</param>
            <returns>The key of that group, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Extensions.UserGroupExtensions.GetValue(System.String)">
            <summary>
            Searches for a value of a group in the <see cref="T:PermissionsHandler">RemoteAdmin</see> config.
            </summary>
            <param name="groupName">The <see cref="T:System.String"/>.</param>
            <returns>The value of that group, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="T:Exiled.API.Features.Attributes.CustomAbilityAttribute">
            <summary>
            An attribute to easily manage CustomAbility initialization.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Attributes.CustomItemAttribute">
            <summary>
            An attribute to easily manage CustomItem initialization.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Attributes.CustomItemAttribute.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Attributes.CustomItemAttribute"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to serialize.</param>
        </member>
        <member name="P:Exiled.API.Features.Attributes.CustomItemAttribute.ItemType">
            <summary>
            Gets the attribute's <see cref="T:ItemType"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Attributes.CustomRoleAttribute">
            <summary>
            An attribute to easily manage CustomRole initialization.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Attributes.CustomRoleAttribute.#ctor(PlayerRoles.RoleTypeId)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Attributes.CustomRoleAttribute"/> class.
            </summary>
            <param name="type">The <see cref="T:PlayerRoles.RoleTypeId"/> to serialize.</param>
        </member>
        <member name="P:Exiled.API.Features.Attributes.CustomRoleAttribute.RoleTypeId">
            <summary>
            Gets the attribute's <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Attributes.DynamicEventDispatcherAttribute">
            <summary>
            An attribute to easily manage <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> initialization.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Attributes.PatchGroupAttribute">
            <summary>
            This attribute is used within Harmony patches and the relative annotations to define a target element.
            <br>A target element can be a <see cref="T:System.Type"/>, <see langword="class"/> or <see cref="T:System.Reflection.MethodInfo"/>.</br>
            <para>
            <br><see cref="T:Exiled.API.Features.Attributes.PatchGroupAttribute"/> allows to define elements made for patching.</br>
            <br>A target-patching approach is useful to patch specific elements without having to directly patch everything without considering excluded elements.</br>
            <br>Target-patching also allows to emit patches without having to manually define and/or supply parameters and elements made for patching</br>
            </para>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Attributes.PatchGroupAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Attributes.PatchGroupAttribute"/> class.
            </summary>
            <param name="groupId">The group of target-patch.</param>
        </member>
        <member name="P:Exiled.API.Features.Attributes.PatchGroupAttribute.GroupId">
            <summary>
            Gets the group id.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Badge">
            <summary>
            Represents an in-game badge.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Badge.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Badge"/> struct.
            </summary>
            <param name="text">The badge text.</param>
            <param name="color">The badge color.</param>
            <param name="isGlobal">Indicates whether the badge is global or not.</param>
        </member>
        <member name="P:Exiled.API.Features.Badge.Text">
            <summary>
            Gets the badge text.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.Color">
            <summary>
            Gets the badge color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Badge.IsGlobal">
            <summary>
            Gets a value indicating whether the badge is global or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Badge.IsValidColor(System.String,System.Nullable{Misc.PlayerInfoColorTypes}@)">
            <summary>
            Gets whether or not the provided hex color code can be used in badges.
            </summary>
            <param name="hex">The hex color code, including the <c>#</c>.</param>
            <param name="colorType">If the method returns <see langword="true"/>, this will be an enum representing the hex code. If the method returns <see langword="false"/>, this will be <see langword="null"/>.</param>
            <returns>Whether or not the provided hex color code can be used in badges.</returns>
        </member>
        <member name="M:Exiled.API.Features.Badge.GetHexColor(Misc.PlayerInfoColorTypes)">
            <summary>
            Gets the hex color code of the provided <see cref="T:Misc.PlayerInfoColorTypes"/>.
            </summary>
            <param name="colorType">The <see cref="T:Misc.PlayerInfoColorTypes"/> to get the hex color code of.</param>
            <returns>The hex color code, including the <c>#</c>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Badge.ToString">
            <summary>
            Returns the Badge in a human-readable format.
            </summary>
            <returns>A string containing Badge-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Broadcast">
            <summary>
            Useful class to save broadcast configs in a cleaner way.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Broadcast"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.#ctor(System.String,System.UInt16,System.Boolean,Broadcast.BroadcastFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Broadcast"/> class.
            </summary>
            <param name="content">The content of the broadcast>.</param>
            <param name="duration">The duration of the broadcast, in seconds.</param>
            <param name="show">Whether or not the broadcast should be shown.</param>
            <param name="type">The type of the broadcast.</param>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Content">
            <summary>
            Gets or sets the broadcast content.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Duration">
            <summary>
            Gets or sets the broadcast duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Type">
            <summary>
            Gets or sets the broadcast type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Broadcast.Show">
            <summary>
            Gets or sets a value indicating whether the broadcast should be shown or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Broadcast.ToString">
            <summary>
            Returns the Broadcast in a human-readable format.
            </summary>
            <returns>A string containing Broadcast-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Camera">
            <summary>
            The in-game Scp079Camera.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Camera.Camera079ToCamera">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>s and their corresponding <see cref="T:Exiled.API.Features.Camera"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Camera.#ctor(PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Camera"/> class.
            </summary>
            <param name="camera079">The base camera.</param>
        </member>
        <member name="P:Exiled.API.Features.Camera.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains all the <see cref="T:Exiled.API.Features.Camera"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Random">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Camera"/>.
            </summary>
            <returns><see cref="T:Exiled.API.Features.Camera"/> object.</returns>
        </member>
        <member name="P:Exiled.API.Features.Camera.Base">
            <summary>
            Gets the base <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.GameObject">
            <summary>
            Gets the camera's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Transform">
            <summary>
            Gets the camera's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Name">
            <summary>
            Gets the camera's name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Id">
            <summary>
            Gets the camera's id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Room">
            <summary>
            Gets the generator's <see cref="P:Exiled.API.Features.Camera.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Zone">
            <summary>
            Gets the camera's <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Type">
            <summary>
            Gets the camera's <see cref="T:Exiled.API.Enums.CameraType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Position">
            <summary>
            Gets the camera's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Rotation">
            <summary>
            Gets or sets the camera's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.Zoom">
            <summary>
            Gets the value of the <see cref="T:Exiled.API.Features.Camera"/> zoom.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Camera.IsBeingUsed">
            <summary>
            Gets or sets a value indicating whether or not this camera is being used by SCP-079.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(System.Collections.Generic.IEnumerable{PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains all the <see cref="T:Exiled.API.Features.Camera"/> instances given a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.
            </summary>
            <param name="cameras">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Camera"/> belonging to the <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>, if any.
            </summary>
            <param name="camera079">The base <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Camera"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(System.UInt32)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified <paramref name="cameraId"/>.
            </summary>
            <param name="cameraId">The camera id to be searched for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Camera"/> with the given id or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified <paramref name="cameraName"/>.
            </summary>
            <param name="cameraName">The name of the camera.</param>
            <returns>The <see cref="T:Exiled.API.Features.Camera"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(Exiled.API.Enums.CameraType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified <paramref name="cameraType"/>.
            </summary>
            <param name="cameraType">The <see cref="T:Exiled.API.Enums.CameraType"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Camera"/> with the given <see cref="T:Exiled.API.Enums.CameraType"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.Get(System.Func{Exiled.API.Features.Camera,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.TryGet(System.Collections.Generic.IEnumerable{PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera},System.Collections.Generic.IEnumerable{Exiled.API.Features.Camera}@)">
            <summary>
            Get a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains all the <see cref="T:Exiled.API.Features.Camera"/> instance given a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.
            </summary>
            <param name="cameras">the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.</param>
            <param name="result">return a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/>, it's can be valid, or <see langword="null"/>, depending if <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/> it's null or not.</param>
            <returns>a bool result if return sequence contain valid element.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.TryGet(PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera,Exiled.API.Features.Camera@)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Camera"/> belonging to the <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>, if any.
            </summary>
            <param name="camera">The base <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/>.</param>
            <param name="result">The instance of <see cref="T:Exiled.API.Features.Camera"/> which <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera"/> base.</param>
            <returns><see langword="true"/> if <see cref="T:Exiled.API.Features.Camera"/> is not <see langword="null"/>, or <see langword="false"/> if <see cref="T:Exiled.API.Features.Camera"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.TryGet(System.UInt32,Exiled.API.Features.Camera@)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified <paramref name="cameraId"/>.
            </summary>
            <param name="cameraId">The id camera to be shearch.</param>
            <param name="result">the result of <see cref="T:Exiled.API.Features.Camera"/>, if <paramref name="cameraId"/> is valid.</param>
            <returns><see langword="true"/> if <see cref="T:Exiled.API.Features.Camera"/> is not <see langword="null"/>, or <see langword="false"/> if <see cref="T:Exiled.API.Features.Camera"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.TryGet(System.String,Exiled.API.Features.Camera@)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified <paramref name="cameraName"/>.
            </summary>
            <param name="cameraName">The name of the camera.</param>
            <param name="result">The <see cref="T:Exiled.API.Features.Camera"/>, if <paramref name="cameraName"/> is valid.</param>
            <returns><see langword="true"/> if <see cref="T:Exiled.API.Features.Camera"/> is not <see langword="null"/>, or <see langword="false"/> if <see cref="T:Exiled.API.Features.Camera"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.TryGet(Exiled.API.Enums.CameraType,Exiled.API.Features.Camera@)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Camera"/> given the specified <paramref name="cameraType"/>.
            </summary>
            <param name="cameraType">The <see cref="T:Exiled.API.Enums.CameraType"/> to search for.</param>
            <param name="result">The <see cref="T:Exiled.API.Features.Camera"/> with the given <see cref="T:Exiled.API.Enums.CameraType"/>.</param>
            <returns><see langword="true"/> if <see cref="T:Exiled.API.Features.Camera"/> is not <see langword="null"/>, or <see langword="false"/> if <see cref="T:Exiled.API.Features.Camera"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.TryGet(System.Func{Exiled.API.Features.Camera,System.Boolean},System.Collections.Generic.IEnumerable{Exiled.API.Features.Camera}@)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <param name="result">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains elements that satify the condition.</param>
            <returns><see langword="true"/> if <see cref="T:Exiled.API.Features.Camera"/> is not <see langword="null"/>, or <see langword="false"/> if <see cref="T:Exiled.API.Features.Camera"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Camera.ToString">
            <summary>
            Returns the Camera in a human-readable format.
            </summary>
            <returns>A string containing Camera-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Cassie">
            <summary>
            A set of tools to use in-game C.A.S.S.I.E.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Cassie.Announcer">
            <summary>
            Gets the <see cref="T:NineTailedFoxAnnouncer"/> singleton.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Cassie.IsSpeaking">
            <summary>
            Gets a value indicating whether or not C.A.S.S.I.E is currently announcing. Does not include decontamination or Alpha Warhead Messages.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Cassie.VoiceLines">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:NineTailedFoxAnnouncer.VoiceLine"/> objects that C.A.S.S.I.E recognizes.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Cassie.Message(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a non-glitched C.A.S.S.I.E message.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
            <param name="isSubtitles">Indicates whether C.A.S.S.I.E has to make subtitles.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.MessageTranslated(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a non-glitched C.A.S.S.I.E message with a possibility to custom the subtitles.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="translation">The translation should be show in the subtitles.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
            <param name="isSubtitles">Indicates whether C.A.S.S.I.E has to make subtitles.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.GlitchyMessage(System.String,System.Single,System.Single)">
            <summary>
            Reproduce a glitchy C.A.S.S.I.E announcement.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="glitchChance">The chance of placing a glitch between each word.</param>
            <param name="jamChance">The chance of jamming each word.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.DelayedMessage(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Reproduce a non-glitched C.A.S.S.I.E message after a certain amount of seconds.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="delay">The seconds that have to pass before reproducing the message.</param>
            <param name="isHeld">Indicates whether C.A.S.S.I.E has to hold the message.</param>
            <param name="isNoisy">Indicates whether C.A.S.S.I.E has to make noises or not during the message.</param>
            <param name="isSubtitles">Indicates whether C.A.S.S.I.E has to make subtitles.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.DelayedGlitchyMessage(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Reproduce a glitchy C.A.S.S.I.E announcement after a certain period of seconds.
            </summary>
            <param name="message">The message to be reproduced.</param>
            <param name="delay">The seconds that have to pass before reproducing the message.</param>
            <param name="glitchChance">The chance of placing a glitch between each word.</param>
            <param name="jamChance">The chance of jamming each word.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.CalculateDuration(System.String,System.Boolean,System.Single)">
            <summary>
            Calculates the duration of a C.A.S.S.I.E message.
            </summary>
            <param name="message">The message, which duration will be calculated.</param>
            <param name="rawNumber">Determines if a number won't be converted to its full pronunciation.</param>
            <param name="speed">The speed of the message.</param>
            <returns>Duration (in seconds) of specified message.</returns>
        </member>
        <member name="M:Exiled.API.Features.Cassie.ConvertTeam(PlayerRoles.Team,System.String)">
            <summary>
            Converts a <see cref="T:PlayerRoles.Team"/> into a Cassie-Readable <c>CONTAINMENTUNIT</c>.
            </summary>
            <param name="team"><see cref="T:PlayerRoles.Team"/>.</param>
            <param name="unitName">Unit Name.</param>
            <returns><see cref="T:System.String"/> Containment Unit text.</returns>
        </member>
        <member name="M:Exiled.API.Features.Cassie.ConvertNumber(System.Int32)">
            <summary>
            Converts a number into a Cassie-Readable String.
            </summary>
            <param name="num">Number to convert.</param>
            <returns>A CASSIE-readable <see cref="T:System.String"/> representing the number.</returns>
        </member>
        <member name="M:Exiled.API.Features.Cassie.ScpTermination(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Announce a SCP Termination.
            </summary>
            <param name="scp">SCP to announce termination of.</param>
            <param name="info">HitInformation.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.CustomScpTermination(System.String,Exiled.API.Features.DamageHandlers.DamageHandlerBase)">
            <summary>
            Announces the termination of a custom SCP name.
            </summary>
            <param name="scpName">SCP Name. Note that for larger numbers, C.A.S.S.I.E will pronounce the place (eg. "457" -> "four hundred fifty seven"). Spaces can be used to prevent this behavior.</param>
            <param name="info">Hit Information.</param>
        </member>
        <member name="M:Exiled.API.Features.Cassie.Clear">
            <summary>
            Clears the C.A.S.S.I.E queue.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Cassie.IsValid(System.String)">
            <summary>
            Gets a value indicating whether or not the given word is a valid C.A.S.S.I.E word.
            </summary>
            <param name="word">The word to check.</param>
            <returns><see langword="true"/> if the word is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Cassie.IsValidSentence(System.String)">
            <summary>
            Gets a value indicating whether or not the given sentence is all valid C.A.S.S.I.E word.
            </summary>
            <param name="sentence">The sentence to check.</param>
            <returns><see langword="true"/> if the sentence is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.ComponentsEqualityComparer">
            <summary>
            Represents the equality comparer for unity components.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.ComponentsEqualityComparer.Equals(UnityEngine.Component,UnityEngine.Component)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.ComponentsEqualityComparer.GetHashCode(UnityEngine.Component)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Components.CollisionHandler">
            <summary>
            Collision Handler for grenades.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Components.CollisionHandler.Owner">
            <summary>
            Gets the thrower of the grenade.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Components.CollisionHandler.Grenade">
            <summary>
            Gets the grenade itself.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Components.CollisionHandler.Init(UnityEngine.GameObject,InventorySystem.Items.ThrowableProjectiles.ThrownProjectile)">
            <summary>
            Inits the <see cref="T:Exiled.API.Features.Components.CollisionHandler"/> object.
            </summary>
            <param name="owner">The grenade owner.</param>
            <param name="grenade">The grenade component.</param>
        </member>
        <member name="T:Exiled.API.Features.Components.FakeConnection">
            <summary>
            A fake network connection.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Components.FakeConnection.#ctor(System.Int32)">
            <inheritdoc cref="T:Mirror.NetworkConnectionToClient"/>
        </member>
        <member name="P:Exiled.API.Features.Components.FakeConnection.address">
            <inheritdoc />
        </member>
        <member name="M:Exiled.API.Features.Components.FakeConnection.Send(System.ArraySegment{System.Byte},System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Exiled.API.Features.Core.Attributes.ManagedObjectTypeAttribute">
            <summary>
            An attribute to mark an <see cref="T:Exiled.API.Features.Core.EObject"/> type as a managed object type.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Attributes.ManagedObjectTypeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.Attributes.ManagedObjectTypeAttribute"/> class.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Core.Attributes.StateAttribute">
            <summary>
            An attribute to easily initialize states.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Core.EActor">
            <summary>
            Actor is the base class for a <see cref="T:Exiled.API.Features.Core.EObject"/> that can be placed or spawned in-game.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Core.EActor.DefaultFixedTickRate">
            <summary>
            The default fixed tick rate.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.EActor"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.#ctor(UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.EActor"/> class.
            </summary>
            <param name="gameObject">The base <see cref="T:UnityEngine.GameObject"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Core.EActor.ComponentsInChildren">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Core.EActor.Transform">
            <summary>
            Gets the <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EActor.Position">
            <summary>
            Gets or sets the <see cref="T:UnityEngine.Vector3">position</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EActor.Rotation">
            <summary>
            Gets or sets the <see cref="T:UnityEngine.Quaternion">rotation</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EActor.Scale">
            <summary>
            Gets or sets the <see cref="T:UnityEngine.Vector3">scale</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EActor.CanEverTick">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.API.Features.Core.EActor"/> can tick.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EActor.FixedTickRate">
            <summary>
            Gets or sets the value which determines the size of every tick.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EActor.ComponentsInParent">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.EActor"/>[] containing all the components in parent.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.AttachTo(Exiled.API.Features.Core.EActor,UnityEngine.GameObject)">
            <summary>
            Attaches a <see cref="T:Exiled.API.Features.Core.EActor"/> to the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="comp"><see cref="T:Exiled.API.Features.Core.EActor"/>.</param>
            <param name="gameObject"><see cref="T:UnityEngine.GameObject"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.AttachTo(Exiled.API.Features.Core.EActor,Exiled.API.Features.Core.EActor)">
            <summary>
            Attaches a <see cref="T:Exiled.API.Features.Core.EActor"/> to the specified <see cref="T:Exiled.API.Features.Core.EActor"/>.
            </summary>
            <param name="to">The actor to be modified.</param>
            <param name="from">The source actor.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.AddComponent``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.AddComponent(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.AddComponent``1(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.GetComponent(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.GetComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.GetComponent``1(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.TryGetComponent``1(System.Type,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.TryGetComponent``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.TryGetComponent(System.Type,Exiled.API.Features.Core.EActor@)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.HasComponent``1(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.HasComponent(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.PostInitialize">
            <summary>
            Fired after the <see cref="T:Exiled.API.Features.Core.EActor"/> instance is created.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.OnBeginPlay">
            <summary>
            Fired after the first fixed tick.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.Tick">
            <summary>
            Fired every tick.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.OnEndPlay">
            <summary>
            Fired before the current <see cref="T:Exiled.API.Features.Core.EActor"/> instance is destroyed.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.SubscribeEvents">
            <summary>
            Subscribes all the events.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.UnsubscribeEvents">
            <summary>
            Unsubscribes all the events.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EActor.OnBeginDestroy">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Core.EBehaviour">
            <summary>
            <see cref="T:Exiled.API.Features.Core.EBehaviour"/> is a versatile component designed to enhance the functionality of playable characters.
            <br>It can be easily integrated with various types of playable characters, making it a valuable tool for user-defined playable character behaviours.</br>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EBehaviour.Owner">
            <summary>
            Gets or sets the owner of the <see cref="T:Exiled.API.Features.Core.EBehaviour"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EBehaviour.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EBehaviour.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EBehaviour.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EBehaviour.BehaviourUpdate">
            <summary>
            Fired every tick.
            <para>Code affecting the <see cref="T:Exiled.API.Features.Core.EBehaviour"/>'s base implementation should be placed here.</para>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EBehaviour.BehaviourUpdate_Implementation">
            <inheritdoc cref="M:Exiled.API.Features.Core.EBehaviour.BehaviourUpdate"/>
        </member>
        <member name="T:Exiled.API.Features.Core.EObject">
            <summary>
            The base class of all Exiled objects.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.#ctor(UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <param name="gameObject"><inheritdoc cref="P:Exiled.API.Features.Core.EObject.Base"/></param>
        </member>
        <member name="P:Exiled.API.Features.Core.EObject.RegisteredTypes">
            <summary>
            Gets all the registered <see cref="T:Exiled.API.Features.Core.EObject"/> types.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EObject.Base">
            <summary>
            Gets or sets the base <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EObject.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Exiled.API.Features.Core.EObject"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EObject.Tag">
            <summary>
            Gets or sets the tag of the <see cref="T:Exiled.API.Features.Core.EObject"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EObject.IsEditable">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.API.Features.Core.EObject"/> values can be edited.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.EObject.InternalObjects">
            <summary>
            Gets all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.op_Implicit(Exiled.API.Features.Core.EObject)~System.Boolean">
            <summary>
            Implicitly converts the given <see cref="T:Exiled.API.Features.Core.EObject"/> instance to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="object">Whether the <see cref="T:Exiled.API.Features.Core.EObject"/> instance exists.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.op_Implicit(Exiled.API.Features.Core.EObject)~System.String">
            <summary>
            Implicitly converts the given <see cref="T:Exiled.API.Features.Core.EObject"/> instance to a <see cref="T:System.String"/>.
            </summary>
            <param name="object">The <see cref="T:Exiled.API.Features.Core.EObject"/> instance's name.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.GetObjectTypeByName(System.String)">
            <summary>
            Gets a <see cref="T:System.Type"/> from a given type name.
            </summary>
            <param name="typeName">The type name to look for.</param>
            <returns>A <see cref="T:System.Type"/> matching the type name or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.RegisterObjectType``1(System.String)">
            <summary>
            Registers the specified <see cref="T:Exiled.API.Features.Core.EObject"/> type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="name">The name of the registered type.</param>
            <returns>The registered <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.RegisterObjectType(System.Type,System.String)">
            <summary>
            Registers the specified <see cref="T:Exiled.API.Features.Core.EObject"/> <paramref name="type"/>.
            </summary>
            <param name="type">The type to register.</param>
            <param name="name">The name of the registered type.</param>
            <returns>The registered <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.UnregisterObjectType(System.Type)">
            <summary>
            Registers the specified <see cref="T:Exiled.API.Features.Core.EObject"/> type.
            </summary>
            <param name="type">The type to register.</param>
            <returns><see langword="true"/> if the type was unregistered successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.UnregisterObjectType(System.String)">
            <summary>
            Unregisters the specified <see cref="T:Exiled.API.Features.Core.EObject"/> type.
            </summary>
            <param name="name">The name of the type to unregister.</param>
            <returns><see langword="true"/> if the type was unregistered successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindObjectDefinedTypeByName(System.String,System.Boolean)">
            <summary>
            Finds the most accurate <see cref="T:System.Type"/> matching the given <paramref name="name"/>.
            </summary>
            <param name="name">The name to look for.</param>
            <param name="ignoreAbstractTypes">A value indicating whether abstract types should be ignored.</param>
            <returns>The <see cref="T:System.Type"/> with the name that matches the given name.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.GetObjectTypeFromRegisteredTypes``1">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.EObject"/> type from all the registered types.
            </summary>
            <typeparam name="T">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</typeparam>
            <returns>The matching <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.NullReferenceException">Occurs when the requested type is not the same as the specified type.</exception>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.GetObjectTypeFromRegisteredTypes``1(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.EObject"/> type from all the registered types.
            </summary>
            <typeparam name="T">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</typeparam>
            <param name="name">The name of the type to look for.</param>
            <returns>The matching <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.NullReferenceException">Occurs when the requested type's name is not the same as the specified name.</exception>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.GetObjectTypeFromRegisteredTypes(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.EObject"/> type from all the registered types.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <returns>The matching <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.NullReferenceException">Occurs when the requested type is not the same as the specified type.</exception>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.GetObjectTypeFromRegisteredTypes(System.Type,System.String)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.EObject"/> type from all the registered types.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <param name="name">The name of the type to look for.</param>
            <returns>The matching <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.NullReferenceException">Occurs when the requested type's name is not the same as the specified name.</exception>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.GetObjectTypeFromRegisteredTypesByName(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.EObject"/> type from all the registered types.
            </summary>
            <param name="name">The name of the type to look for.</param>
            <returns>The matching <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.NullReferenceException">Occurs when the requested type's name is not the same as the specified name.</exception>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject(System.Type,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <param name="parameters">The parameters to initialize the object.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject``1(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <typeparam name="T">The cast <see cref="T:Exiled.API.Features.Core.EObject"/> type.</typeparam>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject``1">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <typeparam name="T">The cast <see cref="T:Exiled.API.Features.Core.EObject"/> type.</typeparam>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject``1(System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <typeparam name="T">The <see cref="T:Exiled.API.Features.Core.EObject"/> type to cast.</typeparam>
            <param name="parameters">The parameters to initialize the object.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject``1(UnityEngine.GameObject,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <typeparam name="T">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</typeparam>
            <param name="gameObject"><inheritdoc cref="P:Exiled.API.Features.Core.EObject.Base"/></param>
            <param name="name">The name to be given to the new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject``1(UnityEngine.GameObject,System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <typeparam name="T">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</typeparam>
            <param name="gameObject"><inheritdoc cref="P:Exiled.API.Features.Core.EObject.Base"/></param>
            <param name="name">The name to be given to the new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</param>
            <param name="parameters">The parameters to initialize the object.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject``1(System.Type,UnityEngine.GameObject,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <typeparam name="T">The cast <see cref="T:Exiled.API.Features.Core.EObject"/> type.</typeparam>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <param name="gameObject"><inheritdoc cref="P:Exiled.API.Features.Core.EObject.Base"/></param>
            <param name="name">The name to be given to the new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject``1(System.Type,UnityEngine.GameObject,System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <typeparam name="T">The cast <see cref="T:Exiled.API.Features.Core.EObject"/> type.</typeparam>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <param name="gameObject"><inheritdoc cref="P:Exiled.API.Features.Core.EObject.Base"/></param>
            <param name="name">The name to be given to the new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</param>
            <param name="parameters">The parameters to initialize the object.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject(System.Type,UnityEngine.GameObject,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <param name="gameObject"><inheritdoc cref="P:Exiled.API.Features.Core.EObject.Base"/></param>
            <param name="name">The name to be given to the new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.CreateDefaultSubobject(System.Type,UnityEngine.GameObject,System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.EObject"/> class.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <param name="gameObject"><inheritdoc cref="P:Exiled.API.Features.Core.EObject.Base"/></param>
            <param name="name">The name to be given to the new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</param>
            <param name="parameters">The parameters to initialize the object.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Core.EObject"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.DestroyAllObjects">
            <summary>
            Destroys all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.DestroyAllObjectsOfType``1">
            <summary>
            Destroys all the active <typeparamref name="T"/> <see cref="T:Exiled.API.Features.Core.EObject"/> instances.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectOfType``1(System.Func{Exiled.API.Features.Core.EObject,System.Boolean})">
            <summary>
            Finds the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/> filtered based on a predicate.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
            <param name="predicate">The condition to satify.</param>
            <returns>The corresponding active <typeparamref name="T"/> <see cref="T:Exiled.API.Features.Core.EObject"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectsOfType``1(System.Func{Exiled.API.Features.Core.EObject,System.Boolean})">
            <summary>
            Finds all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/> filtered based on a predicate.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
            <param name="predicate">The condition to satify.</param>
            <returns>A <typeparamref name="T"/>[] containing all the matching results.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectsOfType``1">
            <summary>
            Finds all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
            <returns>A <typeparamref name="T"/>[] containing all the matching results.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectsOfType``1(System.String)">
            <summary>
            Finds all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name to look for.</param>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
            <returns>A <typeparamref name="T"/>[] containing all the matching results.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectsOfType``1(System.Type)">
            <summary>
            Finds all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <returns>A <typeparamref name="T"/>[] containing all the matching results.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectsOfType``1(System.Type,System.Func{Exiled.API.Features.Core.EObject,System.Boolean})">
            <summary>
            Finds all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/> filtered based on a predicate.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EObject"/> type.</param>
            <param name="predicate">The condition to satify.</param>
            <returns>A <typeparamref name="T"/>[] containing all the matching results.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectsWithTagOfType``1(System.String)">
            <summary>
            Finds all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/> with the specified <paramref name="tag"/>.
            </summary>
            <param name="tag">The tag to look for.</param>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
            <returns>A <typeparamref name="T"/>[] containing all the matching results.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectsOfType``1(System.Func{System.Object,System.Boolean})">
            <summary>
            Finds all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <param name="predicate">The condition to satify.</param>
            <returns>A <typeparamref name="T"/>[] containing all the elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindActiveObjectsOfType``1(System.Func{``0,System.Boolean})">
            <summary>
            Finds all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <param name="predicate">The condition to satify.</param>
            <returns>A <typeparamref name="T"/>[] containing all the elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.DestroyActiveObjectsOfType``1">
            <summary>
            Destroys all the active <see cref="T:Exiled.API.Features.Core.EObject"/> instances of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.DestroyActiveObject``1(UnityEngine.GameObject)">
            <summary>
            Destroys an active <see cref="T:Exiled.API.Features.Core.EObject"/> instance of type <typeparamref name="T"/> given the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> type to look for.</typeparam>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> belonging to the <see cref="T:Exiled.API.Features.Core.EObject"/> instance to be destroyed.</param>
            <returns><see langword="true"/> if the object was destroyed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.DestroyActiveObject(System.Type,UnityEngine.GameObject)">
            <summary>
            Destroys an active <see cref="T:Exiled.API.Features.Core.EObject"/> instance given the specified <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="type">The type of the object.</param>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> belonging to the object.</param>
            <returns><see langword="true"/> if the object was destroyed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.FindMostAppropriateEntry``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds the most appropriate entry.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <param name="name">The name to pair.</param>
            <param name="source">The source on which iterate on.</param>
            <returns>The corresponding entry or <see langword="default"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.Destroy">
            <summary>
            Destroys the current <see cref="T:Exiled.API.Features.Core.EObject"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.Destroy(System.Boolean)">
            <inheritdoc cref="M:Exiled.API.Features.Core.EObject.Destroy"/>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.OnBeginDestroy">
            <summary>
            Fired before the current <see cref="T:Exiled.API.Features.Core.EObject"/> instance is destroyed.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.EObject.OnDestroyed">
            <summary>
            Fired when the current <see cref="T:Exiled.API.Features.Core.EObject"/> instance has been explicitly destroyed.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Core.Generic.EBehaviour`1">
            <summary>
            <see cref="T:Exiled.API.Features.Core.EBehaviour"/> is a versatile component designed to enhance the functionality of playable characters.
            <br>It can be easily integrated with various types of playable characters, making it a valuable tool for user-defined playable character behaviours.</br>
            </summary>
            <typeparam name="T">The type of user-defined playable character object.</typeparam>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.EBehaviour`1.Owner">
            <summary>
            Gets the owner of the <see cref="T:Exiled.API.Features.Core.EBehaviour"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EBehaviour`1.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EBehaviour`1.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EBehaviour`1.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EBehaviour`1.BehaviourUpdate">
            <summary>
            Ran every tick.
            <para>Code affecting the <see cref="T:Exiled.API.Features.Core.EBehaviour"/>'s base implementation should be placed here.</para>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EBehaviour`1.BehaviourUpdate_Implementation">
            <inheritdoc cref="M:Exiled.API.Features.Core.Generic.EBehaviour`1.BehaviourUpdate"/>
        </member>
        <member name="T:Exiled.API.Features.Core.Generic.EnumClass`2">
            <summary>
            A class which allows <see cref="T:System.Enum"/> implicit conversions.
            <para>Can be used along with <see cref="T:System.Enum"/>, means it doesn't require another <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/> instance to be comparable or usable.</para>
            </summary>
            <typeparam name="TSource">The type of the source object to handle the instance of.</typeparam>
            <typeparam name="TObject">The type of the child object to handle the instance of.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/> class.
            </summary>
            <param name="value">The value of the enum item.</param>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.EnumClass`2.Values">
            <summary>
            Gets all <typeparamref name="TObject"/> object instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.EnumClass`2.Value">
            <summary>
            Gets the value of the enum item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.EnumClass`2.Name">
            <summary>
            Gets the name determined from reflection.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.op_Implicit(Exiled.API.Features.Core.Generic.EnumClass{`0,`1})~`0">
            <summary>
            Implicitly converts the <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/> to <typeparamref name="TSource"/>.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.op_Implicit(`0)~Exiled.API.Features.Core.Generic.EnumClass{`0,`1}">
            <summary>
            Implicitly converts the <typeparamref name="TSource"/> to <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/>.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.op_Implicit(Exiled.API.Features.Core.Generic.EnumClass{`0,`1})~`1">
            <summary>
            Implicitly converts the <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/> to <typeparamref name="TObject"/>.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.Cast(`0)">
            <summary>
            Casts the specified <paramref name="value"/> to the corresponding type.
            </summary>
            <param name="value">The enum value to be cast.</param>
            <returns>The cast object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.Cast(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Casts the specified <paramref name="values"/> to the corresponding type.
            </summary>
            <param name="values">The enum values to be cast.</param>
            <returns>The cast object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/> type.</param>
            <returns>An array of the values of the constants in a specified <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.SafeCast(`0,`1@)">
            <summary>
            Safely casts the specified <paramref name="value"/> to the corresponding type.
            </summary>
            <param name="value">The enum value to be cast.</param>
            <param name="result">The cast <paramref name="value"/>.</param>
            <returns><see langword="true"/> if the <paramref name="value"/> was cast; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.SafeCast(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Safely casts the specified <paramref name="values"/> to the corresponding type.
            </summary>
            <param name="values">The enum value to be cast.</param>
            <param name="results">The cast <paramref name="values"/>.</param>
            <returns><see langword="true"/> if the <paramref name="values"/> was cast; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> object.
            </summary>
            <param name="obj">The object to be parsed.</param>
            <returns>The corresponding <typeparamref name="TObject"/> object instance, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.ToString">
            <summary>
            Converts the <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/> instance to a human-readable <see cref="T:System.String"/> representation.
            </summary>
            <returns>A human-readable <see cref="T:System.String"/> representation of the <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.Equals(`1)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.GetHashCode">
            <summary>
            Returns a the 32-bit signed hash code of the current object instance.
            </summary>
            <returns>The 32-bit signed hash code of the current object instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.CompareTo(`1)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order.
            Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.
            </returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order.
            Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.
            </returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.EnumClass`2.Compare(`1,`1)">
            <summary>
            Compares the specified object instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="x">An object to compare.</param>
            <param name="y">Another object to compare.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order.
            Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.
            </returns>
        </member>
        <member name="T:Exiled.API.Features.Core.Generic.Singleton`1">
            <summary>
            A class to handle object instances.
            </summary>
            <typeparam name="T">The type of the object to handle the instance of.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.Singleton`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.Generic.Singleton`1"/> class.
            </summary>
            <param name="value">The branch to instantiate.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.Singleton`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.API.Features.Core.Generic.Singleton`1"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.Singleton`1.Instance">
            <summary>
            Gets the relative value.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.Singleton`1.Value">
            <summary>
            Gets the singleton value.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.Singleton`1.op_Implicit(Exiled.API.Features.Core.Generic.Singleton{`0})~`0">
            <summary>
            Converts the given <see cref="T:Exiled.API.Features.Core.Generic.Singleton`1"/> instance into <typeparamref name="T"/>.
            </summary>
            <param name="instance">The <see cref="T:Exiled.API.Features.Core.Generic.Singleton`1"/> instance to convert.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.Singleton`1.TryGet``1(``0@)">
            <summary>
            Tries to get the relative value.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="instance">The object instance.</param>
            <returns><see langword="true"/> if the object instance is not null and can be casted as the specified type; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.Singleton`1.Create(`0)">
            <inheritdoc cref="T:Exiled.API.Features.Core.Generic.Singleton`1"/>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.Singleton`1.Destroy(`0)">
            <summary>
            Destroys the given <typeparamref name="T"/> instance.
            </summary>
            <param name="object">The object to destroy.</param>
            <returns><see langword="true"/> if the instance was destroyed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Core.Generic.StaticActor`1">
            <summary>
            This is a generic Singleton implementation for components.
            <br>Create a derived class where the type <typeparamref name="T"/> is the script you want to "Singletonize"</br>
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <remarks>
            Do not redefine <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.PostInitialize"/> <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.OnBeginPlay"/> or <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.OnEndPlay"/> in derived classes.
            <br>Instead, use <see langword="protected virtual"/> methods:</br>
            <br><see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.PostInitialize_Static"/></br>
            <br><see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.BeginPlay_Static"/></br>
            <br><see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.EndPlay_Static"/></br>
            <para>
            To perform the initialization and cleanup: those methods are guaranteed to only be called once in the entire lifetime of the component.
            </para>
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.StaticActor`1.IsInitialized">
            <summary>
            Gets a value indicating whether the <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.PostInitialize"/> method has already been called by Unity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.StaticActor`1.IsStarted">
            <summary>
            Gets a value indicating whether the <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.OnBeginPlay"/> method has already been called by Unity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.StaticActor`1.IsDestroyed">
            <summary>
            Gets a value indicating whether the <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.OnEndPlay"/> method has already been called by Unity.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.FindExistingInstance">
            <summary>
            Looks for an existing instance of the <see cref="T:Exiled.API.Features.Core.Generic.StaticActor`1"/>.
            </summary>
            <returns>The existing <typeparamref name="T"/> instance, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.CreateNewInstance">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.Generic.StaticActor`1"/>.
            </summary>
            <returns>The created <typeparamref name="T"/> instance, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.Get">
            <summary>
            Gets or creates a new instance of <see cref="T:Exiled.API.Features.Core.Generic.StaticActor`1"/>.
            </summary>
            <returns>The found or created <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.OnBeginPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.Flush">
            <summary>
            Flushes the current actor.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.PostInitialize_Static">
            <summary>
            Fired on <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.PostInitialize"/>.
            </summary>
            <remarks>
            This method will only be called once even if multiple instances of the <see cref="T:Exiled.API.Features.Core.Generic.StaticActor`1"/> component exist in the scene.
            <br>You can override this method in derived classes to customize the initialization of the component.</br>
            </remarks>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.BeginPlay_Static">
            <summary>
            Fired on <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.OnBeginPlay"/>.
            </summary>
            <remarks>
            This method will only be called once even if multiple instances of the <see cref="T:Exiled.API.Features.Core.Generic.StaticActor`1"/> component exist in the scene.
            <br>You can override this method in derived classes to customize the initialization of the component.</br>
            </remarks>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.EndPlay_Static">
            <summary>
            Fired on <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.OnEndPlay"/>.
            </summary>
            <remarks>
            This method will only be called once even if multiple instances of the <see cref="T:Exiled.API.Features.Core.Generic.StaticActor`1"/> component exist in the scene.
            <br>You can override this method in derived classes to customize the initialization of the component.</br>
            </remarks>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.StaticActor`1.NotifyInstanceRepeated">
            <summary>
            If a duplicated instance of a <see cref="T:Exiled.API.Features.Core.Generic.StaticActor`1"/> component is loaded into the scene this method will be called instead of <see cref="M:Exiled.API.Features.Core.Generic.StaticActor`1.PostInitialize_Static"/>.
            <br>That way you can customize what to do with repeated instances.</br>
            </summary>
            <remarks>
            The default approach is delete the duplicated component.
            </remarks>
        </member>
        <member name="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2">
            <summary>
            A class which allows <see langword="unmanaged"/> data implicit conversions.
            <para>Can be used along with <see langword="unmanaged"/>, means it doesn't require another <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/> instance to be comparable or usable.</para>
            </summary>
            <typeparam name="TSource">The type of the <see langword="unmanaged"/> source object to handle the instance of.</typeparam>
            <typeparam name="TObject">The type of the child object to handle the instance of.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/> class.
            </summary>
            <param name="value">The value of the unmanaged item.</param>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Values">
            <summary>
            Gets all <typeparamref name="TObject"/> object instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Value">
            <summary>
            Gets the value of the enum item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Name">
            <summary>
            Gets the name determined from reflection.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.op_Implicit(Exiled.API.Features.Core.Generic.UnmanagedEnumClass{`0,`1})~`0">
            <summary>
            Implicitly converts the <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/> to <typeparamref name="TSource"/>.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.op_Implicit(`0)~Exiled.API.Features.Core.Generic.UnmanagedEnumClass{`0,`1}">
            <summary>
            Implicitly converts the <typeparamref name="TSource"/> to <see cref="T:Exiled.API.Features.Core.Generic.EnumClass`2"/>.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.op_Implicit(Exiled.API.Features.Core.Generic.UnmanagedEnumClass{`0,`1})~`1">
            <summary>
            Implicitly converts the <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/> to <typeparamref name="TObject"/>.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Cast(`0)">
            <summary>
            Casts the specified <paramref name="value"/> to the corresponding type.
            </summary>
            <param name="value">The enum value to be cast.</param>
            <returns>The cast object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Cast(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Casts the specified <paramref name="values"/> to the corresponding type.
            </summary>
            <param name="values">The enum values to be cast.</param>
            <returns>The cast object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Cast``1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Casts the specified <paramref name="values"/> to the corresponding type.
            </summary>
            <typeparam name="T">The type to cast the enum to.</typeparam>
            <param name="values">The enum values to be cast.</param>
            <returns>The cast <typeparamref name="T"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Cast``1(`0)">
            <summary>
            Casts the specified <paramref name="value"/> to the corresponding type.
            </summary>
            <typeparam name="T">The type to cast the enum to.</typeparam>
            <param name="value">The enum value to be cast.</param>
            <returns>The cast <typeparamref name="T"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.SafeCast(`0,`1@)">
            <summary>
            Safely casts the specified <paramref name="value"/> to the corresponding type.
            </summary>
            <param name="value">The enum value to be cast.</param>
            <param name="result">The cast <paramref name="value"/>.</param>
            <returns><see langword="true"/> if the <paramref name="value"/> was cast; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.SafeCast(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Safely casts the specified <paramref name="values"/> to the corresponding type.
            </summary>
            <param name="values">The enum value to be cast.</param>
            <param name="results">The cast <paramref name="values"/>.</param>
            <returns><see langword="true"/> if the <paramref name="values"/> was cast; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/> type.</param>
            <returns>An array of the values of the constants in a specified <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> object.
            </summary>
            <param name="obj">The object to be parsed.</param>
            <returns>The corresponding <typeparamref name="TObject"/> object instance, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.ToString">
            <summary>
            Converts the <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/> instance to a human-readable <see cref="T:System.String"/> representation.
            </summary>
            <returns>A human-readable <see cref="T:System.String"/> representation of the <see cref="T:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Equals(`1)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns><see langword="true"/> if the object was equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.GetHashCode">
            <summary>
            Returns a the 32-bit signed hash code of the current object instance.
            </summary>
            <returns>The 32-bit signed hash code of the current object instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.CompareTo(`1)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order.
            Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.
            </returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order.
            Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.
            </returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Generic.UnmanagedEnumClass`2.Compare(`1,`1)">
            <summary>
            Compares the specified object instance with another object of the same type and returns
            an integer that indicates whether the current instance precedes, follows, or
            occurs in the same position in the sort order as the other object.
            </summary>
            <param name="x">An object to compare.</param>
            <param name="y">Another object to compare.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order.
            Zero This instance occurs in the same position in the sort order as other.
            Greater than zero This instance follows other in the sort order.
            </returns>
        </member>
        <member name="T:Exiled.API.Features.Core.Interfaces.IEntity">
            <summary>
            Defines the contract for basic ECS implementation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.Interfaces.IEntity.ComponentsInChildren">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:Exiled.API.Features.Core.EActor"/> containing all the components in children.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.AddComponent``1(System.String)">
            <summary>
            Adds a component to the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> <see cref="T:Exiled.API.Features.Core.EActor"/> to be added.</typeparam>
            <param name="name">The name of the component.</param>
            <returns>The added <see cref="T:Exiled.API.Features.Core.EActor"/> component.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.AddComponent(System.Type,System.String)">
            <summary>
            Adds a component to the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the <see cref="T:Exiled.API.Features.Core.EActor"/> to be added.</param>
            <param name="name">The name of the component.</param>
            <returns>The added <see cref="T:Exiled.API.Features.Core.EActor"/> component.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.AddComponent``1(System.Type,System.String)">
            <summary>
            Adds a component from the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> cast <see cref="T:Exiled.API.Features.Core.EActor"/> type.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> of the <see cref="T:Exiled.API.Features.Core.EActor"/> to be added.</param>
            <param name="name">The name of the component.</param>
            <returns>The added <see cref="T:Exiled.API.Features.Core.EActor"/> component.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.GetComponent``1">
            <summary>
            Gets a component from the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> <see cref="T:Exiled.API.Features.Core.EActor"/> to look for.</typeparam>
            <returns>The <see cref="T:Exiled.API.Features.Core.EActor"/> component.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.GetComponent``1(System.Type)">
            <summary>
            Gets a component from the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <typeparam name="T">The cast <typeparamref name="T"/> <see cref="T:Exiled.API.Features.Core.EActor"/>.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> of the <see cref="T:Exiled.API.Features.Core.EActor"/> to look for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Core.EActor"/> component.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.GetComponent(System.Type)">
            <summary>
            Gets a component from the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the <see cref="T:Exiled.API.Features.Core.EActor"/> to look for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Core.EActor"/> component.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.TryGetComponent``1(``0@)">
            <summary>
            Tries to get a component from the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> <see cref="T:Exiled.API.Features.Core.EActor"/> to look for.</typeparam>
            <param name="component">The <typeparamref name="T"/> <see cref="T:Exiled.API.Features.Core.EActor"/>.</param>
            <returns><see langword="true"/> if the component was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.TryGetComponent(System.Type,Exiled.API.Features.Core.EActor@)">
            <summary>
            Tries to get a component from the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the <see cref="T:Exiled.API.Features.Core.EActor"/> to get.</param>
            <param name="component">The found component.</param>
            <returns><see langword="true"/> if the component was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.TryGetComponent``1(System.Type,``0@)">
            <summary>
            Tries to get a component from the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/>.
            </summary>
            <typeparam name="T">The cast <typeparamref name="T"/> <see cref="T:Exiled.API.Features.Core.EActor"/>.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> of the <see cref="T:Exiled.API.Features.Core.EActor"/> to get.</param>
            <param name="component">The found component.</param>
            <returns><see langword="true"/> if the component was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.HasComponent``1(System.Boolean)">
            <summary>
            Checks if the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/> has an active component.
            </summary>
            <typeparam name="T">The <see cref="T:Exiled.API.Features.Core.EActor"/> to look for.</typeparam>
            <param name="depthInheritance">A value indicating whether or not subclasses should be considered.</param>
            <returns><see langword="true"/> if the component was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.Interfaces.IEntity.HasComponent(System.Type,System.Boolean)">
            <summary>
            Checks if the <see cref="T:Exiled.API.Features.Core.Interfaces.IEntity"/> has an active component.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Features.Core.EActor"/> to look for.</param>
            <param name="depthInheritance">A value indicating whether or not subclasses should be considered.</param>
            <returns><see langword="true"/> if the component was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Core.StateMachine.IState">
            <summary>
            Defines the contract for basic state features.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.IState.Id">
            <summary>
            Gets the state's id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.IState.Name">
            <summary>
            Gets the state's name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.IState.Description">
            <summary>
            Gets the state's description.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.IState.OnEnter(Exiled.API.Features.Core.StateMachine.StateController)">
            <summary>
            Fired when entering the state.
            </summary>
            <param name="stateController">The state controller.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.IState.OnExit(Exiled.API.Features.Core.StateMachine.StateController)">
            <summary>
            Fired when exiting the state.
            </summary>
            <param name="stateController">The state controller.</param>
        </member>
        <member name="T:Exiled.API.Features.Core.StateMachine.State">
            <summary>
            The base class which handles in-context states.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.State.List">
            <summary>
            Gets all registered states.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.State.Id">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.State.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.State.Description">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.State.Controllers">
            <summary>
            Gets all the <see cref="T:Exiled.API.Features.Core.StateMachine.StateController"/>s listening to this <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.State.ActiveControllers">
            <summary>
            Gets all the <see cref="T:Exiled.API.Features.Core.StateMachine.StateController"/>s running on this <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.State.InactiveControllers">
            <summary>
            Gets all the <see cref="T:Exiled.API.Features.Core.StateMachine.StateController"/>s running on a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> other than this.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.InitializeStates(System.Boolean)">
            <summary>
            Initializes all states defined in the executing <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="useAttribute">A value indicating whether attribute should be used.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Get(System.Byte)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> belonging to the specified id.
            </summary>
            <param name="id">The state's id.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Get(System.String)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> belonging to the specified name.
            </summary>
            <param name="name">The state's name.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Get(System.Type)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> belonging to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The state's <see cref="T:System.Type"/>.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Get(System.Byte,System.Byte)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>s belonging to the specified id between the defined range.
            </summary>
            <param name="minRange">The minimum inclusive range.</param>
            <param name="maxRange">The maximum exclusive range.</param>
            <returns>All <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>s belonging to the specified id between the specified range.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Get(System.Byte[])">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>s belonging to the specified id between the defined ids.
            </summary>
            <param name="ids">The ids to look for.</param>
            <returns>All <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>s belonging to the specified id between the defined ids.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Get(System.String[])">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>s belonging to the specified id between the defined names.
            </summary>
            <param name="names">The names to look for.</param>
            <returns>All <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>s belonging to the specified id between the defined names.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Get(System.Type[])">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>s belonging to the specified id between the defined types.
            </summary>
            <param name="types">The types to look for.</param>
            <returns>All <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>s belonging to the specified id between the defined types.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Get``1">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> belonging to the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.TryGet(System.Byte,Exiled.API.Features.Core.StateMachine.State@)">
            <summary>
            Tries to get a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> given the specified id.
            </summary>
            <param name="id">The state's id.</param>
            <param name="state">The corresponding <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>, or <see langword="null"/> if not found.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.TryGet(System.String,Exiled.API.Features.Core.StateMachine.State@)">
            <summary>
            Tries to get a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> given the specified name.
            </summary>
            <param name="name">The state's name.</param>
            <param name="state">The corresponding <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>, or <see langword="null"/> if not found.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.TryGet(System.Type,Exiled.API.Features.Core.StateMachine.State@)">
            <summary>
            Tries to get a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The state's <see cref="T:System.Type"/>.</param>
            <param name="state">The corresponding <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>, or <see langword="null"/> if not found.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.TryGet``1(``0@)">
            <summary>
            Tries to get a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> given the specified <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <param name="state">The corresponding <see cref="T:Exiled.API.Features.Core.StateMachine.State"/>, or <see langword="null"/> if not found.</param>
            <returns><see langword="true"/> if a <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> was found; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.ToString">
            <summary>
            Converts the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> to a human readable <see cref="T:System.String"/> representation.
            </summary>
            <returns>A human readable <see cref="T:System.String"/> representation of the <see cref="T:Exiled.API.Features.Core.StateMachine.State"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.OnEnter(Exiled.API.Features.Core.StateMachine.StateController)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.OnExit(Exiled.API.Features.Core.StateMachine.StateController)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.State.Tick">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Core.StateMachine.StateController">
            <summary>
            The base controller which handles actors using in-context states.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.StateController.States">
            <summary>
            Gets all handled states.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.StateController.CurrentState">
            <summary>
            Gets or sets the current state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.StateController.PreviousState">
            <summary>
            Gets or sets the previous state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.StateController.BeginStateMulticastDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when entering a new state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StateMachine.StateController.EndStateMulticastDispatcher">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> which handles all the delegates fired when exiting the current state.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.StateController.StateUpdate(Exiled.API.Features.Core.StateMachine.State)">
            <summary>
            Fired every tick from the current state.
            </summary>
            <param name="state">The state firing the update.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.StateMachine.StateController.OnStateChanged">
            <summary>
            Fired when the state is changed.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Core.StaticActor">
            <summary>
            This is a generic Singleton implementation for components.
            <br>Create a derived class of the script you want to "Singletonize"</br>
            </summary>
            <remarks>
            Do not redefine <see cref="M:Exiled.API.Features.Core.StaticActor.PostInitialize"/> <see cref="M:Exiled.API.Features.Core.StaticActor.OnBeginPlay"/> or <see cref="M:Exiled.API.Features.Core.StaticActor.OnEndPlay"/> in derived classes.
            <br>Instead, use <see langword="protected virtual"/> methods:</br>
            <br><see cref="M:Exiled.API.Features.Core.StaticActor.PostInitialize_Static"/></br>
            <br><see cref="M:Exiled.API.Features.Core.StaticActor.BeginPlay_Static"/></br>
            <br><see cref="M:Exiled.API.Features.Core.StaticActor.EndPlay_Static"/></br>
            <para>
            To perform the initialization and cleanup: those methods are guaranteed to only be called once in the entire lifetime of the component.
            </para>
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Core.StaticActor.IsInitialized">
            <summary>
            Gets a value indicating whether the <see cref="M:Exiled.API.Features.Core.StaticActor.PostInitialize"/> method has already been called by Unity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StaticActor.IsStarted">
            <summary>
            Gets a value indicating whether the <see cref="M:Exiled.API.Features.Core.StaticActor.OnBeginPlay"/> method has already been called by Unity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.StaticActor.IsDestroyed">
            <summary>
            Gets a value indicating whether the <see cref="M:Exiled.API.Features.Core.StaticActor.OnEndPlay"/> method has already been called by Unity.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.CreateNewInstance(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Exiled.API.Features.Core.StaticActor"/>.
            </summary>
            <param name="type">The type of the <see cref="T:Exiled.API.Features.Core.StaticActor"/>.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Core.StaticActor"/> instance, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.Get``1">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.StaticActor"/> given the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Exiled.API.Features.Core.StaticActor"/> to look for.</typeparam>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Core.StaticActor"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.Get``1(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.StaticActor"/> given the specified type.
            </summary>
            <param name="type">The the type of the <see cref="T:Exiled.API.Features.Core.StaticActor"/> to look for.</param>
            <typeparam name="T">The type to cast the <see cref="T:Exiled.API.Features.Core.StaticActor"/> to.</typeparam>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Core.StaticActor"/> of type <typeparamref name="T"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.Get(System.Type)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Core.StaticActor"/> given the specified type.
            </summary>
            <param name="type">The the type of the <see cref="T:Exiled.API.Features.Core.StaticActor"/> to look for.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Core.StaticActor"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.PostInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.OnBeginPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.OnEndPlay">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.Flush">
            <summary>
            Flushes the current actor.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.PostInitialize_Static">
            <summary>
            Fired on <see cref="M:Exiled.API.Features.Core.StaticActor.PostInitialize"/>.
            </summary>
            <remarks>
            This method will only be called once even if multiple instances of the <see cref="T:Exiled.API.Features.Core.StaticActor"/> component exist in the scene.
            <br>You can override this method in derived classes to customize the initialization of the component.</br>
            </remarks>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.BeginPlay_Static">
            <summary>
            Fired on <see cref="M:Exiled.API.Features.Core.StaticActor.OnBeginPlay"/>.
            </summary>
            <remarks>
            This method will only be called once even if multiple instances of the <see cref="T:Exiled.API.Features.Core.StaticActor"/> component exist in the scene.
            <br>You can override this method in derived classes to customize the initialization of the component.</br>
            </remarks>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.EndPlay_Static">
            <summary>
            Fired on <see cref="M:Exiled.API.Features.Core.StaticActor.OnEndPlay"/>.
            </summary>
            <remarks>
            This method will only be called once even if multiple instances of the <see cref="T:Exiled.API.Features.Core.StaticActor"/> component exist in the scene.
            <br>You can override this method in derived classes to customize the initialization of the component.</br>
            </remarks>
        </member>
        <member name="M:Exiled.API.Features.Core.StaticActor.NotifyInstanceRepeated">
            <summary>
            If a duplicated instance of a <see cref="T:Exiled.API.Features.Core.StaticActor"/> component is loaded into the scene this method will be called instead of <see cref="M:Exiled.API.Features.Core.StaticActor.PostInitialize_Static"/>.
            <br>That way you can customize what to do with repeated instances.</br>
            </summary>
            <remarks>
            The default approach is delete the duplicated component.
            </remarks>
        </member>
        <member name="T:Exiled.API.Features.Core.TickComponent">
            <summary>
            The component which handles tick related features.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Core.TickComponent.DefaultFixedTickRate">
            <summary>
            The default fixed tick rate.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.TickComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.TickComponent"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.TickComponent.TickRate">
            <summary>
            Gets or sets the current tick rate.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.TickComponent.CanEverTick">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.API.Features.Core.EActor"/> can tick.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.TickComponent.Instructions">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Action"/> containing all the delegates to be invoked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Core.TickComponent.BoundHandles">
            <summary>
            Gets all the currently bound handles.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.TickComponent.BindHandle(MEC.CoroutineHandle)">
            <summary>
            Binds a <see cref="T:MEC.CoroutineHandle"/>.
            </summary>
            <param name="handle">The <see cref="T:MEC.CoroutineHandle"/> to bind.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.TickComponent.BindHandle(MEC.CoroutineHandle@,System.Collections.Generic.IEnumerator{System.Single})">
            <summary>
            Binds a <see cref="T:MEC.CoroutineHandle"/>.
            </summary>
            <param name="handle">The <see cref="T:MEC.CoroutineHandle"/> to bind.</param>
            <param name="coroutine">The coroutine to handle.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.TickComponent.UnbindHandle(MEC.CoroutineHandle)">
            <summary>
            Unbinds a <see cref="T:MEC.CoroutineHandle"/>.
            </summary>
            <param name="handle">The <see cref="T:MEC.CoroutineHandle"/> to unbind.</param>
        </member>
        <member name="M:Exiled.API.Features.Core.TickComponent.UnbindAllHandles">
            <summary>
            Unbinds all the currently bound handles.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.TickComponent.OnBeginDestroy">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Core.TypeCastObject`1">
            <summary>
            The interface which allows defined objects to be cast to each other.
            </summary>
            <typeparam name="T">The type of the object to cast.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Core.TypeCastObject`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Core.TypeCastObject`1"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Core.TypeCastObject`1.Cast``1">
            <summary>
            Unsafely casts the current <typeparamref name="T"/> instance to the specified <typeparamref name="TObject"/> type.
            </summary>
            <typeparam name="TObject">The type to which to cast the <typeparamref name="T"/> instance.</typeparam>
            <returns>The cast <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.TypeCastObject`1.Cast``1(``0@)">
            <summary>
            Safely casts the current <typeparamref name="TObject"/> instance to the specified <typeparamref name="TObject"/> type.
            </summary>
            <typeparam name="TObject">The type to which to cast the <typeparamref name="TObject"/> instance.</typeparam>
            <param name="param">The cast object.</param>
            <returns><see langword="true"/> if the <typeparamref name="TObject"/> instance was successfully cast; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Core.TypeCastObject`1.As``1">
            <inheritdoc cref="M:Exiled.API.Features.Core.TypeCastObject`1.Cast``1"/>
        </member>
        <member name="M:Exiled.API.Features.Core.TypeCastObject`1.Is``1(``0@)">
            <inheritdoc cref="M:Exiled.API.Features.Core.TypeCastObject`1.Cast``1(``0@)"/>
        </member>
        <member name="T:Exiled.API.Features.CustomHealthStat">
            <summary>
            A custom version of <see cref="T:PlayerStatsSystem.HealthStat"/> which allows the player's max amount of health to be changed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.CustomHealthStat.MaxValue">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.CustomHealthStat.CustomMaxValue">
            <summary>
            Gets or sets the maximum amount of health the player will have.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.AttackerDamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.AttackerDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.AttackerDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="baseHandler"><inheritdoc cref="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base"/></param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.ForceFullFriendlyFire">
            <summary>
            Gets or sets a value indicating whether the friendly fire should be forced.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.IsSuicide">
            <summary>
            Gets or sets a value indicating whether the action is due to suicide.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.AllowSelfDamage">
            <summary>
            Gets a value indicating whether the self damage is allowed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.IsFriendlyFire">
            <summary>
            Gets or sets a value indicating whether the damage is friendly fire.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.AttackerDamageHandler.ProcessDamage(Exiled.API.Features.Player)">
            <summary>
            Computes and processes the damage.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to damage.</param>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="baseHandler">The base <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
            <param name="damage">The amount of damage to be set.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
            <param name="damage">The amount of damage to be set.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> to be set.</param>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
            <param name="damage">The amount of damage to be set.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> to be set.</param>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> to be set.</param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.CustomDamageHandler.CustomBase">
            <summary>
            Gets the base <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.CustomDamageHandler.ApplyDamage(Exiled.API.Features.Player)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.DamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of the <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="attacker">The attacker to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="baseHandler"><inheritdoc cref="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base"/></param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.Target">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Player"/> target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.Attacker">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Player"/> attacker. CAN BE NULL!.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.TargetFootprint">
            <summary>
            Gets or sets the target's <see cref="T:Footprinting.Footprint"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.AttackerFootprint">
            <summary>
            Gets or sets the attacker's <see cref="T:Footprinting.Footprint"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.Damage">
            <summary>
            Gets or sets the amount of damage to be dealt.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.StartVelocity">
            <summary>
            Gets or sets the start velocity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.DealtHealthDamage">
            <summary>
            Gets or sets the direct damage.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandler.AbsorbedAhpDamage">
            <summary>
            Gets or sets the damage absorbed by AHP processes.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.ApplyDamage(Exiled.API.Features.Player)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandler.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.#ctor(PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> class.
            </summary>
            <param name="baseHandler">The base <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action">
            <summary>
            All available <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> actions.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action.Damage">
            <summary>
            The result is determined by a damage action.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action.Death">
            <summary>
            The result is determined by a death action.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base">
            <summary>
            Gets or sets the base <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieDeathAnnouncement">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> belonging to this <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.ServerLogsText">
            <summary>
            Gets the text to show in the server logs.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Type">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Enums.DamageType"/> for the damage handler.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.DeathTranslation">
            <summary>
            Gets the <see cref="T:PlayerStatsSystem.DeathTranslation"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.op_Implicit(Exiled.API.Features.DamageHandlers.DamageHandlerBase)~PlayerStatsSystem.DamageHandlerBase">
            <summary>
            Implicitly converts the given <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> instance to a <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> object.
            </summary>
            <param name="damageHandlerBase">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.ApplyDamage(Exiled.API.Features.Player)">
            <summary>
            Applies the damage to the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to damage.</param>
            <returns>The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Action"/> of the call to this method.</returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.ProcessDamage(Exiled.API.Features.Player)">
            <summary>
            Computes and processes the damage.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to damage.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.As``1">
            <summary>
            Unsafely casts the damage handler to the specified <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> type.
            </summary>
            <typeparam name="T">The specified <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> type.</typeparam>
            <returns>A <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.BaseAs``1">
            <summary>
            Unsafely casts the damage handler to the specified <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> type.
            </summary>
            <typeparam name="T">The specified <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> type.</typeparam>
            <returns>A <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Is``1(``0@)">
            <summary>
            Safely casts the damage handler to the specified <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> type.
            </summary>
            <typeparam name="T">The specified <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> type.</typeparam>
            <param name="param">The casted <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
            <returns>A <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.BaseIs``1(``0@)">
            <summary>
            Safely casts the damage handler to the specified <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> type.
            </summary>
            <typeparam name="T">The specified <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> type.</typeparam>
            <param name="param">The casted <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase"/> object.</returns>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> class.
            </summary>
            <param name="announcement">The announcement to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.#ctor(System.String,System.Collections.Generic.IEnumerable{Subtitles.SubtitlePart})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> class.
            </summary>
            <param name="announcement">The announcement to be set.</param>
            <param name="subtitleParts">The subtitles to be set.</param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.Default">
            <summary>
            Gets the default announcement.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.Announcement">
            <summary>
            Gets or sets the announcement.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.SubtitleParts">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Subtitles.SubtitlePart"/> which determines the result of the subtitle belonging to this <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.op_Implicit(Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement)~PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement">
            <summary>
            Implicitly converts the given <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> instance to a <see cref="T:PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement"/> object.
            </summary>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement.op_Implicit(PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement)~Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement">
            <summary>
            Implicitly converts the given <see cref="T:PlayerStatsSystem.DamageHandlerBase.CassieAnnouncement"/> instance to a <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> object.
            </summary>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> instance.</param>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.FirearmDamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.#ctor(Exiled.API.Features.Items.Item,Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.FirearmDamageHandler"/> class.
            </summary>
            <param name="baseHandler"><inheritdoc cref="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base"/></param>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to be set.</param>
            <param name="target">The target to be set.</param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.Item">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Items.Item"/> used by the damage handler.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.Hitbox">
            <summary>
            Gets or sets the <see cref="T:HitboxType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.Penetration">
            <summary>
            Gets the penetration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.UseHumanHitboxes">
            <summary>
            Gets a value indicating whether the human hitboxes should be used.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.ProcessDamage(Exiled.API.Features.Player)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.FirearmDamageHandler.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.GenericDamageHandler">
            <summary>
            Allows generic damage to a player.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.GenericDamageHandler.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.GenericDamageHandler"/> class.
            Transform input data to custom generic handler.
            </summary>
            <param name="player"> Current player (Target). </param>
            <param name="attacker"> Attacker. </param>
            <param name="damage"> Damage quantity. </param>
            <param name="damageType"> Damage type. </param>
            <param name="cassieAnnouncement"> Custom cassie announcment. </param>
            <param name="damageText"> Text to provide to player death screen. </param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.GenericDamageHandler.Base">
            <summary>
            Gets or sets a custom base.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.GenericDamageHandler.Attacker">
            <summary>
            Gets or sets the current attacker.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.GenericDamageHandler.AllowSelfDamage">
            <summary>
            Gets a value indicating whether allow self damage.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.GenericDamageHandler.Damage">
            <inheritdoc />
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.GenericDamageHandler.ServerLogsText">
            <inheritdoc />
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.GenericDamageHandler.ApplyDamage(ReferenceHub)">
            <summary>
            Custom Exiled process damage.
            </summary>
            <param name="ply"> Current player hub. </param>
            <returns> Handles processing damage outcome. </returns>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.GenericDamageHandler.GenericFirearm(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,ItemType)">
            <summary>
            Generic firearm path for handle type.
            </summary>
            <param name="player"> Current player. </param>
            <param name="attacker"> Current attacker. </param>
            <param name="amount"> Damage amount. </param>
            <param name="damageType"> Damage type. </param>
            <param name="itemType"> ItemType. </param>
        </member>
        <member name="T:Exiled.API.Features.DamageHandlers.ScpDamageHandler">
            <summary>
            A wrapper to easily manipulate the behavior of <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DamageHandlers.ScpDamageHandler.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DamageHandlers.ScpDamageHandler"/> class.
            </summary>
            <param name="target">The target to be set.</param>
            <param name="baseHandler"><inheritdoc cref="P:Exiled.API.Features.DamageHandlers.DamageHandlerBase.Base"/></param>
        </member>
        <member name="P:Exiled.API.Features.DamageHandlers.ScpDamageHandler.Type">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Doors.AirlockController">
            <summary>
            Represents airlock.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Doors.AirlockController.BaseToExiledControllers">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:Interactables.Interobjects.AirlockController"/>'s and their corresponding <see cref="T:Exiled.API.Features.Doors.AirlockController"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.AirlockController.#ctor(Interactables.Interobjects.AirlockController)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Doors.AirlockController"/> class.
            </summary>
            <param name="controller">Base-game controller.</param>
        </member>
        <member name="P:Exiled.API.Features.Doors.AirlockController.List">
            <summary>
            Gets the list with all airlocks.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.AirlockController.Base">
            <summary>
            Gets the basegame controller.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.AirlockController.DoorA">
            <summary>
            Gets the first subdoor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.AirlockController.DoorB">
            <summary>
            Gets the second subdoor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.AirlockController.DoorsLocked">
            <summary>
            Gets or sets a value indicating whether or not both subdoors are locked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.AirlockController.AirlockDisabled">
            <summary>
            Gets or sets a value indicating whether or airlock is disabled.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.AirlockController.Get(Interactables.Interobjects.AirlockController)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Doors.AirlockController"/> by its base-game controller.
            </summary>
            <param name="controller">Base-game controller.</param>
            <returns>Instance of <see cref="T:Exiled.API.Features.Doors.AirlockController"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.AirlockController.Get(Exiled.API.Features.Doors.Door)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Doors.AirlockController"/> by one of it's subdoors.
            </summary>
            <param name="door">Subdoor.</param>
            <returns>Instance of <see cref="T:Exiled.API.Features.Doors.AirlockController"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.AirlockController.Toggle">
            <summary>
            Toggles airlock.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.AirlockController.ToString">
            <summary>
            Returns the Door in a human-readable format.
            </summary>
            <returns>A string containing Door-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Doors.BasicDoor">
            <summary>
            Represents a basic interactable door.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.BasicDoor.#ctor(Interactables.Interobjects.BasicDoor,System.Collections.Generic.List{Exiled.API.Features.Room})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Doors.BasicDoor"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.BasicDoor"/> for this door.</param>
            <param name="room">The <see cref="T:Exiled.API.Features.Room"/>'s for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Doors.BasicDoor.Base">
            <summary>
            Gets the base <see cref="T:Interactables.Interobjects.BasicDoor"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BasicDoor.Scp106Colliders">
            <summary>
            Gets the list with all SCP-106's colliders.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BasicDoor.Cooldown">
            <summary>
            Gets or sets the total cooldown before door can be triggered again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BasicDoor.RemainingCooldown">
            <summary>
            Gets or sets the remaining cooldown before door can be triggered again.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Doors.BasicNonInteractableDoor">
            <summary>
            Represents a basic non-interactable door.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.BasicNonInteractableDoor.#ctor(Interactables.Interobjects.BasicNonInteractableDoor,System.Collections.Generic.List{Exiled.API.Features.Room})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Doors.BasicNonInteractableDoor"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.BasicNonInteractableDoor"/> for this door.</param>
            <param name="room">The <see cref="T:Exiled.API.Features.Room"/>'s for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Doors.BasicNonInteractableDoor.Base">
            <summary>
            Gets the base <see cref="T:Interactables.Interobjects.BasicNonInteractableDoor"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BasicNonInteractableDoor.IgnoreLockdowns">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Doors.BasicNonInteractableDoor.IgnoreRemoteAdmin">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Doors.BreakableDoor">
            <summary>
            Represents <see cref="T:Interactables.Interobjects.BreakableDoor"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.BreakableDoor.#ctor(Interactables.Interobjects.BreakableDoor,System.Collections.Generic.List{Exiled.API.Features.Room})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Doors.BreakableDoor"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.BreakableDoor"/> for this door.</param>
            <param name="room">The <see cref="T:Exiled.API.Features.Room"/>'s for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.Base">
            <summary>
            Gets the base <see cref="T:Interactables.Interobjects.BreakableDoor"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.BrokenDoorPrefab">
            <summary>
            Gets the prefab of broken door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.MaxHealth">
            <summary>
            Gets or sets max health of the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.IsDestroyed">
            <summary>
            Gets or sets a value indicating whether or not door is destroyed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.IsBreakable">
            <summary>
            Gets a value indicating whether or not this door is breakable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.Health">
            <summary>
            Gets or sets remaining health of the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.IgnoredDamage">
            <summary>
            Gets or sets damage types which will be ignored.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.IgnoreLockdowns">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Doors.BreakableDoor.IgnoreRemoteAdmin">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Doors.BreakableDoor.Damage(System.Single,Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Damages the door.
            </summary>
            <param name="amount">Amount to be dealt.</param>
            <param name="damageType">Damage type. Some types can be ignored according to <see cref="P:Exiled.API.Features.Doors.BreakableDoor.IgnoredDamage"/>.</param>
            <returns><see langword="true"/> if door was damaged. Otherwise, false.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.BreakableDoor.Break(Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Breaks the specified door. No effect if the door cannot be broken, or if it is already broken.
            </summary>
            <param name="type">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType"/> to apply to the door.</param>
            <returns><see langword="true"/> if the door was broken, <see langword="false"/> if it was unable to be broken, or was already broken before.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.BreakableDoor.ToString">
            <summary>
            Returns the Door in a human-readable format.
            </summary>
            <returns>A string containing Door-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Doors.CheckpointDoor">
            <summary>
            Represents a checkpoint door.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.CheckpointDoor.#ctor(Interactables.Interobjects.CheckpointDoor,System.Collections.Generic.List{Exiled.API.Features.Room})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Doors.CheckpointDoor"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.CheckpointDoor"/> for this door.</param>
            <param name="room">The <see cref="T:Exiled.API.Features.Room"/> for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.Base">
            <summary>
            Gets the base <see cref="T:Interactables.Interobjects.CheckpointDoor"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.Subdoors">
            <summary>
            Gets the list of all sub doors belonging to this <see cref="T:Exiled.API.Features.Doors.CheckpointDoor"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.CurrentStage">
            <summary>
            Gets or sets the current checkpoint stage.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.MainTimer">
            <summary>
            Gets or sets a time in seconds for main timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.WaitTime">
            <summary>
            Gets or sets time before doors close.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.WarningTime">
            <summary>
            Gets or sets time in seconds when warning will be shown.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.IsDestroyed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.IsBreakable">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.Health">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.MaxHealth">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.IgnoredDamage">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Doors.CheckpointDoor.SubDoorsValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing all known subdoors <see cref="T:Exiled.API.Features.Doors.Door"/>s.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.CheckpointDoor.ToggleAllDoors(System.Boolean)">
            <summary>
            Toggles the state of the doors from <see cref="P:Exiled.API.Features.Doors.CheckpointDoor.Subdoors"/>.
            </summary>
            <param name="newState">New state for the subdoors.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.CheckpointDoor.Damage(System.Single,Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Doors.CheckpointDoor.Break(Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Doors.CheckpointDoor.ToString">
            <summary>
            Returns the Door in a human-readable format.
            </summary>
            <returns>A string containing Door-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Doors.Door">
            <summary>
            A wrapper class for <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Doors.Door.DoorVariantToDoor">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>'s and their corresponding <see cref="T:Exiled.API.Features.Doors.Door"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.#ctor(Interactables.Interobjects.DoorUtils.DoorVariant,System.Collections.Generic.List{Exiled.API.Features.Room})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Doors.Door"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> for this door.</param>
            <param name="rooms">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Room"/>'s for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Doors.Door"/> which contains all the <see cref="T:Exiled.API.Features.Doors.Door"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Base">
            <summary>
            Gets the base-game <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/> corresponding with this door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.GameObject">
            <summary>
            Gets the door's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Transform">
            <summary>
            Gets the door's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Type">
            <summary>
            Gets the door's <see cref="T:Exiled.API.Enums.DoorType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Room">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> that the door is located in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Rooms">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/>'s that the door is located in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsFullyClosed">
            <summary>
            Gets a value indicating whether or not the door is fully closed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsFullyOpen">
            <summary>
            Gets a value indicating whether the door is fully open.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsMoving">
            <summary>
            Gets a value indicating whether or not the door is currently moving.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.ExactState">
            <summary>
            Gets a value indicating the precise state of the door, from <c>0-1</c>. A value of <c>0</c> indicates the door is fully closed, while a value of <c>1</c> indicates the door is fully open. Values in-between represent the door's animation progress.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsConsideredOpen">
            <summary>
            Gets a value indicating whether the door is considered open by the game.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsOpen">
            <summary>
            Gets or sets a value indicating whether the door is open.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsGate">
            <summary>
            Gets a value indicating whether or not this door is a gate.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsCheckpoint">
            <summary>
            Gets a value indicating whether or not this door is a checkpoint door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsElevator">
            <summary>
            Gets a value indicating whether or not this door is an elevator door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsDamageable">
            <summary>
            Gets a value indicating whether or not this door can be damaged.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsNonInteractable">
            <summary>
            Gets a value indicating whether or not this door is non-interactable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsPartOfCheckpoint">
            <summary>
            Gets a value indicating whether or not this door is subdoor belonging to a checkpoint.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsKeycardDoor">
            <summary>
            Gets a value indicating whether or not this door requires a keycard to open.
            </summary>
            <remarks>
            This value is <see langword="false"/> if <see cref="P:Exiled.API.Features.Doors.Door.KeycardPermissions"/> is equal to <see cref="F:Exiled.API.Enums.KeycardPermissions.None"/>.
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.KeycardPermissions">
            <summary>
            Gets or sets the keycard permissions required to open the door.
            </summary>
            <remarks>
            Setting this value to <see cref="F:Exiled.API.Enums.KeycardPermissions.None"/> will allow this door to be opened without a keycard.
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Position">
            <summary>
            Gets or sets the door's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.AllowsScp106">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 can walk through the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.IsLocked">
            <summary>
            Gets a value indicating whether or not the door is locked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.DoorLockType">
            <summary>
            Gets or sets the door lock type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.InstanceId">
            <summary>
            Gets the door's Instance ID.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Nametag">
            <summary>
            Gets a nametag of a door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Name">
            <summary>
            Gets the name of this door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.RequiredPermissions">
            <summary>
            Gets or sets the required permissions to open the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Rotation">
            <summary>
            Gets or sets the door's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Scale">
            <summary>
            Gets or sets the size scale of the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.Zone">
            <summary>
            Gets the door's <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Door.RoomsValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing all <see cref="T:Exiled.API.Features.Room"/>'s that are connected with <see cref="T:Exiled.API.Features.Doors.Door"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Get(Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Gets the door object associated with a specific <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>, or creates a new one if there isn't one.
            </summary>
            <param name="doorVariant">The base-game <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Doors.Door"/> wrapper object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Get(System.String)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Doors.Door"/> given the specified name.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Doors.Door"/> with the given name or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Get(UnityEngine.GameObject)">
            <summary>
            Gets the door object associated with a specific <see cref="T:UnityEngine.GameObject"/>, or creates a new one if there isn't one.
            </summary>
            <param name="gameObject">The base-game <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Doors.Door"/> with the given name or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Get(System.Func{Exiled.API.Features.Doors.Door,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Doors.Door"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Doors.Door"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Get(Exiled.API.Enums.DoorType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Doors.Door"/> given the specified <see cref="T:Exiled.API.Enums.DoorType"/>.
            </summary>
            <param name="doorType">The <see cref="T:Exiled.API.Enums.DoorType"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Doors.Door"/> with the given <see cref="T:Exiled.API.Enums.DoorType"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.GetClosest(UnityEngine.Vector3,System.Single@)">
            <summary>
            Returns the closest <see cref="T:Exiled.API.Features.Doors.Door"/> to the given <paramref name="position"/>.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3">position</see> to find the closest door to.</param>
            <param name="distance">The distance between the door and the point.</param>
            <returns>The door closest to the provided position.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Random(Exiled.API.Enums.ZoneType,System.Boolean)">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Doors.Door"/>.
            </summary>
            <param name="type">Filters by <see cref="T:Exiled.API.Enums.ZoneType"/>.</param>
            <param name="onlyUnbroken">A value indicating whether it filters broken doors.</param>
            <returns><see cref="T:Exiled.API.Features.Doors.Door"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.LockAll(System.Single,Exiled.API.Enums.ZoneType,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all <see cref="T:Exiled.API.Features.Doors.Door">doors</see> given the specified <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
            <param name="duration">The duration of the lockdown.</param>
            <param name="zoneType">The <see cref="T:Exiled.API.Enums.ZoneType"/> to affect.</param>
            <param name="lockType">The specified <see cref="T:Exiled.API.Enums.DoorLockType"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.LockAll(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType},Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all <see cref="T:Exiled.API.Features.Doors.Door">doors</see> given the specified <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
            <param name="duration">The duration of the lockdown.</param>
            <param name="zoneTypes">The <see cref="T:Exiled.API.Enums.ZoneType"/>s to affect.</param>
            <param name="lockType">The specified <see cref="T:Exiled.API.Enums.DoorLockType"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.LockAll(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all <see cref="T:Exiled.API.Features.Doors.Door">doors</see> in the facility.
            </summary>
            <param name="duration">The duration of the lockdown.</param>
            <param name="lockType">The specified <see cref="T:Exiled.API.Enums.DoorLockType"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.UnlockAll">
            <summary>
            Unlocks all <see cref="T:Exiled.API.Features.Doors.Door">doors</see> in the facility.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.UnlockAll(Exiled.API.Enums.ZoneType)">
            <summary>
            Unlocks all <see cref="T:Exiled.API.Features.Doors.Door">doors</see> in the facility.
            </summary>
            <param name="zoneType">The <see cref="T:Exiled.API.Enums.ZoneType"/> to affect.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.UnlockAll(System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})">
            <summary>
            Unlocks all <see cref="T:Exiled.API.Features.Doors.Door">doors</see> in the facility.
            </summary>
            <param name="zoneTypes">The <see cref="T:Exiled.API.Enums.ZoneType"/>s to affect.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.UnlockAll(System.Func{Exiled.API.Features.Doors.Door,System.Boolean})">
            <summary>
            Unlocks all <see cref="T:Exiled.API.Features.Doors.Door">doors</see> in the facility.
            </summary>
            <param name="predicate">The condition to satify.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.PlaySound(Exiled.API.Enums.DoorBeepType)">
            <summary>
            Makes the door play a beep sound.
            </summary>
            <param name="beep">The beep sound to play.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.ChangeLock(Exiled.API.Enums.DoorLockType)">
            <summary>
            Change the door lock with the given lock type.
            </summary>
            <param name="lockType">The <see cref="T:Exiled.API.Enums.DoorLockType"/> to use.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Lock(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all active locks on the door, and then reverts back any changes after a specified length of time.
            </summary>
            <param name="time">The amount of time that must pass before unlocking the door.</param>
            <param name="lockType">The <see cref="T:Exiled.API.Enums.DoorLockType"/> of the lockdown.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Unlock">
            <summary>
            Unlocks and clears all active locks on the door.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Unlock(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Unlocks and clears all active locks on the door after a specified length of time.
            </summary>
            <param name="time">The amount of time that must pass before unlocking the door.</param>
            <param name="flagsToUnlock">The <see cref="T:Exiled.API.Enums.DoorLockType"/> of the lockdown.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.IsAllowToInteract(Exiled.API.Features.Player)">
            <summary>
            Checks if specified <see cref="T:Exiled.API.Features.Player"/> can interact with the door.
            </summary>
            <param name="player">Player to check.</param>
            <returns><see langword="true"/> if the specified player can interact with the door. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.ToString">
            <summary>
            Returns the Door in a human-readable format.
            </summary>
            <returns>A string containing Door-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Doors.Door.Create(Interactables.Interobjects.DoorUtils.DoorVariant,System.Collections.Generic.List{Exiled.API.Features.Room})">
            <summary>
            Creates the door object associated with a specific <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.
            </summary>
            <param name="doorVariant">The base-game <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.</param>
            <param name="rooms">Target door <see cref="P:Exiled.API.Features.Doors.Door.Rooms"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Doors.Door"/> wrapper object.</returns>
        </member>
        <member name="T:Exiled.API.Features.Doors.ElevatorDoor">
            <summary>
            Represents an elevator door.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.ElevatorDoor.#ctor(Interactables.Interobjects.ElevatorDoor,System.Collections.Generic.List{Exiled.API.Features.Room})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Doors.ElevatorDoor"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.ElevatorDoor"/> for this door.</param>
            <param name="room">The <see cref="T:Exiled.API.Features.Room"/> for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Doors.ElevatorDoor.Base">
            <summary>
            Gets the base <see cref="T:Interactables.Interobjects.ElevatorDoor"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.ElevatorDoor.Group">
            <summary>
            Gets the <see cref="T:Interactables.Interobjects.ElevatorManager.ElevatorGroup"/> that this door's <see cref="P:Exiled.API.Features.Doors.ElevatorDoor.Lift"/> belongs to.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.ElevatorDoor.ElevatorType">
            <summary>
            Gets the type according to <see cref="P:Exiled.API.Features.Doors.ElevatorDoor.Group"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.ElevatorDoor.Panel">
            <summary>
            Gets the target panel for this lift.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.ElevatorDoor.Lift">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Doors.ElevatorDoor.Lift"/> associated with this elevator door.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.ElevatorDoor.ToString">
            <summary>
            Returns the Door in a human-readable format.
            </summary>
            <returns>A string containing Door-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Doors.Gate">
            <summary>
            Represents a "pryable" door or gate.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.Gate.#ctor(Interactables.Interobjects.PryableDoor,System.Collections.Generic.List{Exiled.API.Features.Room})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Doors.Gate"/> class.
            </summary>
            <param name="door">The base <see cref="T:Interactables.Interobjects.PryableDoor"/> for this door.</param>
            <param name="room">The <see cref="T:Exiled.API.Features.Room"/>'s for this door.</param>
        </member>
        <member name="P:Exiled.API.Features.Doors.Gate.Base">
            <summary>
            Gets the base <see cref="T:Interactables.Interobjects.PryableDoor"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Gate.PryPositions">
            <summary>
            Gets the list of all available pry positions.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Gate.IsFullyClosed">
            <summary>
            Gets a value indicating whether or not the door is fully closed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Gate.IsFullyOpen">
            <summary>
            Gets a value indicating whether the door is fully open.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Gate.IsMoving">
            <summary>
            Gets a value indicating whether or not the door is currently moving.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Gate.RemainingPryCooldown">
            <summary>
            Gets or sets remaining cooldown for prying.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Doors.Gate.BlockingPryingMask">
            <summary>
            Gets or sets <see cref="T:Exiled.API.Enums.DoorLockType"/> which will block prying if door has them.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Doors.Gate.TryPry(Exiled.API.Features.Player)">
            <summary>
            Tries to pry the door open. No effect if the door cannot be pried.
            </summary>
            <returns><see langword="true"/> if the door was able to be pried open.</returns>
            <param name="player"><see cref="T:Exiled.API.Features.Player"/> to perform pry gate.</param>
        </member>
        <member name="M:Exiled.API.Features.Doors.Gate.ToString">
            <summary>
            Returns the Door in a human-readable format.
            </summary>
            <returns>A string containing Door-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.DynamicEvents.DynamicDelegate">
            <summary>
            The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicDelegate"/> allows user-defined delegate routes bound to an <see cref="T:System.Object"/> reference.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicDelegate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DynamicEvents.DynamicDelegate"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicDelegate.#ctor(System.Object,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DynamicEvents.DynamicDelegate"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.API.Features.DynamicEvents.DynamicDelegate.Target"/></param>
            <param name="delegate"><inheritdoc cref="P:Exiled.API.Features.DynamicEvents.DynamicDelegate.Delegate"/></param>
        </member>
        <member name="P:Exiled.API.Features.DynamicEvents.DynamicDelegate.Target">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.DynamicEvents.DynamicDelegate"/>'s target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DynamicEvents.DynamicDelegate.Delegate">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.DynamicEvents.DynamicDelegate"/>'s delegate.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher">
            <summary>
            The class which handles delegates dynamically acting as multicast listener.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.#ctor(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.Action}})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> class.
            </summary>
            <param name="delegates">The delegates to be bound.</param>
        </member>
        <member name="P:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.BoundDelegates">
            <summary>
            Gets all the bound delegates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.Item(System.Object)">
            <summary>
            This indexer allows access to bound listeners using an <see cref="T:System.Object"/> reference.
            </summary>
            <param name="object">The listener to look for.</param>
            <returns>The obund listener corresponding to the specified reference.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.op_Addition(Exiled.API.Features.DynamicEvents.DynamicEventDispatcher,System.Action)">
            <summary>
            Binds a delegate the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> to bind the listener to.</param>
            <param name="right">The delegate to bind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.op_Addition(Exiled.API.Features.DynamicEvents.DynamicEventDispatcher,Exiled.API.Features.DynamicEvents.DynamicDelegate)">
            <summary>
            Binds a listener from the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> to bind the listener from.</param>
            <param name="right">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/> containing the listener to bind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.op_Addition(Exiled.API.Features.DynamicEvents.DynamicEventDispatcher,Exiled.API.Features.DynamicEvents.DynamicEventDispatcher)">
            <summary>
            Binds all bound listeners to a <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> to the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> to bind the listeners from.</param>
            <param name="right">The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> containing the listeners to bind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.op_Subtraction(Exiled.API.Features.DynamicEvents.DynamicEventDispatcher,System.Action)">
            <summary>
            Unbinds a delegate the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> to unbind the listener from.</param>
            <param name="right">The delegate to bind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.op_Subtraction(Exiled.API.Features.DynamicEvents.DynamicEventDispatcher,Exiled.API.Features.DynamicEvents.DynamicDelegate)">
            <summary>
            Unbinds a listener from the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> to unbind the listener from.</param>
            <param name="right">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/> containing the listener to unbind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.op_Subtraction(Exiled.API.Features.DynamicEvents.DynamicEventDispatcher,Exiled.API.Features.DynamicEvents.DynamicEventDispatcher)">
            <summary>
            Unbinds all bound listeners to a <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> from the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> to unbind the listeners from.</param>
            <param name="right">The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> containing the listeners to unbind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.Bind(System.Object,System.Action)">
            <summary>
            Binds a listener to the event dispatcher.
            </summary>
            <param name="obj">The listener instance.</param>
            <param name="del">The delegate to be bound.</param>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.Unbind(System.Object)">
            <summary>
            Unbinds a listener from the event dispatcher.
            </summary>
            <param name="obj">The listener instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.Invoke(System.Object)">
            <summary>
            Invokes the delegates from the specified listener.
            </summary>
            <param name="obj">The listener instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.InvokeAll">
            <summary>
            Invokes all the delegates from all the bound delegates.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher.UnbindAll">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.DynamicEvents.DynamicEventManager">
            <summary>
            The class which handles all the multicast delegates.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.DynamicEvents.DynamicEventManager.FDelegate`1">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate.
            </summary>
            <typeparam name="T">The <see cref="T:System.EventHandler`1"/> type.</typeparam>
            <param name="ev">The <see cref="T:System.EventHandler`1"/> instance.</param>
        </member>
        <member name="T:Exiled.API.Features.DynamicEvents.DynamicEventManager.FDelegate">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate, with empty parameters.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventManager.CreateFromTypeInstance(System.Object)">
            <inheritdoc cref="M:Exiled.API.Features.DynamicEvents.DynamicEventManager.CreateFromTypeInstance(System.Object)"/>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventManager.DestroyFromTypeInstance(System.Object)">
            <inheritdoc cref="M:Exiled.API.Features.DynamicEvents.DynamicEventManager.UnbindAllFromTypeInstance(System.Object)"/>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventManager.InvokeSafely``1(Exiled.API.Features.DynamicEvents.DynamicEventManager.FDelegate{``0},``0)">
            <summary>
            Executes all <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventManager.FDelegate`1"/> listeners safely.
            </summary>
            <typeparam name="T">Event arg type.</typeparam>
            <param name="ev">Source event.</param>
            <param name="arg">Event arg.</param>
            <exception cref="T:System.ArgumentNullException">Event or its arg is null.</exception>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventManager.InvokeSafely(Exiled.API.Features.DynamicEvents.DynamicEventManager.FDelegate)">
            <summary>
            Executes all <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventManager.FDelegate`1"/> listeners safely.
            </summary>
            <param name="ev">Source event.</param>
            <exception cref="T:System.ArgumentNullException">Event is null.</exception>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventManager.BindAllFromTypeInstance(System.Object)">
            <summary>
            Initializes all the dynamic handlers in the specified type instance.
            </summary>
            <param name="obj">The type instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.DynamicEventManager.UnbindAllFromTypeInstance(System.Object)">
            <summary>
            Unbinds all the dynamic handlers in the specified type instance.
            </summary>
            <param name="obj">The type instance.</param>
        </member>
        <member name="T:Exiled.API.Features.DynamicEvents.IDynamicEventDispatcher">
            <summary>
            Defines a dynamic event dispatcher.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.IDynamicEventDispatcher.UnbindAll">
            <summary>
            Unbinds all the delegates from all the bound delegates.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1">
            <summary>
            The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/> allows user-defined delegate routes bound to an <see cref="T:System.Object"/> reference.
            </summary>
            <typeparam name="T">The delegate type parameter.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1.#ctor(System.Object,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1.Target"/></param>
            <param name="delegate"><inheritdoc cref="P:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1.Delegate"/></param>
        </member>
        <member name="P:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1.Target">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/>'s target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1.Delegate">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/>'s delegate.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1">
            <summary>
            The <see cref="T:Exiled.API.Features.DynamicEvents.DynamicEventDispatcher"/>'s generic version which accepts a type parameter.
            </summary>
            <typeparam name="T">The event type parameter.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.#ctor(System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.Action{`0}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> class.
            </summary>
            <param name="delegates">The delegates to be bound.</param>
        </member>
        <member name="P:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.BoundDelegates">
            <summary>
            Gets all the bound delegates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.Item(System.Object)">
            <summary>
            This indexer allows access to bound listeners using an <see cref="T:System.Object"/> reference.
            </summary>
            <param name="object">The listener to look for.</param>
            <returns>The obund listener corresponding to the specified reference.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.op_Addition(Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher{`0},System.Action{`0})">
            <summary>
            Binds a delegate the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> to bind the listener to.</param>
            <param name="right">The delegate to bind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.op_Addition(Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher{`0},Exiled.API.Features.DynamicEvents.TDynamicDelegate{`0})">
            <summary>
            Binds a listener to the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> to bind the listener to.</param>
            <param name="right">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/> containing the listener to bind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.op_Addition(Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher{`0},Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher{`0})">
            <summary>
            Binds all bound listeners to a <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> to the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> to bind the listeners to.</param>
            <param name="right">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> containing the listeners to bind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.op_Subtraction(Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher{`0},System.Action{`0})">
            <summary>
            Unbinds a delegate the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> to unbind the listener from.</param>
            <param name="right">The delegate to unbind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.op_Subtraction(Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher{`0},Exiled.API.Features.DynamicEvents.TDynamicDelegate{`0})">
            <summary>
            Unbinds a delegate from the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> to unbind the delegate from.</param>
            <param name="right">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicDelegate`1"/> containing the delegate to unbind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.op_Subtraction(Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher{`0},Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher{`0})">
            <summary>
            Unbinds all bound listeners to a <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> from the event dispatcher.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> to unbind the listeners from.</param>
            <param name="right">The <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> containing the listeners to unbind.</param>
            <returns>The left-hand <see cref="T:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1"/> operator.</returns>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.Bind(System.Object,System.Action{`0})">
            <summary>
            Binds a listener to the event dispatcher.
            </summary>
            <param name="obj">The listener instance.</param>
            <param name="del">The delegate to be bound.</param>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.Unbind(System.Object)">
            <summary>
            Unbinds a listener from the event dispatcher.
            </summary>
            <param name="obj">The listener instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.Invoke(System.Object,`0)">
            <summary>
            Invokes the delegates from the specified listener.
            </summary>
            <param name="obj">The listener instance.</param>
            <param name="instance">The .</param>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.InvokeAll(`0)">
            <summary>
            Invokes all the delegates from all the bound delegates.
            </summary>
            <param name="instance">The parameter instance.</param>
        </member>
        <member name="M:Exiled.API.Features.DynamicEvents.TDynamicEventDispatcher`1.UnbindAll">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Effect">
            <summary>
            Useful class to save effect-related configs cleanly.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Effect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Effect"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Effect.#ctor(CustomPlayerEffects.StatusEffectBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Effect"/> class.
            </summary>
            <param name="statusEffectBase">Get all the information of the effect>.</param>
        </member>
        <member name="M:Exiled.API.Features.Effect.#ctor(Exiled.API.Enums.EffectType,System.Single,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Effect"/> class.
            </summary>
            <param name="type">The type of the effect>.</param>
            <param name="duration">The duration of the effect, in seconds.</param>
            <param name="intensity">The intensity of the effect.</param>
            <param name="addDurationIfActive">Whether the effect will add duration onto the effect if already active or not.</param>
            <param name="isEnabled">Whether or not the effect should be enabled.</param>
        </member>
        <member name="P:Exiled.API.Features.Effect.Type">
            <summary>
            Gets or sets the effect type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Effect.Duration">
            <summary>
            Gets or sets the effect duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Effect.Intensity">
            <summary>
            Gets or sets the effect intensity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Effect.AddDurationIfActive">
            <summary>
            Gets or sets a value indicating whether the effect will add duration onto the effect if already active or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Effect.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the effect should be enabled or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Effect.ToString">
            <summary>
            Returns the effect in a human-readable format.
            </summary>
            <returns>A string containing effect-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Generator">
            <summary>
            Wrapper class for <see cref="T:MapGeneration.Distributors.Scp079Generator"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Generator.Scp079GeneratorToGenerator">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Generator"/> on the map.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Generator.#ctor(MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Generator"/> class.
            </summary>
            <param name="scp079Generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Generator.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> which contains all the <see cref="T:Exiled.API.Features.Generator"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Base">
            <summary>
            Gets the base <see cref="T:MapGeneration.Distributors.Scp079Generator"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the generator.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Transform">
            <summary>
            Gets the <see cref="T:UnityEngine.Transform"/> of the generator.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Room">
            <summary>
            Gets the generator's <see cref="P:Exiled.API.Features.Generator.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.State">
            <summary>
            Gets or sets the generator' state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.CurrentTime">
            <summary>
            Gets or sets the generator's current time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.DropdownSpeed">
            <summary>
            Gets the generator's dropdown speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsReady">
            <summary>
            Gets a value indicating whether the generator is ready to be activated.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsEngaged">
            <summary>
            Gets or sets a value indicating whether the generator is engaged.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsActivating">
            <summary>
            Gets or sets a value indicating whether the generator is activating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsOpen">
            <summary>
            Gets or sets a value indicating whether the generator is open.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.IsUnlocked">
            <summary>
            Gets or sets a value indicating whether the generator is unlocked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.LeverDelay">
            <summary>
            Gets or sets the generator's lever delay.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.InteractionCooldown">
            <summary>
            Gets or sets current interaction cooldown.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.ActivationTime">
            <summary>
            Gets or sets the generator's activation time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.DeactivationTime">
            <summary>
            Gets or sets the generator's deactivation time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.TogglePanelCooldown">
            <summary>
            Gets or sets the cooldown to wait before toggling the generator's panel.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.UnlockCooldown">
            <summary>
            Gets or sets the interaction cooldown to wait after unlocking the generator.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.DeniedUnlockCooldown">
            <summary>
            Gets or sets the interaction cooldown to wait after failing the generator's unlock interaction.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.LastActivator">
            <summary>
            Gets or sets the last activator for the generator.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Position">
            <summary>
            Gets the generator position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.Rotation">
            <summary>
            Gets the generator rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Generator.KeycardPermissions">
            <summary>
            Gets or sets the required permissions to interact with the generator.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Generator.Get(MapGeneration.Distributors.Scp079Generator)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Generator"/> belonging to the <see cref="T:MapGeneration.Distributors.Scp079Generator"/>, if any.
            </summary>
            <param name="scp079Generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/> instance.</param>
            <returns>A <see cref="T:Exiled.API.Features.Generator"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Generator.Get(Exiled.API.Enums.GeneratorState)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> given the specified <see cref="T:Exiled.API.Enums.GeneratorState"/>.
            </summary>
            <param name="state">The <see cref="T:Exiled.API.Enums.GeneratorState"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Generator"/> with the given <see cref="T:Exiled.API.Enums.GeneratorState"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Generator.Get(System.Func{Exiled.API.Features.Generator,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Generator.TryGet(MapGeneration.Distributors.Scp079Generator,Exiled.API.Features.Generator@)">
            <summary>
            Try-get a <see cref="T:Exiled.API.Features.Generator"/> belonging to the <see cref="T:MapGeneration.Distributors.Scp079Generator"/>, if any.
            </summary>
            <param name="scp079Generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator"/> instance.</param>
            <param name="generator">A <see cref="T:Exiled.API.Features.Generator"/> or <see langword="null"/> if not found.</param>
            <returns>Whether or not a generator was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Generator.TryGet(Exiled.API.Enums.GeneratorState,System.Collections.Generic.IEnumerable{Exiled.API.Features.Generator}@)">
            <summary>
            Try-get a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> given the specified <see cref="T:Exiled.API.Enums.GeneratorState"/>.
            </summary>
            <param name="state">The <see cref="T:Exiled.API.Enums.GeneratorState"/> to search for.</param>
            <param name="generators">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> matching the <see cref="T:Exiled.API.Enums.GeneratorState"/>.</param>
            <returns>Whether or not at least one generator was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Generator.TryGet(System.Func{Exiled.API.Features.Generator,System.Boolean},System.Collections.Generic.IEnumerable{Exiled.API.Features.Generator}@)">
            <summary>
            Try-get a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <param name="generators">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Generator"/> which contains elements that satify the condition.</param>
            <returns>Whether or not at least one generator was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Generator.DenyUnlock">
            <summary>
            Denies the unlock.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Generator.DenyUnlockAndResetCooldown">
            <summary>
            Denies the unlock and resets the interaction cooldown.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Generator.SetPermissionFlag(Exiled.API.Enums.KeycardPermissions,System.Boolean)">
            <summary>
            Sets the specified <see cref="P:Exiled.API.Features.Generator.KeycardPermissions"/> flag.
            </summary>
            <param name="flag">The flag to set.</param>
            <param name="isEnabled">A value indicating whether the flag is enabled.</param>
        </member>
        <member name="M:Exiled.API.Features.Generator.ToString">
            <summary>
            Returns the Generator in a human-readable format.
            </summary>
            <returns>A string containing Generator-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.GlobalPatchProcessor">
            <summary>
            A <see cref="T:HarmonyLib.Harmony"/> alternative detour tool which adds more ways to manage patches and external assemblies.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.GlobalPatchProcessor.PatchedMethods">
            <summary>
            Gets all the patched methods.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.GlobalPatchProcessor.PatchedGroupMethods">
            <summary>
            Gets all the patched methods and their relative patch group.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.GlobalPatchProcessor.PatchAll(HarmonyLib.Harmony,System.Int32@)">
            <summary>
            Patch all your Harmony and return you the number of failed patch.
            </summary>
            <param name="harmony">The Harmony instance to Patch.</param>
            <param name="failedPatch">The number of failed patch.</param>
        </member>
        <member name="M:Exiled.API.Features.GlobalPatchProcessor.PatchAll(System.String,System.String)">
            <summary>
            Searches the current assembly for Harmony annotations and uses them to create patches.
            <br>It supports target-patching using <see cref="T:Exiled.API.Features.Attributes.PatchGroupAttribute"/> and the relative <paramref name="groupId"/>.</br>
            </summary>
            <param name="id">The Harmony instance id.</param>
            <param name="groupId">The target group to include.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="P:Exiled.API.Features.Attributes.PatchGroupAttribute.GroupId"/> is <see langword="null"/> or empty.</exception>
            <returns>The <see cref="T:HarmonyLib.Harmony"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.GlobalPatchProcessor.UnpatchAll(System.String,System.String)">
            <summary>
            Unpatches methods by patching them with zero patches.
            </summary>
            <param name="id">The Harmony instance id.</param>
            <param name="groupId">The target group to include.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="P:Exiled.API.Features.Attributes.PatchGroupAttribute.GroupId"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="T:Exiled.API.Features.Hazards.AmnesticCloudHazard">
            <summary>
            A wrapper for SCP-939's amnestic cloud.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hazards.AmnesticCloudHazard.#ctor(PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Hazards.AmnesticCloudHazard"/> class.
            </summary>
            <param name="hazard">The <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudInstance"/> instance.</param>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.Base">
            <inheritdoc cref="P:Exiled.API.Features.Hazards.Hazard.Base"/>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.Ability">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudAbility"/> for this instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.Owner">
            <summary>
            Gets the player who controls SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.State">
            <summary>
            Gets or sets current state of cloud.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.EffectDuration">
            <summary>
            Gets or sets duration for effects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.MinHoldTime">
            <summary>
            Gets or sets minimum time to press key to spawn cloud.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.MaxHoldTime">
            <summary>
            Gets or sets maximum time to press key to spawn cloud.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.TotalDuration">
            <summary>
            Gets or sets total duration before hazard will get destroyed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.AmnesticCloudHazard.TargetState">
            <summary>
            Gets or sets a value indicating whether or not hazard is active or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Hazards.Hazard">
            <summary>
            A wrapper for <see cref="T:Hazards.EnvironmentalHazard"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Hazards.Hazard.EnvironmentalHazardToHazard">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> with <see cref="T:Hazards.EnvironmentalHazard"/> to it's <see cref="T:Exiled.API.Features.Hazards.Hazard"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hazards.Hazard.#ctor(Hazards.EnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Hazards.Hazard"/> class.
            </summary>
            <param name="hazard">The <see cref="T:Hazards.EnvironmentalHazard"/> instance.</param>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.List">
            <summary>
            Gets the list of all hazards.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.Base">
            <summary>
            Gets the <see cref="T:Hazards.EnvironmentalHazard"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.AffectedPlayers">
            <summary>
            Gets or sets the list with all affected by this hazard players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.MaxDistance">
            <summary>
            Gets or sets max hazard distance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.MaxHeightDistance">
            <summary>
            Gets or sets max hazard height.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.IsActive">
            <summary>
            Gets a value indicating whether or not hazard is active.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.PositionOffset">
            <summary>
            Gets or sets offset for position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.Room">
            <summary>
            Gets the room where this hazard is located.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.Hazard.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hazards.Hazard.Get(Hazards.EnvironmentalHazard)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Hazards.Hazard"/> by <see cref="T:Hazards.EnvironmentalHazard"/>.
            </summary>
            <param name="environmentalHazard">The <see cref="T:Hazards.EnvironmentalHazard"/> instance.</param>
            <returns><see cref="T:Exiled.API.Features.Hazards.Hazard"/> for <see cref="T:Hazards.EnvironmentalHazard"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Hazards.Hazard.Get(Exiled.API.Features.Room)">
            <summary>
            Gets the hazard by the room where it's located.
            </summary>
            <param name="room">Room.</param>
            <returns><see cref="T:Exiled.API.Features.Hazards.Hazard"/> in given <see cref="T:Exiled.API.Features.Room"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Hazards.Hazard.Get(UnityEngine.GameObject)">
            <summary>
            Gets the hazard by it's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="obj">Game object.</param>
            <returns><see cref="T:Exiled.API.Features.Hazards.Hazard"/> in given <see cref="T:Exiled.API.Features.Room"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Hazards.Hazard.Get(System.Func{Exiled.API.Features.Hazards.Hazard,System.Boolean})">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Hazards.Hazard"/> based on predicate.
            </summary>
            <param name="predicate">Condition to satisfy.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Hazards.Hazard"/> based on predicate.</returns>
        </member>
        <member name="M:Exiled.API.Features.Hazards.Hazard.IsInArea(Exiled.API.Features.Player)">
            <summary>
            Checks if player is in hazard zone.
            </summary>
            <param name="player">Player to check.</param>
            <returns><see langword="true"/> if player is in hazard zone. Otherwise, false.</returns>
        </member>
        <member name="T:Exiled.API.Features.Hazards.SinkholeHazard">
            <summary>
            Represents a sinkhole hazard.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hazards.SinkholeHazard.#ctor(Hazards.SinkholeEnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Hazards.SinkholeHazard"/> class.
            </summary>
            <param name="hazard">The <see cref="T:Hazards.SinkholeEnvironmentalHazard"/> instance.</param>
        </member>
        <member name="P:Exiled.API.Features.Hazards.SinkholeHazard.Base">
            <summary>
            Gets the <see cref="T:Hazards.SinkholeEnvironmentalHazard"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Hazards.TantrumHazard">
            <summary>
            A wrapper for <see cref="T:Hazards.TantrumEnvironmentalHazard"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hazards.TantrumHazard.#ctor(Hazards.TantrumEnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Hazards.TantrumHazard"/> class.
            </summary>
            <param name="hazard">The <see cref="T:Hazards.TantrumEnvironmentalHazard"/> instance.</param>
        </member>
        <member name="P:Exiled.API.Features.Hazards.TantrumHazard.Base">
            <summary>
            Gets the <see cref="T:Hazards.TantrumEnvironmentalHazard"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.TantrumHazard.PlaySizzle">
            <summary>
            Gets or sets a value indicating whether or not sizzle should be played.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.TantrumHazard.SynchronisedPosition">
            <summary>
            Gets or sets the synced position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.TantrumHazard.CorrectPosition">
            <summary>
            Gets or sets the correct position of tantrum hazard.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Hazards.TemporaryHazard">
            <summary>
            Represents temporary hazard.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hazards.TemporaryHazard.#ctor(Hazards.TemporaryHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Hazards.TemporaryHazard"/> class.
            </summary>
            <param name="hazard">The <see cref="T:Hazards.TemporaryHazard"/> instance.</param>
        </member>
        <member name="P:Exiled.API.Features.Hazards.TemporaryHazard.Base">
            <summary>
            Gets the <see cref="T:Hazards.TemporaryHazard"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.TemporaryHazard.IsDestroyed">
            <summary>
            Gets or sets a value indicating whether or not hazard is destroyed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.TemporaryHazard.TotalDuration">
            <summary>
            Gets the total duration before hazard gets destroyed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hazards.TemporaryHazard.Duration">
            <summary>
            Gets or sets elapsed time which has spend after creating.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hazards.TemporaryHazard.Destroy">
            <summary>
            Destroys this hazard.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Hint">
            <summary>
            Useful class to save hint configs in a cleaner way.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Hint"/> class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hint.#ctor(System.String,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Hint"/> class.
            </summary>
            <param name="content">The content of the hint>.</param>
            <param name="duration">The duration of the hint, in seconds.</param>
            <param name="show">Whether or not the hint should be shown.</param>
        </member>
        <member name="P:Exiled.API.Features.Hint.Content">
            <summary>
            Gets or sets the hint content.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hint.Duration">
            <summary>
            Gets or sets the hint duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Hint.Show">
            <summary>
            Gets or sets a value indicating whether the hint should be shown or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Hint.ToString">
            <summary>
            Returns the hint in a human-readable format.
            </summary>
            <returns>A string containing hint-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Intercom">
            <summary>
            A set of tools to easily handle the Intercom.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.IntercomDisplay">
            <summary>
            Gets the instance of <see cref="T:PlayerRoles.Voice.IntercomDisplay"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.DisplayText">
            <summary>
            Gets or sets the text displayed on the intercom screen.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.State">
            <summary>
            Gets or sets the current state of the intercom.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.GameObject">
            <summary>
            Gets the intercom's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.Transform">
            <summary>
            Gets the intercom's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.InUse">
            <summary>
            Gets a value indicating whether or not the intercom is currently being used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.Speaker">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> that is using the intercom.
            </summary>
            <remarks>Will be <see langword="null"/> if <see cref="P:Exiled.API.Features.Intercom.InUse"/> is <see langword="false"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Intercom.RemainingCooldown">
            <summary>
            Gets or sets the remaining cooldown of the intercom.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Intercom.SpeechRemainingTime">
            <summary>
            Gets or sets the remaining speech time of the intercom.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Intercom.PlaySound(System.Boolean)">
            <summary>
            Plays the intercom's sound.
            </summary>
            <param name="isStarting">Sets a value indicating whether or not the sound is the intercom's start speaking sound.</param>
        </member>
        <member name="M:Exiled.API.Features.Intercom.Reset">
            <summary>
            Reset the intercom's cooldown.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Intercom.Timeout">
            <summary>
            Times out the intercom.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Items.Ammo">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Ammo.AmmoLimit">
            <summary>
            Gets the absolute maximum amount of ammo that may be held at one time, if ammo is forcefully given to the player (regardless of worn armor or server configuration).
            <para>
            For accessing the maximum amount of ammo that may be held based on worn armor and server settings, see <see cref="M:Exiled.API.Features.Player.GetAmmoLimit(Exiled.API.Enums.AmmoType)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Ammo.#ctor(InventorySystem.Items.Firearms.Ammo.AmmoItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Ammo"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Ammo.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Ammo"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the ammo.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Ammo.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Ammo.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Ammo"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Ammo"/> object. </returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Armor">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Armor.BodyArmor"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Armor.#ctor(InventorySystem.Items.Armor.BodyArmor)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Armor"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Armor.BodyArmor"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Armor.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Armor"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the armor.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Armor.BodyArmor"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.Equippable">
            <summary>
            Gets a value indicating whether this item is equippable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.Holsterable">
            <summary>
            Gets a value indicating whether this item is holsterable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.IsWorn">
            <summary>
            Gets a value indicating whether or not this is a worn item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.Weight">
            <summary>
            Gets or sets the Weight of the armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.RemoveExcessOnDrop">
            <summary>
            Gets or sets a value indicating whether or not excess ammo should be removed when the armor is dropped.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.HelmetEfficacy">
            <summary>
            Gets or sets how strong the helmet on the armor is.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.VestEfficacy">
            <summary>
            Gets or sets how strong the vest on the armor is.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.StaminaUseMultiplier">
            <summary>
            Gets or sets how much faster stamina will drain when wearing this armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.MovementSpeedMultiplier">
            <summary>
            Gets or sets how much the users movement speed should be affected when wearing this armor. (higher values = slower movement).
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.CivilianDownsideMultiplier">
            <summary>
            Gets how much worse <see cref="F:PlayerRoles.RoleTypeId.ClassD"/> and <see cref="F:PlayerRoles.RoleTypeId.Scientist"/>s are affected by wearing this armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.AmmoLimits">
            <summary>
            Gets or sets the ammo limit of the wearer when using this armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Armor.CategoryLimits">
            <summary>
            Gets or sets the item caterory limit of the wearer when using this armor.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Armor.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Armor"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Armor"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Armor.ReadPickupInfo(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Items.Consumable">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Usables.Consumable"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Consumable.#ctor(InventorySystem.Items.Usables.Consumable)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Consumable"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Usables.Consumable"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Consumable.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Consumable"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the usable item.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Consumable.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Consumable"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Consumable.ChangeOwner(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Items.ExplosiveGrenade">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.#ctor(ItemType,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the grenade.</param>
            <param name="player">The owner of the grenade. Leave <see langword="null"/> for no owner.</param>
            <remarks>The player parameter will always need to be defined if this grenade is custom using Exiled.CustomItems.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.Projectile">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile"/> to change grenade properties.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.MaxRadius">
            <summary>
            Gets or sets the maximum radius of the grenade.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.ScpDamageMultiplier">
            <summary>
            Gets or sets the multiplier for damage against <see cref="F:Exiled.API.Enums.Side.Scp"/> players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.BurnDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Burned"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.DeafenDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Deafened"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.ConcussDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Concussed"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.ExplosiveGrenade.FuseTime">
            <summary>
            Gets or sets how long the fuse will last.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.SpawnActive(UnityEngine.Vector3,Exiled.API.Features.Player)">
            <summary>
            Spawns an active grenade on the map at the specified location.
            </summary>
            <param name="position">The location to spawn the grenade.</param>
            <param name="owner">Optional: The <see cref="T:Exiled.API.Features.Player"/> owner of the grenade.</param>
            <returns>Spawned <see cref="T:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile">grenade</see>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.ToString">
            <summary>
            Returns the ExplosiveGrenade in a human readable format.
            </summary>
            <returns>A string containing ExplosiveGrenade-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.ExplosiveGrenade.ReadPickupInfo(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Items.Firearm">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Firearms.Firearm"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Firearm.ItemTypeToFirearmInstance">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Items.Firearm"/> which contains all the existing firearms based on all the <see cref="P:Exiled.API.Features.Items.Firearm.FirearmType"/>s.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Firearm.BaseCodesValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> which contains all the base codes expressed in <see cref="P:Exiled.API.Features.Items.Firearm.FirearmType"/> and <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.#ctor(InventorySystem.Items.Firearms.Firearm)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Firearm"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Firearms.Firearm"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Firearm"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the firearm.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.BaseCodes">
            <inheritdoc cref="F:Exiled.API.Features.Items.Firearm.BaseCodesValue"/>.
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.AvailableAttachments">
            <inheritdoc cref="P:Exiled.API.Features.Items.Firearm.AvailableAttachmentsValue"/>.
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.PlayerPreferences">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> which represents all the preferences for each <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Firearms.Firearm"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Ammo">
            <summary>
            Gets or sets the amount of ammo in the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.MaxAmmo">
            <summary>
            Gets or sets the max ammo for this firearm.
            </summary>
            <remarks>Disruptor can't be used for MaxAmmo.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.FirearmType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.FirearmType"/> of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.AmmoType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.AmmoType"/> of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Aiming">
            <summary>
            Gets a value indicating whether the firearm is being aimed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.FlashlightEnabled">
            <summary>
            Gets a value indicating whether the firearm's flashlight module is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.NightVisionEnabled">
            <summary>
            Gets a value indicating whether the firearm's NightVision is being used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.CanSeeThroughDark">
            <summary>
            Gets a value indicating whether the firearm's flashlight module is enabled or NightVision is being used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.IsAutomatic">
            <summary>
            Gets a value indicating whether or not the firearm is automatic.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Attachments">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>s of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.AttachmentIdentifiers">
            <summary>
            Gets the <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>s of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.BaseCode">
            <summary>
            Gets the base code of the firearm.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.FireRate">
            <summary>
            Gets or sets the fire rate of the firearm, if it is an automatic weapon.
            </summary>
            <remarks>This property will not do anything if the firearm is not an automatic weapon.</remarks>
            <seealso cref="P:Exiled.API.Features.Items.Firearm.IsAutomatic"/>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.Recoil">
            <summary>
            Gets or sets the recoil settings of the firearm, if it's an automatic weapon.
            </summary>
            <remarks>This property will not do anything if the firearm is not an automatic weapon.</remarks>
            <seealso cref="P:Exiled.API.Features.Items.Firearm.IsAutomatic"/>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.RecoilPattern">
            <summary>
            Gets the firearm's <see cref="T:InventorySystem.Items.Firearms.FirearmRecoilPattern"/>. Will be <see langword="null"/> for non-automatic weapons.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Firearm.AvailableAttachmentsValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:ItemType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] which contains all available attachments for all firearms.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.Create(Exiled.API.Enums.FirearmType)">
            <summary>
            Creates and returns a <see cref="T:Exiled.API.Features.Items.Firearm"/> representing the provided <see cref="T:Exiled.API.Enums.FirearmType"/>.
            </summary>
            <param name="type">The type of firearm to create.</param>
            <returns>The newly created firearm.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddAttachment(Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Adds a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to the firearm.
            </summary>
            <param name="identifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddAttachment(InventorySystem.Items.Firearms.Attachments.AttachmentName)">
            <summary>
            Adds a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to the firearm.
            </summary>
            <param name="attachmentName">The <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddAttachment(System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to the firearm.
            </summary>
            <param name="identifiers">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddAttachment(System.Collections.Generic.IEnumerable{InventorySystem.Items.Firearms.Attachments.AttachmentName})">
            <summary>
            Adds a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to the firearm.
            </summary>
            <param name="attachmentNames">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Removes a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> from the firearm.
            </summary>
            <param name="identifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(InventorySystem.Items.Firearms.Attachments.AttachmentName)">
            <summary>
            Removes a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> from the firearm.
            </summary>
            <param name="attachmentName">The <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(InventorySystem.Items.Firearms.Attachments.AttachmentSlot)">
            <summary>
            Removes a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> from the firearm.
            </summary>
            <param name="attachmentSlot">The <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Removes a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> from the firearm.
            </summary>
            <param name="identifiers">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(System.Collections.Generic.IEnumerable{InventorySystem.Items.Firearms.Attachments.AttachmentName})">
            <summary>
            Removes a list of <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> from the firearm.
            </summary>
            <param name="attachmentNames">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemoveAttachment(System.Collections.Generic.IEnumerable{InventorySystem.Items.Firearms.Attachments.AttachmentSlot})">
            <summary>
            Removes a list of <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> from the firearm.
            </summary>
            <param name="attachmentSlots">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentSlot"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ClearAttachments">
            <summary>
            Removes all attachments from the firearm.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.CreatePickup(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Creates the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> that based on this <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <param name="position">The location to spawn the item.</param>
            <param name="rotation">The rotation of the item.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> should be initially spawned.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.GetAttachment(Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Gets a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="identifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to check.</param>
            <returns>The corresponding <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.TryGetAttachment(Exiled.API.Structs.AttachmentIdentifier,InventorySystem.Items.Firearms.Attachments.Components.Attachment@)">
            <summary>
            Tries to get a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="identifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to check.</param>
            <param name="firearmAttachment">The corresponding <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</param>
            <returns>A value indicating whether or not the firearm has the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.TryGetAttachment(InventorySystem.Items.Firearms.Attachments.AttachmentName,InventorySystem.Items.Firearms.Attachments.Components.Attachment@)">
            <summary>
            Tries to get a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> of the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/>.
            </summary>
            <param name="attachmentName">The <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to check.</param>
            <param name="firearmAttachment">The corresponding <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</param>
            <returns>A value indicating whether or not the firearm has the specified <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(Exiled.API.Features.Player,Exiled.API.Enums.FirearmType,Exiled.API.Structs.AttachmentIdentifier[])">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="itemType">The <see cref="T:Exiled.API.Enums.FirearmType"/> to add.</param>
            <param name="attachments">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(Exiled.API.Features.Player,System.Collections.Generic.KeyValuePair{Exiled.API.Enums.FirearmType,Exiled.API.Structs.AttachmentIdentifier[]})">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="preference">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <see cref="T:Exiled.API.Enums.FirearmType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(Exiled.API.Features.Player,System.Collections.Generic.Dictionary{Exiled.API.Enums.FirearmType,Exiled.API.Structs.AttachmentIdentifier[]})">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="preference">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:Exiled.API.Enums.FirearmType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},Exiled.API.Enums.FirearmType,Exiled.API.Structs.AttachmentIdentifier[])">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="type">The <see cref="T:Exiled.API.Enums.FirearmType"/> to add.</param>
            <param name="attachments">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},System.Collections.Generic.KeyValuePair{Exiled.API.Enums.FirearmType,Exiled.API.Structs.AttachmentIdentifier[]})">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="preference">The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <see cref="T:Exiled.API.Enums.FirearmType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.AddPreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},System.Collections.Generic.Dictionary{Exiled.API.Enums.FirearmType,Exiled.API.Structs.AttachmentIdentifier[]})">
            <summary>
            Adds or replaces an existing preference to the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be added.</param>
            <param name="preference">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:Exiled.API.Enums.FirearmType"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>[] to add.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemovePreference(Exiled.API.Features.Player,Exiled.API.Enums.FirearmType)">
            <summary>
            Removes a preference from the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/> if it already exists.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be removed.</param>
            <param name="type">The <see cref="T:Exiled.API.Enums.FirearmType"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemovePreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},Exiled.API.Enums.FirearmType)">
            <summary>
            Removes a preference from the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/> if it already exists.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be removed.</param>
            <param name="type">The <see cref="T:Exiled.API.Enums.FirearmType"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemovePreference(Exiled.API.Features.Player,System.Collections.Generic.IEnumerable{Exiled.API.Enums.FirearmType})">
            <summary>
            Removes a preference from the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/> if it already exists.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be removed.</param>
            <param name="types">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.FirearmType"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.RemovePreference(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player},System.Collections.Generic.IEnumerable{Exiled.API.Enums.FirearmType})">
            <summary>
            Removes a preference from the <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/> if it already exists.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be removed.</param>
            <param name="types">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.FirearmType"/> to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ClearPreferences(Exiled.API.Features.Player)">
            <summary>
            Clears all the existing preferences from <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> of which must be cleared.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ClearPreferences(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player})">
            <summary>
            Clears all the existing preferences from <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
            <param name="players">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> of which must be cleared.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ClearPreferences">
            <summary>
            Clears all the existing preferences from <see cref="P:Exiled.API.Features.Items.Firearm.PlayerPreferences"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Firearm"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Firearm"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Firearm.ChangeOwner(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Change the owner of the <see cref="T:Exiled.API.Features.Items.Firearm"/>.
            </summary>
            <param name="oldOwner">old <see cref="T:Exiled.API.Features.Items.Firearm"/> owner.</param>
            <param name="newOwner">new <see cref="T:Exiled.API.Features.Items.Firearm"/> owner.</param>
        </member>
        <member name="T:Exiled.API.Features.Items.FlashGrenade">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> class, as well as a new flash grenade item.
            </summary>
            <param name="player">The owner of the grenade. Leave <see langword="null"/> for no owner.</param>
            <remarks>The player parameter will always need to be defined if this grenade is custom using Exiled.CustomItems.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.Projectile">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile"/> to change grenade properties.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.MinimalDurationEffect">
            <summary>
            Gets or sets the minimum duration of player can take the effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.AdditionalBlindedEffect">
            <summary>
            Gets or sets the additional duration of the <see cref="F:Exiled.API.Enums.EffectType.Blinded"/> effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.SurfaceDistanceIntensifier">
            <summary>
            Gets or sets the how mush the flash grenade going to be intensified when explode at <see cref="F:Exiled.API.Enums.RoomType.Surface"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.FlashGrenade.FuseTime">
            <summary>
            Gets or sets how long the fuse will last.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.SpawnActive(UnityEngine.Vector3,Exiled.API.Features.Player)">
            <summary>
            Spawns an active grenade on the map at the specified location.
            </summary>
            <param name="position">The location to spawn the grenade.</param>
            <param name="owner">Optional: The <see cref="T:Exiled.API.Features.Player"/> owner of the grenade.</param>
            <returns>Spawned <see cref="T:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile">grenade</see>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.ToString">
            <summary>
            Returns the FlashGrenade in a human readable format.
            </summary>
            <returns>A string containing FlashGrenade-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.FlashGrenade.ReadPickupInfo(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Items.Flashlight">
            <summary>
            A wrapped class for <see cref="T:InventorySystem.Items.ToggleableLights.ToggleableLightItemBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Flashlight.#ctor(InventorySystem.Items.ToggleableLights.ToggleableLightItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Flashlight"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ToggleableLights.ToggleableLightItemBase"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Flashlight.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Flashlight"/> class, as well as a new Flashlight item.
            </summary>
            <param name="type"><see cref="F:ItemType.Flashlight"/> or <see cref="F:ItemType.Lantern"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Flashlight.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ToggleableLights.ToggleableLightItemBase"/> that this class is encapsulating.
            </summary>
            <remarks>Can be <see cref="T:InventorySystem.Items.ToggleableLights.Flashlight.FlashlightItem"/> or <see cref="T:InventorySystem.Items.ToggleableLights.Lantern.LanternItem"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.Flashlight.Active">
            <inheritdoc cref="P:Exiled.API.Features.Items.Flashlight.IsEmittingLight"/>
        </member>
        <member name="P:Exiled.API.Features.Items.Flashlight.IsEmittingLight">
            <summary>
            Gets or sets a value indicating whether the item is emitting light.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Flashlight.NextAllowedTime">
            <summary>
            Gets or sets time since level loaded when player will be able to change <see cref="P:Exiled.API.Features.Items.Flashlight.IsEmittingLight"/> again.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Flashlight.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Items.Flashlight.ToString">
            <summary>
            Returns the item in a human readable format.
            </summary>
            <returns>A string containing item-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Item">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.ItemBase"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.Item.BaseToItem">
            <summary>
            A dictionary of all <see cref="T:InventorySystem.Items.ItemBase"/>'s that have been converted into <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.#ctor(InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Item"/> class.
            </summary>
            <param name="itemBase">The <see cref="T:InventorySystem.Items.ItemBase"/> to encapsulate.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Item"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the item to create.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.List">
            <summary>
            Gets a list of all <see cref="T:Exiled.API.Features.Items.Item"/>'s on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Serial">
            <summary>
            Gets or sets the unique serial number for the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsInInventory">
            <summary>
            Gets a value indicating whether if the item are in an inventory.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Scale">
            <summary>
            Gets or sets the scale for the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ItemBase"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Type">
            <summary>
            Gets the <see cref="T:ItemType"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Category">
            <summary>
            Gets the <see cref="T:ItemCategory"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.TierFlags">
            <summary>
            Gets the <see cref="T:ItemTierFlags"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Weight">
            <summary>
            Gets the Weight of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsAmmo">
            <summary>
            Gets a value indicating whether or not this item is ammunition.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsArmor">
            <summary>
            Gets a value indicating whether or not this item is armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsKeycard">
            <summary>
            Gets a value indicating whether or not this item is a keycard.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsConsumable">
            <summary>
            Gets a value indicating whether or not this item will be destroy when being used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsThrowable">
            <summary>
            Gets a value indicating whether or not this item is a throwable item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsUsable">
            <summary>
            Gets a value indicating whether or not this item can be used by a player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsWeapon">
            <summary>
            Gets a value indicating whether or not this item is a weapon.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsLightEmitter">
            <summary>
            Gets a value indicating whether or not this item emits light.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.IsDisarmer">
            <summary>
            Gets a value indicating whether or not this item can be used to disarm players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Item.Owner">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> who owns the item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Get(InventorySystem.Items.ItemBase)">
            <summary>
            Gets an existing <see cref="T:Exiled.API.Features.Items.Item"/> or creates a new instance of one.
            </summary>
            <param name="itemBase">The <see cref="T:InventorySystem.Items.ItemBase"/> to convert into an item.</param>
            <returns>The item wrapper for the given <see cref="T:InventorySystem.Items.ItemBase"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Get(System.UInt16)">
            <summary>
            Gets the Item belonging to the specified serial.
            </summary>
            <param name="serial">The Item serial.</param>
            <returns>Returns the Item found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Create(ItemType,Exiled.API.Features.Player)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Items.Item"/> with the proper inherited subclass.
            <para>
            Based on the <paramref name="type"/>, the returned <see cref="T:Exiled.API.Features.Items.Item"/> can be casted into a subclass to gain more control over the object.
            <br />- Usable items (Adrenaline, Medkit, Painkillers, SCP-207, SCP-268, and SCP-500) should be casted to the <see cref="T:Exiled.API.Features.Items.Usable"/> class.
            <br />- All valid ammo should be casted to the <see cref="T:Exiled.API.Features.Items.Ammo"/> class.
            <br />- All valid firearms (not including the Micro HID) should be casted to the <see cref="T:Exiled.API.Features.Items.Firearm"/> class.
            <br />- All valid keycards should be casted to the <see cref="T:Exiled.API.Features.Items.Keycard"/> class.
            <br />- All valid armor should be casted to the <see cref="T:Exiled.API.Features.Items.Armor"/> class.
            <br />- Explosive grenades and SCP-018 should be casted to the <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> class.
            <br />- Flash grenades should be casted to the <see cref="T:Exiled.API.Features.Items.FlashGrenade"/> class.
            </para>
            <para>
            <br />The following have their own respective classes:
            <br />- Flashlights can be casted to <see cref="T:Exiled.API.Features.Items.Flashlight"/>.
            <br />- Radios can be casted to <see cref="T:Exiled.API.Features.Items.Radio"/>.
            <br />- The Micro HID can be casted to <see cref="T:Exiled.API.Features.Items.MicroHid"/>.
            <br />- SCP-244 A and B variants can be casted to <see cref="T:Exiled.API.Features.Items.Scp244"/>.
            <br />- SCP-330 can be casted to <see cref="T:Exiled.API.Features.Items.Scp330"/>.
            <br />- SCP-2176 can be casted to the <see cref="T:Exiled.API.Features.Items.Scp2176"/> class.
            <br />- SCP-1576 can be casted to the <see cref="T:Exiled.API.Features.Items.Scp1576"/> class.
            <br />- Jailbird can be casted to the <see cref="T:Exiled.API.Features.Items.Jailbird"/> class.
            </para>
            <para>
            Items that are not listed above do not have a subclass, and can only use the base <see cref="T:Exiled.API.Features.Items.Item"/> class.
            </para>
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the item to create.</param>
            <param name="owner">The <see cref="T:Exiled.API.Features.Player"/> who owns the item by default.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> created. This can be cast as a subclass.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Give(Exiled.API.Features.Player)">
            <summary>
            Gives this item to a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to give the item to.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Destroy">
            <summary>
            Destroy this item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.CreatePickup(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Creates the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> that based on this <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <param name="position">The location to spawn the item.</param>
            <param name="rotation">The rotation of the item.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> should be initially spawned.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.Clone">
            <summary>
            Clones the current item with a different serial.
            </summary>
            <returns> Cloned item object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.ToString">
            <summary>
            Returns the Item in a human readable format.
            </summary>
            <returns>A string containing Item-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.ChangeItemOwner(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Changes the owner of the <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <param name="oldOwner">Old <see cref="T:Exiled.API.Features.Items.Item"/> owner.</param>
            <param name="newOwner">New <see cref="T:Exiled.API.Features.Items.Item"/> owner.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.ChangeOwner(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Change the owner of the <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <param name="oldOwner">old <see cref="T:Exiled.API.Features.Items.Item"/> owner.</param>
            <param name="newOwner">new <see cref="T:Exiled.API.Features.Items.Item"/> owner.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Item.ReadPickupInfo(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Helper method for saving data between items and pickups.
            </summary>
            <param name="pickup"><see cref="T:Exiled.API.Features.Pickups.Pickup"/>-related data to give to the <see cref="T:Exiled.API.Features.Items.Item"/>.</param>
        </member>
        <member name="T:Exiled.API.Features.Items.Jailbird">
            <summary>
            A wrapped class for <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Jailbird.#ctor(InventorySystem.Items.Jailbird.JailbirdItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Jailbird"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Jailbird.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Jailbird"/> class, as well as a new Jailbird item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Jailbird.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Jailbird.MeleeDamage">
            <summary>
            Gets or sets the amount of damage dealt with a Jailbird melee hit.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Jailbird.ChargeDamage">
            <summary>
            Gets or sets the amount of damage dealt with a Jailbird charge hit.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Jailbird.FlashDuration">
            <summary>
            Gets or sets the amount of time in seconds that the <see cref="T:CustomPlayerEffects.Flashed"/> effect will be applied on being hit.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Jailbird.Radius">
            <summary>
            Gets or sets the radius of the Jailbird's hit register.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Jailbird.TotalDamageDealt">
            <summary>
            Gets or sets the total amount of damage dealt with the Jailbird.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Jailbird.TotalCharges">
            <summary>
            Gets or sets the number of times the item has been charged and used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Jailbird.WearState">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Jailbird.JailbirdWearState"/> for this item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Jailbird.Break">
            <summary>
            Breaks the Jailbird.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Jailbird.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Jailbird"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Jailbird"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Jailbird.ToString">
            <summary>
            Returns the JailBird in a human readable format.
            </summary>
            <returns>A string containing JailBird-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Jailbird.ReadPickupInfo(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Items.Keycard">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Keycard.#ctor(InventorySystem.Items.Keycards.KeycardItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Keycard"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Keycard.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Keycard"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the keycard.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Keycard.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Keycards.KeycardItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Keycard.Permissions">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Enums.KeycardPermissions"/> of the keycard.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Keycard.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Keycard"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Keycard"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Keycard.ToString">
            <summary>
            Returns the Keycard in a human readable format.
            </summary>
            <returns>A string containing Keycard-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Keycard.ReadPickupInfo(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Items.MicroHid">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.#ctor(InventorySystem.Items.MicroHID.MicroHIDItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.MicroHid"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.MicroHid"/> class, as well as a new Micro HID item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.MicroHid.Energy">
            <summary>
            Gets or sets the remaining energy in the MicroHID.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.MicroHid.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.MicroHID.MicroHIDItem"/> base of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.MicroHid.State">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.MicroHID.HidState"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.Fire">
            <summary>
            Starts firing the MicroHID.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.Recharge">
            <summary>
            Recharges the MicroHID.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.MicroHid"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.MicroHid"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.MicroHid.ToString">
            <summary>
            Returns the MicroHid in a human readable format.
            </summary>
            <returns>A string containing MicroHid-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Radio">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Radio.RadioItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.#ctor(InventorySystem.Items.Radio.RadioItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Radio"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Radio.RadioItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Radio"/> class, as well as a new Radio item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Radio.RadioItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.BatteryLevel">
            <summary>
            Gets or sets the percentage of the radio's battery, between <c>0-100</c>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.Range">
            <summary>
            Gets or sets the current <see cref="T:Exiled.API.Enums.RadioRange"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.RangeSettings">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Structs.RadioRangeSettings"/> for the current <see cref="P:Exiled.API.Features.Items.Radio.Range"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Radio.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the radio is enabled or not.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.SetRangeSettings(Exiled.API.Enums.RadioRange,Exiled.API.Structs.RadioRangeSettings)">
            <summary>
            Sets the <see cref="T:Exiled.API.Structs.RadioRangeSettings"/> of the given <paramref name="range"/>.
            </summary>
            <param name="range">The <see cref="T:Exiled.API.Enums.RadioRange"/> to modify.</param>
            <param name="settings">The new settings of the specified range.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Radio"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Radio"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.ToString">
            <summary>
            Returns the Radio in a human readable format.
            </summary>
            <returns>A string containing Radio-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Radio.ChangeOwner(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="oldOwner">old <see cref="T:Exiled.API.Features.Items.Item"/> owner.</param>
            <param name="newOwner">new <see cref="T:Exiled.API.Features.Items.Item"/> owner.</param>
        </member>
        <member name="T:Exiled.API.Features.Items.Scp018">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile"/> item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp018.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp018"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp018.#ctor(ItemType,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp018"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the grenade.</param>
            <param name="player">The owner of the grenade. Leave <see langword="null"/> for no owner.</param>
            <remarks>The player parameter will always need to be defined if this grenade is custom using Exiled.CustomItems.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp018.Projectile">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile"/> to change grenade properties.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp018.FriendlyFireTime">
            <summary>
            Gets or sets the time for SCP-018 not to ignore the friendly fire.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp018.FuseTime">
            <summary>
            Gets or sets how long the fuse will last.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp018.SpawnActive(UnityEngine.Vector3,Exiled.API.Features.Player)">
            <summary>
            Spawns an active grenade on the map at the specified location.
            </summary>
            <param name="position">The location to spawn the grenade.</param>
            <param name="owner">Optional: The <see cref="T:Exiled.API.Features.Player"/> owner of the grenade.</param>
            <returns>Spawned <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile">grenade</see>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp018.ToString">
            <summary>
            Returns the ExplosiveGrenade in a human readable format.
            </summary>
            <returns>A string containing ExplosiveGrenade-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp018.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.ExplosiveGrenade"/> object. </returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Scp1576">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Item"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp1576.#ctor(InventorySystem.Items.Usables.Scp1576.Scp1576Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp1576"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Item"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp1576.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp1576"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp1576.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.UsableItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp1576.PlaybackTemplate">
            <summary>
            Gets Scp1576Playback.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp1576.StopTransmitting">
            <summary>
            Forcefully stops the transmission of SCP-1576.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Items.Scp2176">
            <summary>
            A wrapper class for <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp2176.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp2176"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp2176.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp2176"/> class.
            </summary>
            <param name="player">The owner of the grenade. Leave <see langword="null"/> for no owner.</param>
            <remarks>The player parameter will always need to be defined if this grenade is custom using Exiled.CustomItems.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp2176.Projectile">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile"/> to change grenade properties.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp2176.FuseTime">
            <summary>
            Gets or sets how long the fuse will last.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp2176.SpawnActive(UnityEngine.Vector3,Exiled.API.Features.Player)">
            <summary>
            Spawns an active grenade on the map at the specified location.
            </summary>
            <param name="position">The location to spawn the grenade.</param>
            <param name="owner">Optional: The <see cref="T:Exiled.API.Features.Player"/> owner of the grenade.</param>
            <returns>Spawned <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile">grenade</see>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp2176.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Scp2176"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Scp2176"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp2176.ToString">
            <summary>
            Returns the ExplosiveGrenade in a human readable format.
            </summary>
            <returns>A string containing ExplosiveGrenade-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Scp244">
            <summary>
            A wrapper class for SCP-244.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.#ctor(InventorySystem.Items.Usables.Scp244.Scp244Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp244"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp244"/> class, as well as a new SCP-244 item.
            </summary>
            <param name="scp244Type">The type of SCP-244, either <see cref="F:ItemType.SCP244a"/> or <see cref="F:ItemType.SCP244b"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp244.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp244.Primed">
            <summary>
            Gets or sets a value indicating whether or not SCP-244 will spawn primed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp244.Health">
            <summary>
            Gets or sets the Scp244's remaining health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp244.ActivationDot">
            <summary>
            Gets or sets the activation angle, where 1 is the minimum and -1 is the maximum activation angle.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp244.MaxDiameter">
            <summary>
            Gets or sets the maximum diameter within which SCP-244's hypothermia effect is dealt.
            </summary>
            <remarks>This does not prevent visual effects.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.CreatePickup(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Creates the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> that based on this <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <param name="position">The location to spawn the item.</param>
            <param name="rotation">The rotation of the item.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> should be initially spawned.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Scp244"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Scp244"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.ToString">
            <summary>
            Returns the SCP-244 in a human readable format.
            </summary>
            <returns>A string containing SCP-244 related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp244.ReadPickupInfo(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Items.CandyAddStatus">
            <summary>
            Candy enumeration status.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.CandyAddStatus.NoCandyAdded">
            <summary>
            If no candy was able to be added.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.CandyAddStatus.SomeCandyAdded">
            <summary>
            If at least one candy was added.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Items.CandyAddStatus.AllCandyAdded">
            <summary>
            If all candies provided were added.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Items.Scp330">
            <summary>
            A wrapper class for SCP-330 bags.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.#ctor(InventorySystem.Items.Usables.Scp330.Scp330Bag)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp330"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Scp330"/> class, as well as a new SCP-330 bag item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp330.AvailableCandies">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.Dictionary`2"/> with all presented in game candies.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp330.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Bag"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp330.Candies">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/>s held in this bag.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Scp330.ExposedType">
            <summary>
            Gets or sets the exposed type. When set to a candy color, the bag will appear as that candy when dropped with the <see cref="N:Exiled.API.Features.Spawn"/> method. Setting it to <see cref="F:InventorySystem.Items.Usables.Scp330.CandyKindID.None"/> results in it looking like a bag.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.AddCandy(InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Adds a specific candy to the bag.
            </summary>
            <param name="type">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> to add.</param>
            <returns><see langword="true"/> if the candy was successfully added to the bag; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.AddCandy(System.Collections.Generic.IEnumerable{InventorySystem.Items.Usables.Scp330.CandyKindID},Exiled.API.Features.Items.CandyAddStatus@)">
            <summary>
            Adds a collection of candy's to a bag.
            </summary>
            <param name="candies">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/>'s to add.</param>
            <param name="status">The <see cref="T:Exiled.API.Features.Items.CandyAddStatus"/>'s insertion status.</param>
            <returns> based on number of candy added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.RemoveCandy(InventorySystem.Items.Usables.Scp330.CandyKindID,System.Boolean)">
            <summary>
            Removes a specific candy from the bag.
            </summary>
            <param name="type">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> to be removed.</param>
            <param name="removeAll">Whether or not to only remove all matching candy. (If <see langword="true"/>, all candies of the given type are removed).</param>
            <returns>The total amount of candies that were removed from the bag.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.RemoveAllCandy">
            <summary>
            Removes all candy from the bag.
            </summary>
            <returns>The total amount of candies that were removed from the bag.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.DropCandy(InventorySystem.Items.Usables.Scp330.CandyKindID,System.Boolean,System.Boolean,InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Drops candies from the bag.
            </summary>
            <param name="type">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> of candies to drop.</param>
            <param name="dropAll">Whether or not to drop all candies matching the given type, or just one.</param>
            <param name="dropIndividual">Whether or not to drop all candies individually, or as a bag, when dropping more than one candy.</param>
            <param name="exposedType">The <see cref="P:Exiled.API.Features.Items.Scp330.ExposedType"/> to use, if the override is set to true.</param>
            <returns>a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/>s generated by this method. *Can be empty!*.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.CreatePickup(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Creates the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> that based on this <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> location to spawn it.</param>
            <param name="rotation">The <see cref="T:UnityEngine.Quaternion"/> rotation to give the item.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Pickups.Scp330Pickup"/> should be initially spawned.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Scp330"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Scp330"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.ToString">
            <summary>
            Returns the SCP-330 in a human readable format.
            </summary>
            <returns>A string containing SCP-330 related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Scp330.ChangeOwner(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Scp330"/> object.
            </summary>
            <param name="oldOwner">old <see cref="T:Exiled.API.Features.Items.Item"/> owner.</param>
            <param name="newOwner">new <see cref="T:Exiled.API.Features.Items.Item"/> owner.</param>
        </member>
        <member name="T:Exiled.API.Features.Items.Throwable">
            <summary>
            A wrapper class for throwable items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Throwable"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.#ctor(ItemType,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Throwable"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the throwable item.</param>
            <param name="player">The owner of the throwable item. Leave <see langword="null"/> for no owner.</param>
            <remarks>The player parameter will always need to be defined if this throwable is custom using Exiled.CustomItems.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Items.Throwable.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrowableItem"/> base for this item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Throwable.Projectile">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> to change grenade properties.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Throwable.PinPullTime">
            <summary>
            Gets or sets the amount of time it takes to pull the pin.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Throwable.Repickable">
            <summary>
            Gets or sets a value indicating whether players can pickup grenade after throw.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.Throw(System.Boolean)">
            <summary>
            Throws the item.
            </summary>
            <param name="fullForce">Whether to use full or weak force.</param>
            this.ServerThrow(projectileSettings.StartVelocity, projectileSettings.UpwardsFactor, projectileSettings.StartTorque, startVel);
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.Clone">
            <summary>
            Clones current <see cref="T:Exiled.API.Features.Items.Throwable"/> object.
            </summary>
            <returns> New <see cref="T:Exiled.API.Features.Items.Throwable"/> object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Throwable.ToString">
            <summary>
            Returns the Throwable in a human readable format.
            </summary>
            <returns>A string containing Throwable-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Items.Usable">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Usables.UsableItem"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Usable.#ctor(InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Usable"/> class.
            </summary>
            <param name="itemBase">The base <see cref="T:InventorySystem.Items.Usables.UsableItem"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Items.Usable.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Items.Usable"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the usable item.</param>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.UsableItem"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.Equippable">
            <summary>
            Gets a value indicating whether this item is equippable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.Holsterable">
            <summary>
            Gets a value indicating whether this item is holsterable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.Weight">
            <summary>
            Gets or sets the weight of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.IsUsing">
            <summary>
            Gets a value indicating whether the item is currently being used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.UseTime">
            <summary>
            Gets or sets how long it takes to use the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.MaxCancellableTime">
            <summary>
            Gets or sets how long after using starts a player has to cancel using the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.RemainingCooldown">
            <summary>
            Gets or sets the cooldown between repeated uses of this item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Items.Usable.PlayerGetCooldown">
            <summary>
            Gets all the cooldown between uses of this item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Items.Usable.CreatePickup(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean)">
            <summary>
            Creates the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> that based on this <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
            <param name="position">The location to spawn the item.</param>
            <param name="rotation">The rotation of the item.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> should be initially spawned.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Items.Usable.Use">
            <summary>
            Uses the item.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Exiled.API.Features.Items.Item.Owner"/> of the item cannot be <see langword="null"/>.</exception>
        </member>
        <member name="M:Exiled.API.Features.Items.Usable.ReadPickupInfo(Exiled.API.Features.Pickups.Pickup)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Lift">
            <summary>
            The in-game lift.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Lift.ElevatorChamberToLift">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:Interactables.Interobjects.ElevatorChamber"/>s and their corresponding <see cref="T:Exiled.API.Features.Lift"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Lift.internalDoorsList">
            <summary>
            Internal list that contains all ElevatorDoor for current group.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Lift.#ctor(Interactables.Interobjects.ElevatorChamber)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Lift"/> class.
            </summary>
            <param name="elevator">The <see cref="T:Interactables.Interobjects.ElevatorChamber"/> to wrap.</param>
        </member>
        <member name="M:Exiled.API.Features.Lift.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.API.Features.Lift"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Lift"/> which contains all the <see cref="T:Exiled.API.Features.Lift"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Random">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Lift"/>.
            </summary>
            <returns><see cref="T:Exiled.API.Features.Lift"/> object.</returns>
        </member>
        <member name="P:Exiled.API.Features.Lift.Base">
            <summary>
            Gets the base <see cref="T:Interactables.Interobjects.ElevatorChamber"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Doors">
            <summary>
            Gets a value of the internal doors list.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Players">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Name">
            <summary>
            Gets the lift's name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the lift.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Transform">
            <summary>
            Gets the lift's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Position">
            <summary>
            Gets or sets the lift's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Rotation">
            <summary>
            Gets or sets the lift's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Status">
            <summary>
            Gets or sets the lift's <see cref="T:Interactables.Interobjects.ElevatorChamber"/> status.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Bounds">
            <summary>
            Gets the <see cref="T:UnityEngine.Bounds"/> representing the space inside the lift.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Type">
            <summary>
            Gets the lift's <see cref="T:Exiled.API.Enums.ElevatorType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.Group">
            <summary>
            Gets the <see cref="T:Interactables.Interobjects.ElevatorManager.ElevatorGroup"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.IsOperative">
            <summary>
            Gets a value indicating whether the lift is operative.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.IsMoving">
            <summary>
            Gets a value indicating whether the lift is currently moving.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.IsLocked">
            <summary>
            Gets a value indicating whether the lift is locked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.AnimationTime">
            <summary>
            Gets or sets the <see cref="P:Exiled.API.Features.Lift.AnimationTime"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.RotationTime">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Lift.RotationTime"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.DoorOpenTime">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Lift.DoorOpenTime"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.DoorCloseTime">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Lift.DoorCloseTime"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.MoveTime">
            <summary>
            Gets the total <see cref="P:Exiled.API.Features.Lift.MoveTime"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.CurrentLevel">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Lift.CurrentLevel"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Lift.CurrentDestination">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Lift.CurrentDestination"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(Interactables.Interobjects.ElevatorChamber.ElevatorSequence)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Lift"/> which contains all the <see cref="T:Exiled.API.Features.Lift"/> instances from the specified <see cref="P:Exiled.API.Features.Lift.Status"/>.
            </summary>
            <param name="status">The specified <see cref="T:Interactables.Interobjects.ElevatorChamber"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(Interactables.Interobjects.ElevatorChamber)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> belonging to the <see cref="T:Interactables.Interobjects.ElevatorChamber"/>, if any.
            </summary>
            <param name="elevator">The <see cref="T:Interactables.Interobjects.ElevatorChamber"/> instance.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(Exiled.API.Enums.ElevatorType)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> corresponding to the specified <see cref="T:Exiled.API.Enums.ElevatorType"/>, if any.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.ElevatorType"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(System.String)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> corresponding to the specified name, if any.
            </summary>
            <param name="name">The lift's name.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(UnityEngine.GameObject)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> belonging to the <see cref="T:UnityEngine.GameObject"/>, if any.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(UnityEngine.Vector3)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Lift"/> belonging to the <see cref="T:UnityEngine.Vector3"/>, if any.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Lift"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.Get(System.Func{Exiled.API.Features.Lift,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Lift"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Lift"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.TryMeltPlayer(Exiled.API.Features.Player)">
            <summary>
            Tries to melt a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to melt.</param>
            <returns><see langword="true"/> if the player was melted successfully; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Exiled.API.Features.Player.EnableEffect(Exiled.API.Enums.EffectType,System.Single,System.Boolean)"/>
        </member>
        <member name="M:Exiled.API.Features.Lift.TryStart(System.Int32,System.Boolean)">
            <summary>
            Tries to start the lift.
            </summary>
            <param name="level">The destination level.</param>
            <param name="isForced">Indicates whether the start will be forced or not.</param>
            <returns><see langword="true"/> if the lift was started successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.ChangeLock(Interactables.Interobjects.DoorUtils.DoorLockReason)">
            <summary>
            Changes lock of the lift.
            </summary>
            <param name="lockReason">Type of lift lockdown.</param>
        </member>
        <member name="M:Exiled.API.Features.Lift.IsInElevator(UnityEngine.Vector3)">
            <summary>
            Returns whether or not the provided <see cref="T:UnityEngine.Vector3">position</see> is inside the lift.
            </summary>
            <param name="point">The position.</param>
            <returns><see langword="true"/> if the point is inside the elevator. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Lift.ToString">
            <summary>
            Returns the Lift in a human-readable format.
            </summary>
            <returns>A string containing Lift-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Log">
            <summary>
            A set of tools to print messages to the server console.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Log.DebugEnabled">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.HashSet`1"/> of plugin assemblies that have debug logs enabled.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Log.Info(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Info"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Info(System.String)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Info"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Debug(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Debug"/> level messages to the game console.
            Server must have exiled_debug config enabled.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.DebugObject``1(``0)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Debug"/> level messages to the game console.
            Server must have exiled_debug config enabled.
            </summary>
            <typeparam name="T">The inputted object's type.</typeparam>
            <param name="object">The object to be logged and returned.</param>
            <returns>Returns the <typeparamref name="T"/> object inputted in <paramref name="object"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Log.Debug(System.String)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Debug"/> level messages to the game console.
            Server must have exiled_debug config enabled.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Warn(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Warn"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Warn(System.String)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Warn"/> level messages to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Error(System.Object)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Error"/> level messages to the game console.
            This should be used to send errors only.
            It's recommended to send any messages in the catch block of a try/catch as errors with the exception string.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Error(System.String)">
            <summary>
            Sends a <see cref="F:Discord.LogLevel.Error"/> level messages to the game console.
            This should be used to send errors only.
            It's recommended to send any messages in the catch block of a try/catch as errors with the exception string.
            </summary>
            <param name="message">The message to be sent.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Send(System.Object,Discord.LogLevel,System.ConsoleColor)">
            <summary>
            Sends a log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="level">The message level of importance.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Send(System.String,Discord.LogLevel,System.ConsoleColor)">
            <summary>
            Sends a log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="level">The message level of importance.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.SendRaw(System.Object,System.ConsoleColor)">
            <summary>
            Sends a raw log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The <see cref="T:System.ConsoleColor"/> of the message.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.SendRaw(System.String,System.ConsoleColor)">
            <summary>
            Sends a raw log message to the game console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The <see cref="T:System.ConsoleColor"/> of the message.</param>
        </member>
        <member name="M:Exiled.API.Features.Log.Assert(System.Boolean,System.Object)">
            <summary>
            Sends an <see cref="M:Exiled.API.Features.Log.Error(System.Object)"/> with the provided message if the condition is false and stops the execution.
            <example> For example:
            <code>
            Player ply = Player.Get(2);
            Log.Assert(ply is not null, "The player with the id 2 is null");
            </code>
            results in it logging an error if the player is null and not continuing.
            </example>
            </summary>
            <param name="condition">The conditional expression to evaluate. If the condition is true it will continue.</param>
            <param name="message">The information message. The error and exception will show this message.</param>
            <exception cref="T:System.Exception">If the condition is false. It throws an exception stopping the execution.</exception>
        </member>
        <member name="T:Exiled.API.Features.Map">
            <summary>
            A set of tools to easily handle the in-game map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.LockersValue">
            <summary>
            A list of <see cref="T:MapGeneration.Distributors.Locker"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.TeleportsValue">
            <summary>
            A list of <see cref="T:PocketDimensionTeleport"/>s on the map.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Map.ToysValue">
            <summary>
            A list of <see cref="T:Exiled.API.Features.Toys.AdminToy"/>s on the map.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.TantrumPrefab">
            <summary>
            Gets the tantrum prefab.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.AmnesticCloudPrefab">
            <summary>
            Gets the amnestic cloud prefab.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.IsLczDecontaminated">
            <summary>
            Gets a value indicating whether decontamination has begun in the light containment zone.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.DecontaminationState">
            <summary>
            Gets a value indicating whether decontamination phase is in the light containment zone.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.PocketDimensionTeleports">
            <summary>
            Gets all <see cref="T:PocketDimensionTeleport"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Lockers">
            <summary>
            Gets all <see cref="T:MapGeneration.Distributors.Locker"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Toys">
            <summary>
            Gets all <see cref="T:Exiled.API.Features.Toys.AdminToy"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.Seed">
            <summary>
            Gets or sets the current seed of the map.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Map.AmbientSoundPlayer">
            <summary>
            Gets the <see cref="T:AmbientSoundPlayer"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.Broadcast(Exiled.API.Features.Broadcast,System.Boolean)">
            <summary>
            Broadcasts a message to all <see cref="T:Exiled.API.Features.Player">players</see>.
            </summary>
            <param name="broadcast">The <see cref="T:Exiled.API.Features.Broadcast"/> to be broadcasted.</param>
            <param name="shouldClearPrevious">Clears all players' broadcasts before sending the new one.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags,System.Boolean)">
            <summary>
            Broadcasts a message to all <see cref="T:Exiled.API.Features.Player">players</see>.
            </summary>
            <param name="duration">The duration in seconds.</param>
            <param name="message">The message that will be broadcast (supports Unity Rich Text formatting).</param>
            <param name="type">The broadcast type.</param>
            <param name="shouldClearPrevious">Clears all players' broadcasts before sending the new one.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ShowHint(System.String,System.Single)">
            <summary>
            Shows a hint to all <see cref="T:Exiled.API.Features.Player">players</see>.
            </summary>
            <param name="message">The message that will be broadcasted (supports Unity Rich Text formatting).</param>
            <param name="duration">The duration in seconds.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ClearBroadcasts">
            <summary>
            Clears all <see cref="T:Exiled.API.Features.Player">players</see>' broadcasts.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.StartDecontamination">
            <summary>
            Starts the light containment zone decontamination process.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,Exiled.API.Enums.ZoneType)">
            <summary>
            Turns off all lights in the facility.
            </summary>
            <param name="duration">The duration of the blackout.</param>
            <param name="zoneTypes">The <see cref="T:Exiled.API.Enums.ZoneType"/>s to affect.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})">
            <summary>
            Turns off all lights in the facility.
            </summary>
            <param name="duration">The duration of the blackout.</param>
            <param name="zoneTypes">The <see cref="T:Exiled.API.Enums.ZoneType"/>s to affect.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ChangeLightsColor(UnityEngine.Color)">
            <summary>
            Changes the <see cref="T:UnityEngine.Color"/> of all lights in the facility.
            </summary>
            <param name="color">The new <see cref="T:UnityEngine.Color"/> of the lights.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ResetLightsColor">
            <summary>
            Resets the <see cref="T:UnityEngine.Color">color</see> of all lights in the facility.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.GetRandomLocker">
            <summary>
            Gets a random <see cref="T:MapGeneration.Distributors.Locker"/>.
            </summary>
            <returns><see cref="T:MapGeneration.Distributors.Locker"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.GetRandomPickup(ItemType)">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
            <param name="type">Filters by <see cref="T:ItemType"/>.</param>
            <returns><see cref="T:Exiled.API.Features.Pickups.Pickup"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.PlayAmbientSound">
            <summary>
            Plays a random ambient sound.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.PlayAmbientSound(System.Int32)">
            <summary>
            Plays an ambient sound.
            </summary>
            <param name="id">The id of the sound to play.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.PlaceTantrum(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Places a Tantrum (SCP-173's ability) in the indicated position.
            </summary>
            <param name="position">The position where you want to spawn the Tantrum.</param>
            <param name="isActive">Whether or not the tantrum will apply the <see cref="F:Exiled.API.Enums.EffectType.Stained"/> effect.</param>
            <remarks>If <paramref name="isActive"/> is <see langword="true"/>, the tantrum is moved slightly up from its original position. Otherwise, the collision will not be detected and the slowness will not work.</remarks>
            <returns>The <see cref="T:Exiled.API.Features.Hazards.TantrumHazard"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.CleanAllItems">
            <summary>
            Destroy all <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> objects.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.CleanAllItems(System.Collections.Generic.IEnumerable{Exiled.API.Features.Pickups.Pickup})">
            <summary>
            Destroy all the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> objects from the specified list.
            </summary>
            <param name="pickups">The List of pickups to destroy.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.CleanAllRagdolls">
            <summary>
            Destroy all <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/> objects.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Map.CleanAllRagdolls(System.Collections.Generic.IEnumerable{Exiled.API.Features.Ragdoll})">
            <summary>
            Destroy all <see cref="T:Exiled.API.Features.Ragdoll"/> objects from the specified list.
            </summary>
            <param name="ragDolls">The List of RagDolls to destroy.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.PlaceBlood(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Places a blood decal.
            </summary>
            <param name="position">The position of the blood decal.</param>
            <param name="direction">The direction of the blood decal.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.GetNearCameras(UnityEngine.Vector3,System.Single)">
            <summary>
            Gets all the near cameras.
            </summary>
            <param name="position">The position from which starting to search cameras.</param>
            <param name="toleration">The maximum toleration to define the radius from which get the cameras.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Camera"/> which contains all the found cameras.</returns>
        </member>
        <member name="M:Exiled.API.Features.Map.Explode(UnityEngine.Vector3,Exiled.API.Enums.ProjectileType,Exiled.API.Features.Player)">
            <summary>
            Explode.
            </summary>
            <param name="position">The position where explosion will be created.</param>
            <param name="projectileType">The projectile that will create the explosion.</param>
            <param name="attacker">The player who create the explosion.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ExplodeEffect(UnityEngine.Vector3,Exiled.API.Enums.ProjectileType)">
            <summary>
            Spawn projectile effect.
            </summary>
            <param name="position">The position where effect will be created.</param>
            <param name="projectileType">The projectile that will create the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Map.ClearCache">
            <summary>
            Clears the lazy loading game object cache.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Npc">
            <summary>
            Wrapper class for handling NPC players.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Npc.#ctor(ReferenceHub)">
            <inheritdoc cref="T:Exiled.API.Features.Player" />
        </member>
        <member name="M:Exiled.API.Features.Npc.#ctor(UnityEngine.GameObject)">
            <inheritdoc cref="T:Exiled.API.Features.Player" />
        </member>
        <member name="P:Exiled.API.Features.Npc.List">
            <summary>
            Gets a list of Npcs.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(ReferenceHub)">
            <summary>
            Retrieves the NPC associated with the specified ReferenceHub.
            </summary>
            <param name="rHub">The ReferenceHub to retrieve the NPC for.</param>
            <returns>The NPC associated with the ReferenceHub, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(UnityEngine.GameObject)">
            <summary>
            Retrieves the NPC associated with the specified GameObject.
            </summary>
            <param name="gameObject">The GameObject to retrieve the NPC for.</param>
            <returns>The NPC associated with the GameObject, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(System.String)">
            <summary>
            Retrieves the NPC associated with the specified user ID.
            </summary>
            <param name="userId">The user ID to retrieve the NPC for.</param>
            <returns>The NPC associated with the user ID, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(System.Int32)">
            <summary>
            Retrieves the NPC associated with the specified ID.
            </summary>
            <param name="id">The ID to retrieve the NPC for.</param>
            <returns>The NPC associated with the ID, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(CommandSystem.ICommandSender)">
            <summary>
            Retrieves the NPC associated with the specified ICommandSender.
            </summary>
            <param name="sender">The ICommandSender to retrieve the NPC for.</param>
            <returns>The NPC associated with the ICommandSender, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(Footprinting.Footprint)">
            <summary>
            Retrieves the NPC associated with the specified Footprint.
            </summary>
            <param name="footprint">The Footprint to retrieve the NPC for.</param>
            <returns>The NPC associated with the Footprint, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(CommandSender)">
            <summary>
            Retrieves the NPC associated with the specified CommandSender.
            </summary>
            <param name="sender">The CommandSender to retrieve the NPC for.</param>
            <returns>The NPC associated with the CommandSender, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(UnityEngine.Collider)">
            <summary>
            Retrieves the NPC associated with the specified Collider.
            </summary>
            <param name="collider">The Collider to retrieve the NPC for.</param>
            <returns>The NPC associated with the Collider, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(System.UInt32)">
            <summary>
            Retrieves the NPC associated with the specified net ID.
            </summary>
            <param name="netId">The net ID to retrieve the NPC for.</param>
            <returns>The NPC associated with the net ID, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Get(Mirror.NetworkConnection)">
            <summary>
            Retrieves the NPC associated with the specified NetworkConnection.
            </summary>
            <param name="conn">The NetworkConnection to retrieve the NPC for.</param>
            <returns>The NPC associated with the NetworkConnection, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Spawn(System.String,PlayerRoles.RoleTypeId,System.Int32,System.String,System.Nullable{UnityEngine.Vector3})">
            <summary>
            Spawns an NPC based on the given parameters.
            </summary>
            <param name="name">The name of the NPC.</param>
            <param name="role">The RoleTypeId of the NPC.</param>
            <param name="id">The player ID of the NPC.</param>
            <param name="userId">The userID of the NPC.</param>
            <param name="position">The position to spawn the NPC.</param>
            <returns>The <see cref="T:Exiled.API.Features.Npc"/> spawned.</returns>
        </member>
        <member name="M:Exiled.API.Features.Npc.Destroy">
            <summary>
            Destroys the NPC.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Paths">
            <summary>
            A set of useful paths.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.AppData">
            <summary>
            Gets AppData path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.ManagedAssemblies">
            <summary>
            Gets managed assemblies directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.ServerConfig">
            <summary>
            Gets the server's config path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Exiled">
            <summary>
            Gets or sets exiled directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Plugins">
            <summary>
            Gets or sets plugins path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Dependencies">
            <summary>
            Gets or sets Dependencies directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Configs">
            <summary>
            Gets or sets the configuration folder path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.IndividualConfigs">
            <summary>
            Gets or sets individual configs directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.LoaderConfig">
            <summary>
            Gets or sets the loader configuration file path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Config">
            <summary>
            Gets or sets the configuration file path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.BackupConfig">
            <summary>
            Gets or sets the backup configs path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Translations">
            <summary>
            Gets or sets translations path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.IndividualTranslations">
            <summary>
            Gets or sets individual translations directory path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.BackupTranslations">
            <summary>
            Gets or sets backup translations path.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Paths.Log">
            <summary>
            Gets or sets logs path.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Paths.Reload(System.String)">
            <summary>
            Reloads all paths.
            </summary>
            <param name="rootDirectory">The new root directory.</param>
        </member>
        <member name="M:Exiled.API.Features.Paths.GetConfigPath(System.String)">
            <summary>
            Gets the config path of a plugin.
            </summary>
            <param name="pluginPrefix">The prefix of the plugin.</param>
            <returns>The config path of the plugin.</returns>
        </member>
        <member name="M:Exiled.API.Features.Paths.GetTranslationPath(System.String)">
            <summary>
            Gets the translation path of a plugin.
            </summary>
            <param name="pluginPrefix">The prefix of the plugin.</param>
            <returns>The translation path of the plugin.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.AmmoPickup">
            <summary>
            A wrapper class for an Ammo pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.AmmoPickup.#ctor(InventorySystem.Items.Firearms.Ammo.AmmoPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.AmmoPickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoPickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.AmmoPickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.AmmoPickup"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.AmmoPickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Firearms.Ammo.AmmoPickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.AmmoPickup.MaxDisplayedAmmo">
            <summary>
            Gets the max ammo.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.AmmoPickup.AmmoType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.AmmoType"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.AmmoPickup.Ammo">
            <summary>
            Gets or Sets the number of ammo.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.AmmoPickup.ToString">
            <summary>
            Returns the AmmoPickup in a human readable format.
            </summary>
            <returns>A string containing AmmoPickup related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.BodyArmorPickup">
            <summary>
            A wrapper class for a Body Armor pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.BodyArmorPickup.#ctor(InventorySystem.Items.Armor.BodyArmorPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.BodyArmorPickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Armor.BodyArmorPickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.BodyArmorPickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.BodyArmorPickup"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Armor.BodyArmorPickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.Equippable">
            <summary>
            Gets a value indicating whether this item is equippable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.Holsterable">
            <summary>
            Gets a value indicating whether this item is holsterable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.IsWorn">
            <summary>
            Gets a value indicating whether or not this is a worn item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.RemoveExcessOnDrop">
            <summary>
            Gets or sets a value indicating whether or not excess ammo should be removed when the armor is dropped.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.HelmetEfficacy">
            <summary>
            Gets or sets how strong the helmet on the armor is.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.VestEfficacy">
            <summary>
            Gets or sets how strong the vest on the armor is.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.StaminaUseMultiplier">
            <summary>
            Gets or sets how much faster stamina will drain when wearing this armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.MovementSpeedMultiplier">
            <summary>
            Gets how much the users movement speed should be affected when wearing this armor. (higher values = slower movement).
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.AmmoLimits">
            <summary>
            Gets or sets the ammo limit of the wearer when using this armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.BodyArmorPickup.CategoryLimits">
            <summary>
            Gets or sets the item caterory limit of the wearer when using this armor.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.BodyArmorPickup.ToString">
            <summary>
            Returns the BodyArmorPickup in a human readable format.
            </summary>
            <returns>A string containing BodyArmorPickup related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.BodyArmorPickup.ReadItemInfo(Exiled.API.Features.Items.Item)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.BodyArmorPickup.InitializeProperties(InventorySystem.Items.ItemBase)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Pickups.ExplosiveGrenadePickup">
            <summary>
            A wrapper class for dropped Explosive Pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.#ctor(InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.ExplosiveGrenadePickup"/> class.
            </summary>
            <param name="pickupBase">.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.ExplosiveGrenadePickup"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.MaxRadius">
            <summary>
            Gets or sets the maximum radius of the grenade.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.ScpDamageMultiplier">
            <summary>
            Gets or sets the multiplier for damage against <see cref="F:Exiled.API.Enums.Side.Scp"/> players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.BurnDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Burned"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.DeafenDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Deafened"/> effect will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.ConcussDuration">
            <summary>
            Gets or sets how long the <see cref="F:Exiled.API.Enums.EffectType.Concussed"/> effect will last.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.ReadItemInfo(Exiled.API.Features.Items.Item)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.WriteProjectileInfo(Exiled.API.Features.Pickups.Projectiles.Projectile)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.ExplosiveGrenadePickup.InitializeProperties(InventorySystem.Items.ItemBase)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Pickups.FirearmPickup">
            <summary>
            A wrapper class for a Firearm pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.FirearmPickup.#ctor(InventorySystem.Items.Firearms.FirearmPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.FirearmPickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Firearms.FirearmPickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.FirearmPickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.FirearmPickup"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FirearmPickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Firearms.FirearmPickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FirearmPickup.IsDistributed">
            <summary>
            Gets or sets a value indicating whether the pickup is already distributed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FirearmPickup.Status">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Firearms.FirearmStatus"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FirearmPickup.Ammo">
            <summary>
            Gets or sets a value indicating how many ammo have this <see cref="T:Exiled.API.Features.Pickups.FirearmPickup"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FirearmPickup.Flags">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Firearms.FirearmStatusFlags"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FirearmPickup.Attachments">
            <summary>
            Gets or sets a value indicating whether the attachment code have this <see cref="T:Exiled.API.Features.Pickups.FirearmPickup"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.FirearmPickup.ToString">
            <summary>
            Returns the FirearmPickup in a human readable format.
            </summary>
            <returns>A string containing FirearmPickup related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.FlashGrenadePickup">
            <summary>
            A wrapper class for dropped Flashbang Pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.FlashGrenadePickup.#ctor(InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.FlashGrenadePickup"/> class.
            </summary>
            <param name="pickupBase">.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.FlashGrenadePickup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.FlashGrenadePickup"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FlashGrenadePickup.MinimalDurationEffect">
            <summary>
            Gets or sets the minimum duration of player can take the effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FlashGrenadePickup.AdditionalBlindedEffect">
            <summary>
            Gets or sets the additional duration of the <see cref="F:Exiled.API.Enums.EffectType.Blinded"/> effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.FlashGrenadePickup.SurfaceDistanceIntensifier">
            <summary>
            Gets or sets the how mush the flash grenade going to be intensified when explode at <see cref="F:Exiled.API.Enums.RoomType.Surface"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.FlashGrenadePickup.ReadItemInfo(Exiled.API.Features.Items.Item)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.FlashGrenadePickup.WriteProjectileInfo(Exiled.API.Features.Pickups.Projectiles.Projectile)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.FlashGrenadePickup.InitializeProperties(InventorySystem.Items.ItemBase)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Pickups.GrenadePickup">
            <summary>
            A wrapper class for a high explosive grenade pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.GrenadePickup.#ctor(InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.GrenadePickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.GrenadePickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.GrenadePickup"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.GrenadePickup.FuseTime">
            <summary>
            Gets or sets how long the fuse will last.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.GrenadePickup.ProjectileType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ProjectileType"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.GrenadePickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.GrenadePickup.Explode">
            <summary>
            Trigger the grenade to make it Explode.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.GrenadePickup.Explode(Footprinting.Footprint)">
            <summary>
            Trigger the grenade to make it Explode.
            </summary>
            <param name="attacker">The <see cref="T:Footprinting.Footprint"/> of the explosion.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.GrenadePickup.WriteProjectileInfo(Exiled.API.Features.Pickups.Projectiles.Projectile)">
            <summary>
            Helper method for saving data between projectiles and pickups.
            </summary>
            <param name="projectile"><see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>-related data to write to.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.GrenadePickup.InitializeProperties(InventorySystem.Items.ItemBase)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Pickups.JailbirdPickup">
            <summary>
            A wrapper class for a jailbird pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.JailbirdPickup.#ctor(InventorySystem.Items.Jailbird.JailbirdPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.JailbirdPickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Jailbird.JailbirdPickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.JailbirdPickup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.JailbirdPickup"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.JailbirdPickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Jailbird.JailbirdPickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.JailbirdPickup.MeleeDamage">
            <summary>
            Gets or sets the amount of damage dealt with a Jailbird melee hit.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.JailbirdPickup.ChargeDamage">
            <summary>
            Gets or sets the amount of damage dealt with a Jailbird charge hit.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.JailbirdPickup.FlashDuration">
            <summary>
            Gets or sets the amount of time in seconds that the <see cref="T:CustomPlayerEffects.Flashed"/> effect will be applied on being hit.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.JailbirdPickup.Radius">
            <summary>
            Gets or sets the radius of the Jailbird's hit register.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.JailbirdPickup.TotalDamageDealt">
            <summary>
            Gets or sets the total amount of damage dealt with the Jailbird.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.JailbirdPickup.TotalCharges">
            <summary>
            Gets or sets the number of times the item has been charged and used.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.JailbirdPickup.WearState">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Jailbird.JailbirdWearState"/> of the item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.JailbirdPickup.ToString">
            <summary>
            Returns the jailbird in a human readable format.
            </summary>
            <returns>A string containing jailbird related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.JailbirdPickup.ReadItemInfo(Exiled.API.Features.Items.Item)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.JailbirdPickup.InitializeProperties(InventorySystem.Items.ItemBase)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Pickups.KeycardPickup">
            <summary>
            A wrapper class for a Keycard pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.KeycardPickup.#ctor(InventorySystem.Items.Keycards.KeycardPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.KeycardPickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Keycards.KeycardPickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.KeycardPickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.KeycardPickup"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.KeycardPickup.Permissions">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Enums.KeycardPermissions"/> of the keycard.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.KeycardPickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Keycards.KeycardPickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.KeycardPickup.ReadItemInfo(Exiled.API.Features.Items.Item)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.KeycardPickup.InitializeProperties(InventorySystem.Items.ItemBase)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Pickups.MicroHIDPickup">
            <summary>
            A wrapper class for a MicroHID pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.MicroHIDPickup.#ctor(InventorySystem.Items.MicroHID.MicroHIDPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.MicroHIDPickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.MicroHIDPickup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.MicroHIDPickup"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.MicroHIDPickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.MicroHID.MicroHIDPickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.MicroHIDPickup.Energy">
            <summary>
            Gets or sets the MicroHID Energy Level.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.MicroHIDPickup.ToString">
            <summary>
            Returns the MicroHIDPickup in a human readable format.
            </summary>
            <returns>A string containing MicroHIDPickup related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Pickup">
            <summary>
            A wrapper class for <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Pickups.Pickup.BaseToPickup">
            <summary>
            A dictionary of all <see cref="T:InventorySystem.Items.ItemBase"/>'s that have been converted into <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> class.
            </summary>
            <remarks>
            Created only for <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> properly work.
            </remarks>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.#ctor(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> which contains all the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the Pickup.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Transform">
            <summary>
            Gets the <see cref="T:UnityEngine.Transform"/> of the Pickup.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Rigidbody">
            <summary>
            Gets the <see cref="T:UnityEngine.Rigidbody"/> of the Pickup.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Room">
            <summary>
            Gets the current <see cref="P:Exiled.API.Features.Pickups.Pickup.Room"/> the Pickup is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.PhysicsModule">
            <summary>
            Gets or sets the pickup's PhysicsModule.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Serial">
            <summary>
            Gets or sets the unique serial number for the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Scale">
            <summary>
            Gets or sets the pickup's scale value.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Weight">
            <summary>
            Gets or sets the weight of the item.
            </summary>
            <seealso cref="P:Exiled.API.Features.Pickups.Pickup.PickupTime"/>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.PickupTime">
            <summary>
            Gets or sets the amount of time it takes to pick up this item, based on <see cref="P:Exiled.API.Features.Pickups.Pickup.Weight"/>.
            </summary>
            <remarks>Notes: Changing this value will change the item's <see cref="P:Exiled.API.Features.Pickups.Pickup.Weight"/>. This does not account for status effects such as <see cref="F:Exiled.API.Enums.EffectType.Hypothermia"/>; see <see cref="M:Exiled.API.Features.Pickups.Pickup.PickupTimeForPlayer(Exiled.API.Features.Player)"/> to account for status effects.</remarks>
            <seealso cref="P:Exiled.API.Features.Pickups.Pickup.Weight"/>
            <seealso cref="M:Exiled.API.Features.Pickups.Pickup.PickupTimeForPlayer(Exiled.API.Features.Player)"/>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Base">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.ItemBase"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Type">
            <summary>
            Gets the <see cref="T:ItemType"/> of the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.IsLocked">
            <summary>
            Gets or sets a value indicating whether the pickup is locked (can't be picked up).
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Info">
            <summary>
            Gets or sets the pickup information.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.PreviousOwner">
            <summary>
            Gets or sets the previous owner of this item.
            </summary>
            <seealso cref="M:Exiled.API.Features.Pickups.Pickup.CreateAndSpawn(ItemType,UnityEngine.Vector3,UnityEngine.Quaternion,Exiled.API.Features.Player)"/>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.InUse">
            <summary>
            Gets or sets a value indicating whether the pickup is currently in use.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Position">
            <summary>
            Gets or sets the pickup position.
            </summary>
            <seealso cref="M:Exiled.API.Features.Pickups.Pickup.CreateAndSpawn(ItemType,UnityEngine.Vector3,UnityEngine.Quaternion,Exiled.API.Features.Player)"/>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.RelativePosition">
            <summary>
            Gets or sets the relative position of the pickup.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.Rotation">
            <summary>
            Gets or sets the pickup rotation.
            </summary>
            <seealso cref="M:Exiled.API.Features.Pickups.Pickup.CreateAndSpawn(ItemType,UnityEngine.Vector3,UnityEngine.Quaternion,Exiled.API.Features.Player)"/>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Pickup.IsSpawned">
            <summary>
            Gets a value indicating whether this pickup is spawned.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Gets an existing <see cref="T:Exiled.API.Features.Pickups.Pickup"/> or creates a new instance of one.
            </summary>
            <param name="pickupBase">The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> to convert into a <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> wrapper for the given <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get(System.UInt16)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> given a <see cref="P:Exiled.API.Features.Pickups.Pickup.Serial"/>.
            </summary>
            <param name="serial">The serial to look for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> given the specified serial.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get(UnityEngine.GameObject)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> given a <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to check.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> given the specified <see cref="T:UnityEngine.GameObject"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get(System.Collections.Generic.IEnumerable{InventorySystem.Items.Pickups.ItemPickupBase})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances given an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>.
            </summary>
            <param name="pickups">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> to convert into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get(ItemType)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances given an <see cref="T:ItemType"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> to look for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances.</returns>
            <seealso cref="M:Exiled.API.Features.Map.GetRandomPickup(ItemType)"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get(System.Collections.Generic.IEnumerable{UnityEngine.GameObject})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances given an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObjects">The <see cref="T:UnityEngine.GameObject"/>'s to check.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get``1(System.Collections.Generic.IEnumerable{InventorySystem.Items.Pickups.ItemPickupBase})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances given a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/>.
            </summary>
            <typeparam name="T">The type <typeparamref name="T"/> to cast the pickups to.</typeparam>
            <param name="pickups">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> to convert into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get``1(ItemType)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances given an <see cref="T:ItemType"/>.
            </summary>
            <typeparam name="T">The type <typeparamref name="T"/> to cast the pickups to.</typeparam>
            <param name="type">The <see cref="T:ItemType"/> to look for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
            <seealso cref="M:Exiled.API.Features.Map.GetRandomPickup(ItemType)"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Get``1(System.Collections.Generic.IEnumerable{UnityEngine.GameObject})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all existing <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> instances given a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <typeparam name="T">The type <typeparamref name="T"/> to cast the pickups to.</typeparam>
            <param name="gameObjects">The <see cref="T:UnityEngine.GameObject"/>'s to check.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> given the specified <see cref="T:UnityEngine.GameObject"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Create(ItemType)">
            <summary>
            Creates and returns a new <see cref="T:Exiled.API.Features.Pickups.Pickup"/> with the proper inherited subclass.
            <para>
            Based on the <paramref name="type"/>, the returned <see cref="T:Exiled.API.Features.Pickups.Pickup"/> can be cast into a subclass to gain more control over the object.
            <br />- All valid ammo should be cast to the <see cref="T:Exiled.API.Features.Pickups.AmmoPickup"/> class.
            <br />- All valid firearms (not including the Micro HID) should be cast to the <see cref="T:Exiled.API.Features.Pickups.FirearmPickup"/> class.
            <br />- All valid keycards should be cast to the <see cref="T:Exiled.API.Features.Pickups.KeycardPickup"/> class.
            <br />- All valid armor should be cast to the <see cref="T:Exiled.API.Features.Pickups.BodyArmorPickup"/> class.
            <br />- All grenades and throwables (not including SCP-018 and SCP-2176) should be cast to the <see cref="T:Exiled.API.Features.Pickups.GrenadePickup"/> class.
            </para>
            <para>
            <br />The following have their own respective classes:
            <br />- Radios can be cast to <see cref="T:Exiled.API.Features.Pickups.RadioPickup"/>.
            <br />- The Micro HID can be cast to <see cref="T:Exiled.API.Features.Pickups.MicroHIDPickup"/>.
            <br />- SCP-244 A and B variants can be cast to <see cref="T:Exiled.API.Features.Pickups.Scp244Pickup"/>.
            <br />- SCP-330 can be cast to <see cref="T:Exiled.API.Features.Pickups.Scp330Pickup"/>.
            <br />- SCP-018 can be cast to <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile"/>.
            <br />- SCP-2176 can be cast to <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile"/>.
            </para>
            <para>
            Items that are not listed above do not have a subclass, and can only use the base <see cref="T:Exiled.API.Features.Pickups.Pickup"/> class.
            </para>
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
            <seealso cref="M:Exiled.API.Features.Pickups.Projectiles.Projectile.Create(Exiled.API.Enums.ProjectileType)"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.CreateAndSpawn(ItemType,UnityEngine.Vector3,UnityEngine.Quaternion,Exiled.API.Features.Player)">
            <summary>
            Creates and spawns a <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
            <param name="position">The position to spawn the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> at.</param>
            <param name="rotation">The rotation to spawn the <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</param>
            <param name="previousOwner">An optional previous owner of the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/>. See documentation of <see cref="M:Exiled.API.Features.Pickups.Pickup.Create(ItemType)"/> for more information on casting.</returns>
            <seealso cref="M:Exiled.API.Features.Pickups.Projectiles.Projectile.CreateAndSpawn(Exiled.API.Enums.ProjectileType,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,Exiled.API.Features.Player)"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Spawn(Exiled.API.Features.Pickups.Pickup,UnityEngine.Vector3,UnityEngine.Quaternion,Exiled.API.Features.Player)">
            <summary>
            Spawns a <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> too spawn.</param>
            <param name="position">The position to spawn the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> at.</param>
            <param name="rotation">The rotation to spawn the <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</param>
            <param name="previousOwner">An optional previous owner of the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> Spawn.</returns>
            <seealso cref="M:Exiled.API.Features.Pickups.Projectiles.Projectile.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,Exiled.API.Features.Player)"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.PickupTimeForPlayer(Exiled.API.Features.Player)">
            <summary>
            Returns the amount of time it will take for the provided <paramref name="player"/> to pick up this item, based on <see cref="P:Exiled.API.Features.Pickups.Pickup.Weight"/> and active status effects.
            </summary>
            <param name="player">The player to check search time.</param>
            <exception cref="T:System.ArgumentNullException">player cannot be null.</exception>
            <returns>The amount of time it will take for the provided <paramref name="player"/> to pick up this item.</returns>
            <seealso cref="P:Exiled.API.Features.Pickups.Pickup.PickupTime"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Spawn">
            <summary>
            Spawns pickup on a server.
            </summary>
            <seealso cref="M:Exiled.API.Features.Pickups.Pickup.UnSpawn"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,Exiled.API.Features.Player)">
            <summary>
            Spawns pickup on a server.
            </summary>
            <param name="position">The position to spawn the <see cref="T:Exiled.API.Features.Pickups.Pickup"/> at.</param>
            <param name="rotation">The rotation to spawn the <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</param>
            <param name="previousOwner">An optional previous owner of the item.</param>
            <returns>The spawned <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
            <seealso cref="M:Exiled.API.Features.Pickups.Projectiles.Projectile.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,Exiled.API.Features.Player)"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.UnSpawn">
            <summary>
            Unspawns pickup on server.
            </summary>
            <seealso cref="M:Exiled.API.Features.Pickups.Pickup.Spawn"/>
            <seealso cref="M:Exiled.API.Features.Pickups.Pickup.Destroy"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Destroy">
            <summary>
            Destroys the already spawned pickup.
            </summary>
            <seealso cref="M:Exiled.API.Features.Pickups.Pickup.UnSpawn"/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.Clone">
            <summary>
            Clones the current pickup with a different serial.
            </summary>
            <returns> Cloned pickup object. </returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.ToString">
            <summary>
            Returns the Pickup in a human readable format.
            </summary>
            <returns>A string containing Pickup-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.ReadItemInfo(Exiled.API.Features.Items.Item)">
            <summary>
            Helper method for saving data between items and pickups.
            </summary>
            <param name="item"> <see cref="T:Exiled.API.Features.Items.Item"/>-related data to give to the <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Pickup.InitializeProperties(InventorySystem.Items.ItemBase)">
            <summary>
            initialize item properties.
            </summary>
            <param name="itemBase">target item.</param>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Projectiles.EffectGrenadeProjectile">
            <summary>
            A wrapper class for EffectGrenade.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.EffectGrenadeProjectile.#ctor(InventorySystem.Items.ThrowableProjectiles.EffectGrenade)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.EffectGrenadeProjectile"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.EffectGrenade"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.EffectGrenadeProjectile.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.EffectGrenadeProjectile"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.EffectGrenadeProjectile.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.EffectGrenade"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.EffectGrenadeProjectile.ToString">
            <summary>
            Returns the EffectGrenadePickup in a human readable format.
            </summary>
            <returns>A string containing EffectGrenadePickup-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile">
            <summary>
            A wrapper class for ExplosionGrenade.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.#ctor(InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.MaxRadius">
            <summary>
            Gets or sets the maximum radius of the ExplosionGrenade.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.MinimalDurationEffect">
            <summary>
            Gets or sets the minimum duration of player can take the effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.BurnDuration">
            <summary>
            Gets or sets the maximum duration of the <see cref="F:Exiled.API.Enums.EffectType.Burned"/> effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.DeafenDuration">
            <summary>
            Gets or sets the maximum duration of the <see cref="F:Exiled.API.Enums.EffectType.Deafened"/> effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.ConcussDuration">
            <summary>
            Gets or sets the maximum duration of the <see cref="F:Exiled.API.Enums.EffectType.Concussed"/> effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.ScpDamageMultiplier">
            <summary>
            Gets or sets the damage of the <see cref="F:PlayerRoles.Team.SCPs"/> going to get.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile.ToString">
            <summary>
            Returns the ExplosionGrenadePickup in a human readable format.
            </summary>
            <returns>A string containing ExplosionGrenadePickup-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile">
            <summary>
            A wrapper class for FlashbangGrenade.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile.#ctor(InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile.MinimalDurationEffect">
            <summary>
            Gets or sets the minimum duration of player can take the effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile.AdditionalBlindedEffect">
            <summary>
            Gets or sets the additional duration of the <see cref="F:Exiled.API.Enums.EffectType.Blinded"/> effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile.SurfaceDistanceIntensifier">
            <summary>
            Gets or sets the how much the flashbang going to be intensified when exploding on <see cref="F:Exiled.API.Enums.RoomType.Surface"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile.ToString">
            <summary>
            Returns the FlashbangPickup in a human readable format.
            </summary>
            <returns>A string containing FlashbangPickup-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Projectiles.Projectile">
            <summary>
            A wrapper class for Projectile.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Projectile.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrownProjectile)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrownProjectile"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Projectile.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Projectile.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.ThrownProjectile"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Projectile.ProjectileType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ProjectileType"/> of the item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Projectile.Create(Exiled.API.Enums.ProjectileType)">
            <summary>
            Creates and returns a new <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> with the proper inherited subclass.
            <para>
            Based on the <paramref name="projectiletype"/>, the returned <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> can be casted into a subclass to gain more control over the object.
            <br />The following have their own respective classes:
            <br />- FragGrenade can be casted to <see cref="T:Exiled.API.Features.Pickups.Projectiles.ExplosionGrenadeProjectile"/>.
            <br />- Flashbang can be casted to <see cref="T:Exiled.API.Features.Pickups.Projectiles.FlashbangProjectile"/>.
            <br />- Scp018 A and B variants can be casted to <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile"/>.
            <br />- Scp2176 can be casted to <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile"/>.
            </para>
            <para>
            Projectile that are not listed will cause an Exception.
            </para>
            </summary>
            <param name="projectiletype">The <see cref="P:Exiled.API.Features.Pickups.Projectiles.Projectile.ProjectileType"/> of the pickup.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Projectile.Spawn(Exiled.API.Features.Pickups.Projectiles.Projectile,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,Exiled.API.Features.Player)">
            <summary>
            Spawns a <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> too spawn.</param>
            <param name="position">The position to spawn the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> at.</param>
            <param name="rotation">The rotation to spawn the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>.</param>
            <param name="shouldBeActive">Whether the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> should be in active state after spawn.</param>
            <param name="previousOwner">An optional previous owner of the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> Spawn.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Projectile.CreateAndSpawn(Exiled.API.Enums.ProjectileType,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,Exiled.API.Features.Player)">
            <summary>
            Creates and spawns a <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
            <param name="position">The position to spawn the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> at.</param>
            <param name="rotation">The rotation to spawn the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>.</param>
            <param name="shouldBeActive">Whether the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> should be in active state after spawn.</param>
            <param name="previousOwner">An optional previous owner of the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>. See documentation of <see cref="M:Exiled.API.Features.Pickups.Pickup.Create(ItemType)"/> for more information on casting.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Projectile.Activate">
            <summary>
            Activates the current <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Projectile.Spawn(UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,Exiled.API.Features.Player)">
            <summary>
            Spawns a <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>.
            </summary>
            <param name="position">The position to spawn the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> at.</param>
            <param name="rotation">The rotation to spawn the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>.</param>
            <param name="shouldBeActive">Whether the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/> should be in active state after spawn.</param>
            <param name="previousOwner">An optional previous owner of the item.</param>
            <returns>The spawned <see cref="T:Exiled.API.Features.Pickups.Projectiles.Projectile"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Projectile.ToString">
            <summary>
            Returns the ProjectilePickup in a human readable format.
            </summary>
            <returns>A string containing ProjectilePickup-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile">
            <summary>
            A wrapper class for Scp018Projectile.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.#ctor(InventorySystem.Items.ThrowableProjectiles.Scp018Projectile)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp018Projectile"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.PhysicsModule">
            <summary>
            Gets or sets the pickup's PhysicsModule.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.MaxVelocity">
            <summary>
            Gets or sets the pickup's max velocity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.VelocityPerBounce">
            <summary>
            Gets or sets the pickup's velocity per bounce.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.IgnoreFriendlyFire">
            <summary>
            Gets a value indicating whether or not SCP-018 can injure teammates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.FriendlyFireTime">
            <summary>
            Gets or sets the time for SCP-018 not to ignore the friendly fire.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.Damage">
            <summary>
            Gets the current damage of SCP-018.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Scp018Projectile.ToString">
            <summary>
            Returns the Scp018Pickup in a human readable format.
            </summary>
            <returns>A string containing Scp018Pickup-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile">
            <summary>
            A wrapper class for an SCP-2176 Projectile.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile.#ctor(InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile.IsAlreadyTriggered">
            <summary>
            Gets a value indicating whether or not SCP-2176 has shattered.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile.DropSound">
            <summary>
            Gets or sets a value indicating whether SCP-2176's next collision will make the dropped sound effect.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.Scp2176Projectile.ToString">
            <summary>
            Returns the Scp2176Pickup in a human readable format.
            </summary>
            <returns>A string containing Scp2176Pickup related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile">
            <summary>
            A wrapper class for TimeGrenade.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile.#ctor(InventorySystem.Items.ThrowableProjectiles.TimeGrenade)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.ThrowableProjectiles.TimeGrenade"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile.IsAlreadyDetonated">
            <summary>
            Gets a value indicating whether the grenade has already exploded.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile.FuseTime">
            <summary>
            Gets or sets FuseTime.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile.IsActive">
            <summary>
            Gets or sets a value indicating whether the greande is active.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile.Explode">
            <summary>
            Immediately exploding the <see cref="T:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile.ToString">
            <summary>
            Returns the TimeGrenadePickup in a human readable format.
            </summary>
            <returns>A string containing TimeGrenadePickup related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.RadioPickup">
            <summary>
            A wrapper class for a Radio pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.RadioPickup.#ctor(InventorySystem.Items.Radio.RadioPickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.RadioPickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Radio.RadioPickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.RadioPickup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.RadioPickup"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.RadioPickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Radio.RadioPickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.RadioPickup.BatteryLevel">
            <summary>
            Gets or sets the Radio Battery Level.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.RadioPickup.Range">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Enums.RadioRange"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.RadioPickup.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the radio is active.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.RadioPickup.ToString">
            <summary>
            Returns the RadioPickup in a human readable format.
            </summary>
            <returns>A string containing RadioPickup related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Scp1576Pickup">
            <summary>
            A wrapper class for dropped SCP-330 bags.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp1576Pickup.#ctor(InventorySystem.Items.Usables.Scp1576.Scp1576Pickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Scp1576Pickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Pickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp1576Pickup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Scp1576Pickup"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp1576Pickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp1576.Scp1576Pickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp1576Pickup.ToString">
            <summary>
            Returns the Scp1576Pickup in a human readable format.
            </summary>
            <returns>A string containing Scp1576Pickup related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Scp244Pickup">
            <summary>
            A wrapper class for a SCP-244 pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp244Pickup.#ctor(InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Scp244Pickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp244Pickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Scp244Pickup"/> class.
            </summary>
            <param name="type">The <see cref="T:ItemType"/> of the pickup.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.Lifetime">
            <summary>
            Gets the amount of time this Scp244 has been on the ground.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.GrowSpeed">
            <summary>
            Gets the speed of <see cref="T:Exiled.API.Features.Pickups.Scp244Pickup"/>'s too grow.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.TimeToGrow">
            <summary>
            Gets the time for the sphere to finish their expansion.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.CurrentDiameter">
            <summary>
            Gets the current size effect of the Scp244's Hypothermia.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.CurrentSizePercent">
            <summary>
            Gets or sets the current size percent of the Scp244's Hypothermia.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.MaxDiameter">
            <summary>
            Gets or sets the maximum diameter within which SCP-244's hypothermia effect is dealt.
            </summary>
            <remarks>This does not prevent visual effects.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.Health">
            <summary>
            Gets or sets the Scp244's remaining health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.IsBreakable">
            <summary>
            Gets a value indicating whether or not this Scp244 is breakable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.IsBroken">
            <summary>
            Gets a value indicating whether or not this Scp244 is broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.State">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244State"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp244Pickup.ActivationDot">
            <summary>
            Gets or sets the activation angle, where 1 is a minimum, and -1 it's a maximum activation angle.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp244Pickup.Damage(Exiled.API.Features.DamageHandlers.DamageHandler)">
            <summary>
            Damages the Scp244Pickup.
            </summary>
            <param name="handler">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandler"/> used to deal damage.</param>
            <returns><see langword="true"/> if the the damage has been deal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp244Pickup.ToString">
            <summary>
            Returns the Scp244Pickup in a human readable format.
            </summary>
            <returns>A string containing Scp244Pickup related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp244Pickup.ReadItemInfo(Exiled.API.Features.Items.Item)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Pickups.Scp330Pickup">
            <summary>
            A wrapper class for dropped SCP-330 bags.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp330Pickup.#ctor(InventorySystem.Items.Usables.Scp330.Scp330Pickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Scp330Pickup"/> class.
            </summary>
            <param name="pickupBase">The base <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Pickup"/> class.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp330Pickup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.Scp330Pickup"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp330Pickup.Base">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp330.Scp330Pickup"/> that this class is encapsulating.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp330Pickup.ExposedCandy">
            <summary>
            Gets or sets the exposed <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.Scp330Pickup.Candies">
            <summary>
            Gets or sets the <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/>s held in this bag.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.Scp330Pickup.ToString">
            <summary>
            Returns the Scp330Pickup in a human readable format.
            </summary>
            <returns>A string containing Scp330Pickup related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pickups.UsablePickup">
            <summary>
            A wrapper class for dropped Usable Pickup.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.UsablePickup.#ctor(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.UsablePickup"/> class.
            </summary>
            <param name="pickupBase">.</param>
        </member>
        <member name="M:Exiled.API.Features.Pickups.UsablePickup.#ctor(ItemType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Pickups.UsablePickup"/> class.
            </summary>
            <param name="type">.</param>
        </member>
        <member name="P:Exiled.API.Features.Pickups.UsablePickup.UseTime">
            <summary>
            Gets or sets how long it takes to use the item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pickups.UsablePickup.MaxCancellableTime">
            <summary>
            Gets or sets how long after using starts a player has to cancel using the item.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pickups.UsablePickup.ReadItemInfo(Exiled.API.Features.Items.Item)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pickups.UsablePickup.InitializeProperties(InventorySystem.Items.ItemBase)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Player">
            <summary>
            Represents the in-game player, by encapsulating a <see cref="T:ReferenceHub"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Player.ItemsValue">
            <summary>
            A list of the player's items.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.#ctor(ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/> of the player to be encapsulated.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.#ctor(UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> of the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.API.Features.Player"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Dictionary">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all <see cref="T:Exiled.API.Features.Player"/>'s on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.List">
            <summary>
            Gets a list of all <see cref="T:Exiled.API.Features.Player"/>'s on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UserIdsCache">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:Exiled.API.Features.Player"/> and their user ids.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ComponentsInChildren">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Player.FriendlyFireMultiplier">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:PlayerRoles.RoleTypeId"/> and their FF multiplier. This is for non-unique roles.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomRoleFriendlyFireMultiplier">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing cached <see cref="T:System.String"/> and their  <see cref="T:System.Collections.Generic.Dictionary`2"/> which is cached Role with FF multiplier. This is for unique custom roles.
            </summary>
            <remarks> Consider adding this as object, Dict so that CustomRoles, and Strings can be parsed. </remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.UniqueRole">
            <summary>
            Gets or sets a unique custom role that does not adbide to base game for this player. Used in conjunction with <see cref="P:Exiled.API.Features.Player.CustomRoleFriendlyFireMultiplier"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ReferenceHub">
            <summary>
            Gets the encapsulated <see cref="T:ReferenceHub"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RoleManager">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayerRoleManager"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Ammo">
            <summary>
            Gets the player's ammo.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GameObject">
            <summary>
            Gets the encapsulated <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Transform">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentHint">
            <summary>
            Gets the hint currently watched by the player.
            </summary>
            May be <see langword="null"/>.
        </member>
        <member name="P:Exiled.API.Features.Player.HasHint">
            <summary>
            Gets a value indicating whether or not the player is viewing a hint.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.VoiceModule">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s <see cref="P:Exiled.API.Features.Player.VoiceModule"/>, can be null.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RadioPlayback">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s <see cref="T:VoiceChat.Playbacks.PersonalRadioPlayback"/>, can be null.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HintDisplay">
            <summary>
            Gets the <see cref="T:Hints.HintDisplay"/> of the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Inventory">
            <summary>
            Gets the player's <see cref="T:InventorySystem.Inventory"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CameraTransform">
            <summary>
            Gets the encapsulated <see cref="P:Exiled.API.Features.Player.ReferenceHub"/>'s <see cref="P:Exiled.API.Features.Player.Transform">PlayerCameraReference</see>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.VoiceChatMuteFlags">
            <summary>
            Gets or sets the player's <see cref="T:VoiceChat.VcMuteFlags"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Id">
            <summary>
            Gets or sets the player's id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UserId">
            <summary>
            Gets the player's user id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomUserId">
            <summary>
            Gets or sets the player's custom user id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RawUserId">
            <summary>
            Gets the player's user id without the authentication.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AuthenticationToken">
            <summary>
            Gets the player's authentication token.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AuthenticationType">
            <summary>
            Gets the player's authentication type.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsVerified">
            <summary>
            Gets a value indicating whether or not the player is verified.
            </summary>
            <remarks>
            This is always <see langword="false"/> if <c>online_mode</c> is set to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsNPC">
            <summary>
            Gets or sets a value indicating whether or not the player is a NPC.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HasCustomName">
            <summary>
            Gets a value indicating whether or not the player has an active CustomName.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.DisplayNickname">
            <summary>
            Gets or sets the player's nickname displayed to other player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomName">
            <summary>
            Gets or sets the player's nickname, if null it sets the original nickname.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Nickname">
            <summary>
            Gets the player's nickname.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.InfoArea">
            <summary>
            Gets or sets the player's player info area bitmask.
            This property can be used to hide player name elements, such as the player's name, badges, etc.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CustomInfo">
            <summary>
            Gets or sets the player's custom player info string. This string is displayed along with the player's <see cref="P:Exiled.API.Features.Player.InfoArea"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.InfoViewRange">
            <summary>
            Gets or sets the range at which this player's info can be viewed by others.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.SessionVariables">
            <summary>
            Gets the dictionary of the player's session variables.
            <para>
            Session variables can be used to save temporary data on players. Data is stored in a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            The key of the data is always a <see cref="T:System.String"/>, whereas the value can be any <see cref="T:System.Object"/>.
            The data stored in a player's session variables can be accessed by different assemblies; it is recommended to uniquely identify stored data so that it does not conflict with other plugins that may also be using the same name.
            Data saved with session variables is not being saved on player disconnect. If the data must be saved after the player's disconnects, a database must be used instead.
            </para>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.DoNotTrack">
            <summary>
            Gets a value indicating whether or not the player has Do Not Track (DNT) enabled. If this value is <see langword="true"/>, data about the player unrelated to server security shouldn't be stored.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsConnected">
            <summary>
            Gets a value indicating whether the player is fully connected to the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HasReservedSlot">
            <summary>
            Gets a value indicating whether or not the player has a reserved slot.
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.GiveReservedSlot(System.Boolean)"/>
            <seealso cref="M:Exiled.API.Features.Player.AddReservedSlot(System.String,System.Boolean)"/>
        </member>
        <member name="P:Exiled.API.Features.Player.IsWhitelisted">
            <summary>
            Gets a value indicating whether or not the player is in whitelist.
            </summary>
            <remarks>It will always return <see langword="true"/> if a whitelist is disabled on the server.</remarks>
            <seealso cref="M:Exiled.API.Features.Player.GrantWhitelist(System.Boolean)"/>
            <seealso cref="M:Exiled.API.Features.Player.AddToWhitelist(System.String,System.Boolean)"/>
        </member>
        <member name="P:Exiled.API.Features.Player.RemoteAdminAccess">
            <summary>
            Gets a value indicating whether or not the player has Remote Admin access.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AdminChatAccess">
            <summary>
            Gets a value indicating whether or not the player has Admin Chat access.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.KickPower">
            <summary>
            Gets a value indicating a player's kick power.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsOverwatchEnabled">
            <summary>
            Gets or sets a value indicating whether or not the player's overwatch is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsNoclipPermitted">
            <summary>
            Gets or sets a value indicating whether or not the player is allowed to enter noclip mode.
            </summary>
            <remarks>For forcing the player into noclip mode, see <see cref="P:Exiled.API.Features.Roles.FpcRole.IsNoclipEnabled"/>.</remarks>
            <seealso cref="P:Exiled.API.Features.Roles.FpcRole.IsNoclipEnabled"/>
        </member>
        <member name="P:Exiled.API.Features.Player.Cuffer">
            <summary>
            Gets or sets a value indicating the <see cref="T:Exiled.API.Features.Player"/> that currently has the player cuffed.
            <para>
            This value will be <see langword="null"/> if the player is not cuffed. Setting this value to <see langword="null"/> will uncuff the player if they are cuffed.
            </para>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Position">
            <summary>
            Gets or sets the player's position.
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.Teleport(UnityEngine.Vector3)"/>
            <seealso cref="M:Exiled.API.Features.Player.Teleport(System.Object)"/>
        </member>
        <member name="P:Exiled.API.Features.Player.RelativePosition">
            <summary>
            Gets or sets the relative player's position.
            </summary>
            <remarks>The value will be default if the player's role is not an <see cref="T:Exiled.API.Features.Roles.FpcRole"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.Rotation">
            <summary>
            Gets or sets the player's rotation.
            </summary>
            <returns>Returns the direction the player is looking at.</returns>
        </member>
        <member name="P:Exiled.API.Features.Player.Velocity">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/>'s current movement speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.LeadingTeam">
            <summary>
            Gets the player's <see cref="T:Exiled.API.Enums.LeadingTeam"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RemoteAdminPermissions">
            <summary>
            Gets or sets a value indicating the actual RA permissions.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Role">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Roles.Role"/> that is unique to this player and this class. This allows modification of various aspects related to the role solely.
            <para>
            The type of the Role is different based on the <see cref="T:PlayerRoles.RoleTypeId"/> of the player, and casting should be used to modify the role.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Spectator"/> = <see cref="T:Exiled.API.Features.Roles.SpectatorRole"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Overwatch"/> = <see cref="T:Exiled.API.Features.Roles.OverwatchRole"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.None"/> = <see cref="T:Exiled.API.Features.Roles.NoneRole"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Scp049"/> = <see cref="T:Exiled.API.Features.Roles.Scp049Role"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Scp0492"/> = <see cref="T:Exiled.API.Features.Roles.Scp0492Role"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Scp079"/> = <see cref="T:Exiled.API.Features.Roles.Scp079Role"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Scp096"/> = <see cref="T:Exiled.API.Features.Roles.Scp096Role"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Scp106"/> = <see cref="T:Exiled.API.Features.Roles.Scp106Role"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Scp173"/> = <see cref="T:Exiled.API.Features.Roles.Scp173Role"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Scp3114"/> = <see cref="T:Exiled.API.Features.Roles.Scp3114Role"/>.
            <br /><see cref="F:PlayerRoles.RoleTypeId.Scp939"/> = <see cref="T:Exiled.API.Features.Roles.Scp939Role"/>.
            <br />If not listed above, the type of Role will be <see cref="T:Exiled.API.Features.Roles.HumanRole"/>.
            </para>
            <para>
            If the role object is stored, it may become invalid if the player changes roles. Thus, the <see cref="P:Exiled.API.Features.Roles.Role.IsValid"/> property can be checked. If this property is <see langword="false"/>, the role should be discarded and this property should be used again to get the new Role.
            This role is automatically cached until it changes, and it is recommended to use this property directly rather than storing the property yourself.
            </para>
            <para>
            Roles and RoleTypeIds can be compared directly. <c>Player.Role == RoleTypeId.Scp079</c> is valid and will return <see langword="true"/> if the player is SCP-079. To set the player's role, see <see cref="M:Exiled.API.Features.Roles.Role.Set(PlayerRoles.RoleTypeId,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)"/>.
            </para>
            </summary>
            <seealso cref="M:Exiled.API.Features.Roles.Role.Set(PlayerRoles.RoleTypeId,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)"/>
        </member>
        <member name="P:Exiled.API.Features.Player.ScpPreferences">
            <summary>
            Gets or sets the player's SCP preferences.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsCuffed">
            <summary>
            Gets a value indicating whether or not the player is cuffed.
            </summary>
            <remarks>Players can be cuffed without another player being the cuffer.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsReloading">
            <summary>
            Gets a value indicating whether or not the player is reloading a weapon.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsAimingDownWeapon">
            <summary>
            Gets a value indicating whether or not the player is aiming with a weapon.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HasFlashlightModuleEnabled">
            <summary>
            Gets a value indicating whether or not the player has enabled weapon's flashlight module.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsJumping">
            <summary>
            Gets a value indicating whether or not the player is jumping.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IPAddress">
            <summary>
            Gets the player's IP address.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Sender">
            <summary>
            Gets the player's command sender instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Connection">
            <summary>
            Gets player's <see cref="T:Mirror.NetworkConnection"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.NetworkIdentity">
            <summary>
            Gets the player's <see cref="T:Mirror.NetworkIdentity"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.NetId">
            <summary>
            Gets the player's net ID.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsHost">
            <summary>
            Gets a value indicating whether or not the player is the host.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsAlive">
            <summary>
            Gets a value indicating whether or not the player is alive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsDead">
            <summary>
            Gets a value indicating whether or not the player is dead.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsNTF">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:PlayerRoles.RoleTypeId"/> is any NTF rank.
            Equivalent to checking the player's <see cref="T:PlayerRoles.Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsCHI">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:PlayerRoles.RoleTypeId"/> is any Chaos rank.
            Equivalent to checking the player's <see cref="T:PlayerRoles.Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsScp">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:PlayerRoles.RoleTypeId"/> is any SCP.
            Equivalent to checking the player's <see cref="T:PlayerRoles.Team"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsHuman">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:PlayerRoles.RoleTypeId"/> is any human rank.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsTutorial">
            <summary>
            Gets a value indicating whether or not the player's <see cref="T:PlayerRoles.RoleTypeId"/> is equal to <see cref="F:PlayerRoles.RoleTypeId.Tutorial"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsFriendlyFireEnabled">
            <summary>
            Gets a value indicating whether or not the player's friendly fire is enabled.
            <br>This property only determines if this player can deal damage to players on the same team;</br>
            <br>This player can be damaged by other players on their own team even if this property is <see langword="false"/>.</br>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Scale">
            <summary>
            Gets or sets the player's scale.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsBypassModeEnabled">
            <summary>
            Gets or sets a value indicating whether or not the player's bypass mode is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsMuted">
            <summary>
            Gets or sets a value indicating whether or not the player is muted.
            </summary>
            <remarks>This property will NOT persistently mute and unmute the player. For persistent mutes, see <see cref="M:Exiled.API.Features.Player.Mute(System.Boolean)"/> and <see cref="M:Exiled.API.Features.Player.UnMute(System.Boolean)"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsGlobalMuted">
            <summary>
            Gets or sets a value indicating whether or not the player is global muted.
            </summary>
            <remarks>This property will NOT persistently mute and unmute the player. For persistent mutes, see <see cref="M:Exiled.API.Features.Player.Mute(System.Boolean)"/> and <see cref="M:Exiled.API.Features.Player.UnMute(System.Boolean)"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsIntercomMuted">
            <summary>
            Gets or sets a value indicating whether or not the player is intercom muted.
            </summary>
            <remarks>This property will NOT persistently mute and unmute the player. For persistent mutes, see <see cref="M:Exiled.API.Features.Player.Mute(System.Boolean)"/> and <see cref="M:Exiled.API.Features.Player.UnMute(System.Boolean)"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsSpeaking">
            <summary>
            Gets a value indicating whether or not the player is speaking.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.VoiceColor">
            <summary>
            Gets the player's voice color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.VoiceChannel">
            <summary>
            Gets or sets the player's voice channel.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsTransmitting">
            <summary>
            Gets a value indicating whether or not the player is transmitting on a Radio.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsGodModeEnabled">
            <summary>
            Gets or sets a value indicating whether or not the player has godmode enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UnitName">
            <summary>
            Gets the player's unit name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UnitId">
            <summary>
            Gets or sets the player's unit id.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Health">
            <summary>
            Gets or sets the player's health.
            If the health is greater than the <see cref="P:Exiled.API.Features.Player.MaxHealth"/>, the MaxHealth will also be changed to match the health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxHealth">
            <summary>
            Gets or sets the player's maximum health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ArtificialHealth">
            <summary>
            Gets or sets the player's artificial health.
            If the health is greater than the <see cref="P:Exiled.API.Features.Player.MaxArtificialHealth"/>, it will also be changed to match the artificial health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.MaxArtificialHealth">
            <summary>
            Gets or sets the player's maximum artificial health.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HumeShield">
            <summary>
            Gets or sets the player's Hume Shield.
            </summary>
            <remarks>This value can bypass the role's hume shield maximum. However, this value will only be visible to the end-player as Hume Shield if <see cref="P:Exiled.API.Features.Roles.FpcRole.IsHumeShieldedRole"/> is <see langword="true"/>. Otherwise, the game will treat the player as though they have the amount of Hume Shield specified, even though they cannot see it.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.ActiveArtificialHealthProcesses">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all active Artificial Health processes on the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.HumeShieldStat">
            <summary>
            Gets the player's <see cref="T:PlayerStatsSystem.HumeShieldStat"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentItem">
            <summary>
            Gets or sets the item in the player's hand. Value will be <see langword="null"/> if the player is not holding anything.
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.DropHeldItem"/>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentArmor">
            <summary>
            Gets the armor that the player is currently wearing. Value will be <see langword="null"/> if the player is not wearing any armor.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.StaminaStat">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Player.StaminaStat"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Stamina">
            <summary>
            Gets or sets the amount of stamina the player has.
            </summary>
            <remarks>This will always be a value between <c>0-1</c>, <c>0</c> representing no stamina and <c>1</c> representing maximum stamina.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Player.IsStaffBypassEnabled">
            <summary>
            Gets a value indicating whether or not the staff bypass is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GroupName">
            <summary>
            Gets or sets the player's group name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentRoom">
            <summary>
            Gets the current <see cref="T:Exiled.API.Features.Room"/> the player is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Zone">
            <summary>
            Gets the current zone the player is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Lift">
            <summary>
            Gets the current <see cref="T:Exiled.API.Features.Lift"/> the player is in. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.ActiveEffects">
            <summary>
            Gets all currently active <see cref="T:CustomPlayerEffects.StatusEffectBase"> effects</see>.
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.EnableEffect(Exiled.API.Enums.EffectType,System.Single,System.Boolean)"/>
            <seealso cref="M:Exiled.API.Features.Player.EnableEffect(CustomPlayerEffects.StatusEffectBase,System.Single,System.Boolean)"/>
            <seealso cref="M:Exiled.API.Features.Player.EnableEffect(System.String,System.Single,System.Boolean)"/>
            <seealso cref="M:Exiled.API.Features.Player.EnableEffect``1(System.Single,System.Boolean)"/>
            <seealso cref="M:Exiled.API.Features.Player.EnableEffects(System.Collections.Generic.IEnumerable{Exiled.API.Enums.EffectType},System.Single,System.Boolean)"/>
        </member>
        <member name="P:Exiled.API.Features.Player.Group">
            <summary>
            Gets or sets the player's group.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RankColor">
            <summary>
            Gets or sets the player's rank color.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.RankName">
            <summary>
            Gets or sets the player's rank name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.GlobalBadge">
            <summary>
            Gets the global badge of the player. Value will be <see langword="null"/> if the player does not have a global badge.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.BadgeHidden">
            <summary>
            Gets or sets a value indicating whether or not the player's badge is hidden.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsNorthwoodStaff">
            <summary>
            Gets a value indicating whether or not the player is Northwood staff.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsGlobalModerator">
            <summary>
            Gets a value indicating whether or not the player is a global moderator.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInPocketDimension">
            <summary>
            Gets a value indicating whether or not the player is in the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsUsingStamina">
            <summary>
            Gets or sets a value indicating whether or not the player should use stamina system.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Ping">
            <summary>
            Gets the player's ping.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Items">
            <summary>
            Gets the player's items.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInventoryEmpty">
            <summary>
            Gets a value indicating whether or not the player's inventory is empty.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsInventoryFull">
            <summary>
            Gets a value indicating whether or not the player's inventory is full.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.AgreedToRecording">
            <summary>
            Gets a value indicating whether or not the player has agreed to microphone recording.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.CurrentSpectatingPlayers">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> of spectators that are currently spectating this <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Preferences">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> which contains all player's preferences.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.Footprint">
            <summary>
            Gets the player's <see cref="T:Footprinting.Footprint"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.IsSpawnProtected">
            <summary>
            Gets or sets a value indicating whether or not the player is spawn protected.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Player.UnverifiedPlayers">
            <summary>
            Gets a dictionary for storing player objects of connected but not yet verified players.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.op_Implicit(PluginAPI.Core.Player)~Exiled.API.Features.Player">
            <summary>
            Converts NwPluginAPI player to EXILED player.
            </summary>
            <param name="player">The NwPluginAPI player.</param>
            <returns>EXILED player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Exiled.API.Enums.Side)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by side. Can be empty.
            </summary>
            <param name="side">The players' side.</param>
            <returns>The filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(PlayerRoles.Team)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by team. Can be empty.
            </summary>
            <param name="team">The players' team.</param>
            <returns>The filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(PlayerRoles.RoleTypeId)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:System.Collections.Generic.IEnumerable`1"/> filtered by role. Can be empty.
            </summary>
            <param name="role">The players' role.</param>
            <returns>The filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.Func{Exiled.API.Features.Player,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satisfy.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains elements that satisfy the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(CommandSystem.ICommandSender)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:CommandSystem.ICommandSender"/>, if any.
            </summary>
            <param name="sender">The command sender.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Footprinting.Footprint)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:Footprinting.Footprint"/>, if any.
            </summary>
            <param name="footprint">The Footprint.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(CommandSender)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:CommandSender"/>, if any.
            </summary>
            <param name="sender">The command sender.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(ReferenceHub)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:ReferenceHub"/>, if any.
            </summary>
            <param name="referenceHub">The player's <see cref="T:ReferenceHub"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(UnityEngine.Collider)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:UnityEngine.Collider"/>, if any.
            </summary>
            <param name="collider"><see cref="T:UnityEngine.Collider"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.UInt32)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to a specific netId, if any.
            </summary>
            <param name="netId">The player's <see cref="P:Mirror.NetworkIdentity.netId"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Player"/> owning the netId, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Mirror.NetworkIdentity)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to a specific <see cref="T:Mirror.NetworkIdentity"/>, if any.
            </summary>
            <param name="netIdentity">The player's <see cref="T:Mirror.NetworkIdentity"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Player"/> owning the <see cref="T:Mirror.NetworkIdentity"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(Mirror.NetworkConnection)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to a specific <see cref="T:Mirror.NetworkConnection"/>, if any.
            </summary>
            <param name="conn">The player's <see cref="T:Mirror.NetworkConnection"/>.</param>
            <returns>The <see cref="T:Exiled.API.Features.Player"/> owning the <see cref="T:Mirror.NetworkConnection"/>, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(UnityEngine.GameObject)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> belonging to the <see cref="T:UnityEngine.GameObject"/>, if any.
            </summary>
            <param name="gameObject">The player's <see cref="T:UnityEngine.GameObject"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.Int32)">
            <summary>
            Gets the player belonging to the specified id.
            </summary>
            <param name="id">The player id.</param>
            <returns>Returns the player found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(System.String)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> by identifier.
            </summary>
            <param name="args">The player's nickname, ID, steamID64 or Discord ID.</param>
            <returns>Returns the player found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Get(PluginAPI.Core.Player)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> from NwPluginAPI class.
            </summary>
            <param name="apiPlayer">The <see cref="T:PluginAPI.Core.Player"/> class.</param>
            <returns>A <see cref="T:Exiled.API.Features.Player"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(CommandSystem.ICommandSender,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given a <see cref="T:CommandSystem.ICommandSender"/>.
            </summary>
            <param name="sender">The <see cref="T:CommandSystem.ICommandSender"/>.</param>
            <param name="player">The player that matches the given <see cref="T:CommandSystem.ICommandSender"/>, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(Footprinting.Footprint,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given a <see cref="T:Footprinting.Footprint"/>.
            </summary>
            <param name="footprint">The <see cref="T:Footprinting.Footprint"/>.</param>
            <param name="player">The player that matches the given <see cref="T:Footprinting.Footprint"/>, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(CommandSender,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given a <see cref="T:CommandSender"/>.
            </summary>
            <param name="sender">The <see cref="T:CommandSender"/>.</param>
            <param name="player">The player that matches the given <see cref="T:CommandSender"/>, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(ReferenceHub,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given a <see cref="T:ReferenceHub"/>.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/>.</param>
            <param name="player">The player that matches the given <see cref="T:ReferenceHub"/>, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(System.UInt32,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given a network ID.
            </summary>
            <param name="netId">The network ID.</param>
            <param name="player">The player that matches the given net ID, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(Mirror.NetworkIdentity,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given a <see cref="T:Mirror.NetworkIdentity"/>.
            </summary>
            <param name="netIdentity">The <see cref="T:Mirror.NetworkIdentity"/>.</param>
            <param name="player">The player that matches the given <see cref="T:Mirror.NetworkIdentity"/>, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(Mirror.NetworkConnection,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given a <see cref="T:Mirror.NetworkConnection"/>.
            </summary>
            <param name="conn">The <see cref="T:Mirror.NetworkConnection"/>.</param>
            <param name="player">The player that matches the given <see cref="T:Mirror.NetworkConnection"/>, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(UnityEngine.GameObject,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given a <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/>.</param>
            <param name="player">The player that matches the given <see cref="T:UnityEngine.GameObject"/>, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(System.Int32,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player given an ID.
            </summary>
            <param name="id">The user ID.</param>
            <param name="player">The player that matches the given ID, or <see langword="null"/> if no player is found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(System.String,Exiled.API.Features.Player@)">
            <summary>
            Try-get a player by identifier.
            </summary>
            <param name="args">The player's nickname, ID, steamID64 or Discord ID.</param>
            <param name="player">The player found or <see langword="null"/> if not found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(PluginAPI.Core.Player,Exiled.API.Features.Player@)">
            <summary>
            Try-get the <see cref="T:Exiled.API.Features.Player"/> from NwPluginAPI class.
            </summary>
            <param name="apiPlayer">The <see cref="T:PluginAPI.Core.Player"/> class.</param>
            <param name="player">The player found or <see langword="null"/> if not found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGet(UnityEngine.Collider,Exiled.API.Features.Player@)">
            <summary>
            Try-get player by <see cref="T:UnityEngine.Collider"/>.
            </summary>
            <param name="collider">The <see cref="T:UnityEngine.Collider"/>.</param>
            <param name="player">The player found or <see langword="null"/> if not found.</param>
            <returns>A boolean indicating whether or not a player was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddReservedSlot(System.String)">
            <summary>
            Adds a player's UserId to the list of reserved slots.
            </summary>
            <remarks>This method does not permanently give a user a reserved slot. The slot will be removed if the reserved slots are reloaded.</remarks>
            <param name="userId">The UserId of the player to add.</param>
            <returns><see langword="true"/> if the slot was successfully added, or <see langword="false"/> if the provided UserId already has a reserved slot.</returns>
            <seealso cref="M:Exiled.API.Features.Player.GiveReservedSlot"/>
        </member>
        <member name="M:Exiled.API.Features.Player.AddReservedSlot(System.String,System.Boolean)">
            <summary>
            Adds a player's UserId to the list of reserved slots.
            </summary>
            <param name="userId">The UserId of the player to add.</param>
            <param name="isPermanent"> Whether or not to add a <see langword="userId"/> permanently. It will write a <see langword="userId"/> to UserIDReservedSlots.txt file.</param>
            <returns><see langword="true"/> if the slot was successfully added, or <see langword="false"/> if the provided UserId already has a reserved slot.</returns>
            <seealso cref="M:Exiled.API.Features.Player.GiveReservedSlot(System.Boolean)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.AddToWhitelist(System.String,System.Boolean)">
            <summary>
            Adds a player's UserId to the whitelist.
            </summary>
            <param name="userId">The UserId of the player to add.</param>
            <param name="isPermanent"> Whether or not to add a <see langword="userId"/> permanently. It will write a <see langword="userId"/> to UserIDWhitelist.txt file.</param>
            <returns><see langword="true"/> if the record was successfully added, or <see langword="false"/> if the provided UserId already is in whitelist.</returns>
            <seealso cref="M:Exiled.API.Features.Player.GrantWhitelist(System.Boolean)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.ReloadReservedSlots">
            <summary>
            Reloads the reserved slot list, clearing all reserved slot changes made with add/remove methods and reverting to the reserved slots files.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.ReloadWhitelist">
            <summary>
            Reloads the whitelist, clearing all whitelist changes made with add/remove methods and reverting to the whitelist files.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.GiveReservedSlot">
            <summary>
            Adds the player's UserId to the list of reserved slots.
            </summary>
            <remarks>This method does not permanently give a user a reserved slot. The slot will be removed if the reserved slots are reloaded.</remarks>
            <returns><see langword="true"/> if the slot was successfully added, or <see langword="false"/> if the player already has a reserved slot.</returns>
            <seealso cref="M:Exiled.API.Features.Player.AddReservedSlot(System.String)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.GiveReservedSlot(System.Boolean)">
            <summary>
            Adds a player's UserId to the list of reserved slots.
            </summary>
            <param name="isPermanent"> Whether or not to add a player's UserId permanently. It will write a player's UserId to UserIDReservedSlots.txt file.</param>
            <returns><see langword="true"/> if the slot was successfully added, or <see langword="false"/> if the provided UserId already has a reserved slot.</returns>
            <seealso cref="M:Exiled.API.Features.Player.AddReservedSlot(System.String,System.Boolean)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.GrantWhitelist(System.Boolean)">
            <summary>
            Adds a player's UserId to the whitelist.
            </summary>
            <param name="isPermanent"> Whether or not to add a player's UserId permanently. It will write a player's UserId to UserIDWhitelist.txt file.</param>
            <returns><see langword="true"/> if the record was successfully added, or <see langword="false"/> if the provided UserId already is in whitelist.</returns>
            <seealso cref="M:Exiled.API.Features.Player.AddToWhitelist(System.String,System.Boolean)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.SetFriendlyFire(PlayerRoles.RoleTypeId,System.Single)">
            <summary>
            Tries to add <see cref="T:PlayerRoles.RoleTypeId"/> to FriendlyFire rules.
            </summary>
            <param name="roleToAdd"> Role to add. </param>
            <param name="ffMult"> Friendly fire multiplier. </param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetFriendlyFire(System.Collections.Generic.KeyValuePair{PlayerRoles.RoleTypeId,System.Single})">
            <summary>
            Wrapper to call <see cref="M:Exiled.API.Features.Player.SetFriendlyFire(PlayerRoles.RoleTypeId,System.Single)"/>.
            </summary>
            <param name="roleFF"> Role with FF to add even if it exists. </param>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddFriendlyFire(PlayerRoles.RoleTypeId,System.Single)">
            <summary>
            Tries to add <see cref="T:PlayerRoles.RoleTypeId"/> to FriendlyFire rules.
            </summary>
            <param name="roleToAdd"> Role to add. </param>
            <param name="ffMult"> Friendly fire multiplier. </param>
            <returns> Whether or not the item was able to be added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddFriendlyFire(System.Collections.Generic.KeyValuePair{PlayerRoles.RoleTypeId,System.Single})">
            <summary>
            Tries to add <see cref="T:PlayerRoles.RoleTypeId"/> to FriendlyFire rules.
            </summary>
            <param name="pairedRoleFF"> Role FF multiplier to add. </param>
            <returns> Whether or not the item was able to be added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddFriendlyFire(System.Collections.Generic.Dictionary{PlayerRoles.RoleTypeId,System.Single},System.Boolean)">
            <summary>
            Tries to add <see cref="T:PlayerRoles.RoleTypeId"/> to FriendlyFire rules.
            </summary>
            <param name="ffRules"> Roles to add with friendly fire values. </param>
            <param name="overwrite"> Whether or not to overwrite current values if they exist. </param>
            <returns> Whether or not the item was able to be added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Player.SetCustomRoleFriendlyFire(System.String,PlayerRoles.RoleTypeId,System.Single)">
            <summary>
            Tries to add <see cref="T:PlayerRoles.RoleTypeId"/> to FriendlyFire rules.
            </summary>
            <param name="roleTypeId"> Role associated for CustomFF. </param>
            <param name="roleToAdd"> Role to add. </param>
            <param name="ffMult"> Friendly fire multiplier. </param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetCustomRoleFriendlyFire(System.String,System.Collections.Generic.KeyValuePair{PlayerRoles.RoleTypeId,System.Single})">
            <summary>
            Wrapper to call <see cref="M:Exiled.API.Features.Player.SetCustomRoleFriendlyFire(System.String,PlayerRoles.RoleTypeId,System.Single)"/>.
            </summary>
            <param name="roleTypeId"> Role associated for CustomFF. </param>
            <param name="roleFf"> Role with FF to add even if it exists. </param>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddCustomRoleFriendlyFire(System.String,System.Collections.Generic.KeyValuePair{PlayerRoles.RoleTypeId,System.Single})">
            <summary>
            Tries to add <see cref="T:PlayerRoles.RoleTypeId"/> to FriendlyFire rules for CustomRole.
            </summary>
            <param name="roleTypeId"> Role associated for CustomFF. </param>
            <param name="roleFf"> Role to add and FF multiplier. </param>
            <returns> Whether or not the item was able to be added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddCustomRoleFriendlyFire(System.String,PlayerRoles.RoleTypeId,System.Single)">
            <summary>
            Tries to add <see cref="T:PlayerRoles.RoleTypeId"/> to FriendlyFire rules for CustomRole.
            </summary>
            <param name="roleTypeId"> Role associated for CustomFF. </param>
            <param name="roleToAdd"> Role to add. </param>
            <param name="ffMult"> Friendly fire multiplier. </param>
            <returns> Whether or not the item was able to be added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddCustomRoleFriendlyFire(System.String,System.Collections.Generic.Dictionary{PlayerRoles.RoleTypeId,System.Single},System.Boolean)">
            <summary>
            Tries to add <see cref="T:PlayerRoles.RoleTypeId"/> to FriendlyFire rules.
            </summary>
            <param name="customRoleName"> Role associated for CustomFF. </param>
            <param name="ffRules"> Roles to add with friendly fire values. </param>
            <param name="overwrite"> Whether to overwrite current values if they exist - does NOT delete previous entries if they are not in provided rules. </param>
            <returns> Whether or not the item was able to be added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddCustomRoleFriendlyFire(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{PlayerRoles.RoleTypeId,System.Single}})">
            <summary>
            Adds the Custom role to the <see cref="P:Exiled.API.Features.Player.CustomRoleFriendlyFireMultiplier"/> if they did not already exist.
            </summary>
            <param name="customRoleFriendlyFireMultiplier"> Custom role with FF role rules. </param>
        </member>
        <member name="M:Exiled.API.Features.Player.TrySetCustomRoleFriendlyFire(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{PlayerRoles.RoleTypeId,System.Single}})">
            <summary>
            Sets the <see cref="P:Exiled.API.Features.Player.CustomRoleFriendlyFireMultiplier"/>.
            </summary>
            <param name="customRoleFriendlyFireMultiplier"> New rules for CustomeRoleFriendlyFireMultiplier to set to. </param>
        </member>
        <member name="M:Exiled.API.Features.Player.TrySetCustomRoleFriendlyFire(System.String,System.Collections.Generic.Dictionary{PlayerRoles.RoleTypeId,System.Single})">
            <summary>
            Sets the <see cref="P:Exiled.API.Features.Player.CustomRoleFriendlyFireMultiplier"/>.
            </summary>
            <param name="roleTypeId"> Role to associate FF rules to. </param>
            <param name="customRoleFriendlyFireMultiplier"> New rules for CustomeRoleFriendlyFireMultiplier to set to. </param>
        </member>
        <member name="M:Exiled.API.Features.Player.TryRemoveFriendlyFire(PlayerRoles.RoleTypeId)">
            <summary>
            Tries to remove <see cref="T:PlayerRoles.RoleTypeId"/> from FriendlyFire rules.
            </summary>
            <param name="role"> Role to add. </param>
            <returns> Whether or not the item was able to be added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryRemoveCustomeRoleFriendlyFire(System.String)">
            <summary>
            Tries to remove <see cref="T:PlayerRoles.RoleTypeId"/> from FriendlyFire rules.
            </summary>
            <param name="role"> Role to add. </param>
            <returns> Whether or not the item was able to be added. </returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ReloadWeapon">
            <summary>
            Forces the player to reload their current weapon.
            </summary>
            <returns><see langword="true"/> if firearm was successfully reloaded. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetItem(System.UInt16,Exiled.API.Features.Items.Item@)">
            <summary>
            Tries to get an item from a player's inventory.
            </summary>
            <param name="serial">The unique identifier of the item.</param>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> found. <see langword="null"/> if it doesn't exist.</param>
            <returns><see langword="true"/> if the item is found, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.SetRank(System.String,UserGroup)">
            <summary>
            Sets the player's rank.
            </summary>
            <param name="name">The rank name to be set.</param>
            <param name="group">The group to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Handcuff">
            <summary>
            Handcuff the player as administrator.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.Handcuff(Exiled.API.Features.Player)">
            <summary>
            Handcuff the player.
            </summary>
            <param name="cuffer">The cuffer player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveHandcuffs">
            <summary>
            Removes the player's handcuffs.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.Broadcast(Exiled.API.Features.Broadcast,System.Boolean)">
            <summary>
            Broadcasts the given <see cref="T:Exiled.API.Features.Broadcast"/> to the player.
            </summary>
            <param name="broadcast">The <see cref="T:Exiled.API.Features.Broadcast"/> to be broadcasted.</param>
            <param name="shouldClearPrevious">Clears all player's broadcasts before sending the new one.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DropItem(Exiled.API.Features.Items.Item,System.Boolean)">
            <summary>
            Drops an item from the player's inventory.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to be dropped.</param>
            <param name="isThrown">Is the item Thrown?.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DropItem(Exiled.API.Features.Items.Item)">
            <summary>
            Drops an item from the player's inventory.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to be dropped.</param>
            <returns>dropped <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.DropHeldItem(System.Boolean)">
            <summary>
            Drops the held item. Will not do anything if the player is not holding an item.
            </summary>
            <param name="isThrown">Is the item Thrown?.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DropHeldItem">
            <summary>
            Drops the held item. Will not do anything if the player is not holding an item.
            </summary>
            <seealso cref="P:Exiled.API.Features.Player.CurrentItem"/>
            <returns>Dropped item's <see cref="T:Exiled.API.Features.Pickups.Pickup"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.HasItem(Exiled.API.Features.Items.Item)">
            <summary>
            Indicates whether or not the player has an item.
            </summary>
            <param name="item">The item to search for.</param>
            <returns><see langword="true"/>, if the player has it; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.HasItem(ItemType)">
            <summary>
            Indicates whether or not the player has an item type.
            </summary>
            <param name="type">The type to search for.</param>
            <returns><see langword="true"/>, if the player has it; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.CountItem(ItemType)">
            <summary>
            Counts how many items of a certain <see cref="T:ItemType"/> a player has.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>How many items of that <see cref="T:ItemType"/> the player has.</returns>
            <remarks>For counting ammo, see <see cref="M:Exiled.API.Features.Player.GetAmmo(Exiled.API.Enums.AmmoType)"/>.</remarks>
            <seealso cref="M:Exiled.API.Features.Player.GetAmmo(Exiled.API.Enums.AmmoType)"/>
            <seealso cref="M:Exiled.API.Features.Player.CountItem(ItemCategory)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.CountItem(Exiled.API.Enums.ProjectileType)">
            <summary>
            Counts how many items of a certain <see cref="T:Exiled.API.Enums.ProjectileType"/> a player has.
            </summary>
            <param name="grenadeType">The ProjectileType to search for.</param>
            <returns>How many items of that <see cref="T:Exiled.API.Enums.ProjectileType"/> the player has.</returns>
            <seealso cref="M:Exiled.API.Features.Player.CountItem(ItemType)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.CountItem(ItemCategory)">
            <summary>
            Counts how many items of a certain <see cref="T:ItemCategory"/> a player has.
            </summary>
            <param name="category">The category to search for.</param>
            <returns>How many items of that <see cref="T:ItemCategory"/> the player has.</returns>
            <seealso cref="M:Exiled.API.Features.Player.CountItem(ItemType)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveItem(Exiled.API.Features.Items.Item,System.Boolean)">
            <summary>
            Removes an <see cref="T:Exiled.API.Features.Items.Item"/> from the player's inventory.
            </summary>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> to remove.</param>
            <param name="destroy">Whether or not to destroy the item.</param>
            <returns>A value indicating whether or not the <see cref="T:Exiled.API.Features.Items.Item"/> was removed.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveItem(System.UInt16,System.Boolean)">
            <summary>
            Removes an <see cref="T:Exiled.API.Features.Items.Item"/> from the player's inventory.
            </summary>
            <param name="serial">The <see cref="T:Exiled.API.Features.Items.Item"/> serial to remove.</param>
            <param name="destroy">Whether or not to destroy the item.</param>
            <returns>A value indicating whether or not the <see cref="T:Exiled.API.Features.Items.Item"/> was removed.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveItem(System.Func{Exiled.API.Features.Items.Item,System.Boolean},System.Boolean)">
            <summary>
            Removes all <see cref="T:Exiled.API.Features.Items.Item"/>'s that satisfy the condition from the player's inventory.
            </summary>
            <param name="predicate">The condition to satisfy.</param>
            <param name="destroy">Whether or not to destroy the items.</param>
            <returns>Count of a successfully removed <see cref="T:Exiled.API.Features.Items.Item"/>'s.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoveHeldItem(System.Boolean)">
            <summary>
            Removes the held <see cref="T:InventorySystem.Items.ItemBase"/> from the player's inventory.
            </summary>
            <param name="destroy">Whether or not to destroy the item.</param>
            <returns>Returns a value indicating whether or not the <see cref="T:InventorySystem.Items.ItemBase"/> was removed.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.SendConsoleMessage(System.String,System.String)">
            <summary>
            Sends a console message to the player's console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="color">The message color.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Disconnect(System.String)">
            <summary>
            Disconnects the player.
            </summary>
            <param name="reason">The disconnection reason.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetStamina">
            <summary>
            Resets the <see cref="T:Exiled.API.Features.Player"/>'s stamina.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.GetScpPreference(PlayerRoles.RoleTypeId)">
            <summary>
            Gets a user's SCP preference.
            </summary>
            <param name="roleType">The SCP RoleType.</param>
            <returns>A value from <c>-5</c> to <c>5</c>, representing a player's preference to play as the provided SCP. Will return <c>0</c> for invalid SCPs.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Hurts the player.
            </summary>
            <param name="damageHandlerBase">The <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> used to deal damage.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement)">
            <summary>
            Hurts the player.
            </summary>
            <param name="attacker">The <see cref="T:Exiled.API.Features.Player"/> attacking player.</param>
            <param name="amount">The <see langword="float"/> amount of damage to deal.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> of the damage dealt.</param>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> cassie announcement to make if the damage kills the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(Exiled.API.Features.Player,System.Single,Exiled.API.Enums.DamageType,Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement,System.String)">
            <summary>
            Hurts the player.
            </summary>
            <param name="attacker">The <see cref="T:Exiled.API.Features.Player"/> attacking player.</param>
            <param name="amount">The <see langword="float"/> amount of damage to deal.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> of the damage dealt.</param>
            <param name="cassieAnnouncement">The <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase.CassieAnnouncement"/> cassie announcement to make if the damage kills the player.</param>
            <param name="deathText"> The <see langword="string"/> death text to appear on <see cref="T:Exiled.API.Features.Player"/> screen. </param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(Exiled.API.Features.Player,System.Single,UnityEngine.Vector3,System.Int32)">
            <summary>
            Hurts the player.
            </summary>
            <param name="attacker">The <see cref="T:Exiled.API.Features.Player"/> attacking player.</param>
            <param name="damage">The <see langword="float"/> amount of damage to deal.</param>
            <param name="force">The throw force.</param>
            <param name="armorPenetration">The armor penetration amount.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(System.Single,Exiled.API.Enums.DamageType,System.String)">
            <summary>
            Hurts the player.
            </summary>
            <param name="amount">The <see langword="float"/> amount of damage to deal.</param>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> of the damage dealt.</param>
            <param name="cassieAnnouncement">The <see langword="string"/> cassie announcement to make if the damage kills the player.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Hurt(System.Single,System.String,System.String)">
            <summary>
            Hurts the player.
            </summary>
            <param name="damage">The amount of damage to deal.</param>
            <param name="damageReason"> The reason for the damage being dealt.</param>
            <param name="cassieAnnouncement">The cassie announcement to make.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Heal(System.Single,System.Boolean)">
            <summary>
            Heals the player.
            </summary>
            <param name="amount">The amount of health to heal.</param>
            <param name="overrideMaxHealth">Whether or not healing should exceed their max health.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.UseItem(ItemType)">
            <summary>
            Forces the player to use an item.
            </summary>
            <param name="usableItem">The ItemType to be used.</param>
            <returns><see langword="true"/> if item was used successfully. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.UseItem(Exiled.API.Features.Items.Item)">
            <summary>
            Forces the player to use an item.
            </summary>
            <param name="item">The item to be used.</param>
            <returns><see langword="true"/> if item was used successfully. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Kill(PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Kills the player.
            </summary>
            <param name="damageHandlerBase">The <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kill(Exiled.API.Enums.DamageType,System.String)">
            <summary>
            Kills the player.
            </summary>
            <param name="damageType">The <see cref="T:Exiled.API.Enums.DamageType"/> the player has been killed.</param>
            <param name="cassieAnnouncement">The cassie announcement to make upon death.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kill(System.String,System.String)">
            <summary>
            Kills the player.
            </summary>
            <param name="deathReason">The reason the player has been killed.</param>
            <param name="cassieAnnouncement">The cassie announcement to make upon death.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Vaporize(Exiled.API.Features.Player,System.String)">
            <summary>
            Kills the player and vaporizes the body.
            </summary>
            <param name="attacker">The <see cref="T:Exiled.API.Features.Player"/> attacking player.</param>
            <param name="cassieAnnouncement">The cassie announcement to make upon death.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Ban(System.Int32,System.String,Exiled.API.Features.Player)">
            <summary>
            Bans the player.
            </summary>
            <param name="duration">The ban duration, in seconds.</param>
            <param name="reason">The ban reason.</param>
            <param name="issuer">The ban issuer.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Ban(System.TimeSpan,System.String,Exiled.API.Features.Player)">
            <summary>
            Bans the player.
            </summary>
            <param name="duration">The length of time to ban.</param>
            <param name="reason">The ban reason.</param>
            <param name="issuer">The ban issuer.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Kick(System.String,Exiled.API.Features.Player)">
            <summary>
            Kicks the player.
            </summary>
            <param name="reason">The kick reason.</param>
            <param name="issuer">The kick issuer.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Mute(System.Boolean)">
            <summary>
            Persistently mutes the player. For temporary mutes, see <see cref="P:Exiled.API.Features.Player.IsMuted"/> and <see cref="P:Exiled.API.Features.Player.IsIntercomMuted"/>.
            </summary>
            <param name="isIntercom">Whether or not this mute is for the intercom only.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.UnMute(System.Boolean)">
            <summary>
            Revokes a persistent mute. For temporary mutes, see <see cref="P:Exiled.API.Features.Player.IsMuted"/> and <see cref="P:Exiled.API.Features.Player.IsIntercomMuted"/>.
            </summary>
            <param name="isIntercom">Whether or not this un-mute is for the intercom only.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.BlinkTag">
            <summary>
            Blink the player's tag.
            </summary>
            <returns>Used to wait.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.RemoteAdminMessage(System.String,System.Boolean,System.String)">
            <summary>
            Sends a message to the player's Remote Admin console.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="success">Indicates whether or not the message should be highlighted as success.</param>
            <param name="pluginName">The plugin name.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SendStaffMessage(System.String,EncryptedChannelManager.EncryptedChannel)">
            <summary>
            Sends a message to the player's Remote Admin Chat.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="channel">Indicates whether or not the message should be highlighted as success.</param>
            <returns><see langword="true"/> if message was send; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.SendStaffPing(System.String,EncryptedChannelManager.EncryptedChannel)">
            <summary>
            Sends a message to the player's Remote Admin Chat.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="channel">Indicates whether or not the message should be highlighted as success.</param>
            <returns><see langword="true"/> if message was send; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.Broadcast(System.UInt16,System.String,Broadcast.BroadcastFlags,System.Boolean)">
            <summary>
            Shows a broadcast to the player. Doesn't get logged to the console and can be monospaced.
            </summary>
            <param name="duration">The broadcast duration.</param>
            <param name="message">The message to be broadcasted.</param>
            <param name="type">The broadcast type.</param>
            <param name="shouldClearPrevious">Clears all player's broadcasts before sending the new one.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearBroadcasts">
            <summary>
            Clears the player's brodcast. Doesn't get logged to the console.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.AddAmmo(Exiled.API.Enums.AmmoType,System.UInt16)">
            <summary>
            Adds the amount of a specified <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see> to the player's inventory.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to be added.</param>
            <param name="amount">The amount of ammo to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddAmmo(Exiled.API.Enums.FirearmType,System.UInt16)">
            <summary>
            Adds the amount of a weapon's <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see> to the player's inventory.
            </summary>
            <param name="weaponType">The <see cref="T:ItemType"/> of the weapon.</param>
            <param name="amount">The amount of ammo to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SetAmmo(Exiled.API.Enums.AmmoType,System.UInt16)">
            <summary>
            Sets the amount of a specified <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see> to the player's inventory.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to be set.</param>
            <param name="amount">The amount of ammo to be set.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.GetAmmo(Exiled.API.Enums.AmmoType)">
            <summary>
            Gets the ammo count of a specified <see cref="T:Exiled.API.Enums.AmmoType">ammo type</see> in a player's inventory.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> to be searched for in the player's inventory.</param>
            <returns>The specified <see cref="T:Exiled.API.Enums.AmmoType">ammo</see> count.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.DropAmmo(Exiled.API.Enums.AmmoType,System.UInt16,System.Boolean)">
            <summary>
            Drops a specific <see cref="T:Exiled.API.Enums.AmmoType"/> out of the player's inventory.
            </summary>
            <param name="ammoType">The <see cref="T:Exiled.API.Enums.AmmoType"/> that will be dropped.</param>
            <param name="amount">The amount of ammo that will be dropped.</param>
            <param name="checkMinimals">Whether or not ammo limits will be taken into consideration.</param>
            <returns><see langword="true"/> if ammo was dropped; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetAmmoLimit(Exiled.API.Enums.AmmoType)">
            <summary>
            Gets the maximum amount of ammo the player can hold, given the ammo <see cref="T:Exiled.API.Enums.AmmoType"/>.
            This method factors in the armor the player is wearing, as well as server configuration.
            For the maximum amount of ammo that can be given regardless of worn armor and server configuration, see <see cref="T:ServerConfigSynchronizer.AmmoLimit"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.AmmoType"/> of the ammo to check.</param>
            <returns>The maximum amount of ammo this player can carry. Guaranteed to be between <c>0</c> and <see cref="T:ServerConfigSynchronizer.AmmoLimit"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetCategoryLimit(ItemCategory)">
            <summary>
            Gets the maximum amount of an <see cref="T:ItemCategory"/> the player can hold, based on the armor the player is wearing, as well as server configuration.
            </summary>
            <param name="category">The <see cref="T:ItemCategory"/> to check.</param>
            <returns>The maximum amount of items in the category that the player can hold.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType)">
            <summary>
            Adds an item of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> given to the player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds an item of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> given to the player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Enums.FirearmType,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds an firearm of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="firearmType">The firearm to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> given to the player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType,System.Int32)">
            <summary>
            Adds the amount of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
            <param name="amount">The amount of items to be added.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(ItemType,System.Int32,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds the amount of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="itemType">The item to be added.</param>
            <param name="amount">The amount of items to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Enums.FirearmType,System.Int32,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds the amount of firearms of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="firearmType">The item to be added.</param>
            <param name="amount">The amount of items to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.IEnumerable{ItemType})">
            <summary>
            Adds the list of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="items">The list of items to be added.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.Dictionary{ItemType,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier}})">
            <summary>
            Adds the list of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:ItemType"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.Dictionary{Exiled.API.Enums.FirearmType,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier}})">
            <summary>
            Adds the list of items of the specified type with default durability(ammo/charge) and no mods to the player's inventory.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:ItemType"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Item)">
            <summary>
            Adds an item to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Firearm,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds an item to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Pickups.Pickup)">
            <summary>
            Adds an item to the player's inventory.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> of the item to be added.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> that was added.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Pickups.FirearmPickup,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds an item to the player's inventory.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.FirearmPickup"/> of the item to be added.</param>
            <param name="identifiers">The attachments to be added to <see cref="T:Exiled.API.Features.Pickups.Pickup"/> of the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> that was added.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(InventorySystem.Items.ItemBase,Exiled.API.Features.Items.Item)">
            <summary>
            Adds an item to the player's inventory.
            </summary>
            <param name="itemBase">The item to be added.</param>
            <param name="item">The <see cref="T:Exiled.API.Features.Items.Item"/> object of the item.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Item"/> that was added.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Item,System.Int32)">
            <summary>
            Adds the <paramref name="amount"/> of items to the player's inventory.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="amount">The amount of items to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(Exiled.API.Features.Items.Firearm,System.Int32,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier})">
            <summary>
            Adds the <paramref name="amount"/> of items to the player's inventory.
            </summary>
            <param name="firearm">The firearm to be added.</param>
            <param name="amount">The amount of items to be added.</param>
            <param name="identifiers">The attachments to be added to the item.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})">
            <summary>
            Adds the list of items to the player's inventory.
            </summary>
            <param name="items">The list of items to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.AddItem(System.Collections.Generic.Dictionary{Exiled.API.Features.Items.Firearm,System.Collections.Generic.IEnumerable{Exiled.API.Structs.AttachmentIdentifier}})">
            <summary>
            Adds the list of items to the player's inventory.
            </summary>
            <param name="firearms">The <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:Exiled.API.Features.Items.Firearm"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.TryAddCandy(InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Gives the player a specific candy. Will give the player a bag if they do not already have one.
            </summary>
            <param name="candyType">The <see cref="T:InventorySystem.Items.Usables.Scp330.CandyKindID"/> to give.</param>
            <returns><see langword="true"/> if a candy was given.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{ItemType})">
            <summary>
            Resets the player's inventory to the provided list of items, clearing any items it already possess.
            </summary>
            <param name="newItems">The new items that have to be added to the inventory.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})">
            <summary>
            Resets the player's inventory to the provided list of items, clearing any items it already possess.
            </summary>
            <param name="newItems">The new items that have to be added to the inventory.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearInventory(System.Boolean)">
            <summary>
            Clears the player's inventory, including all ammo and items.
            </summary>
            <param name="destroy">Whether or not to fully destroy the old items.</param>
            <seealso cref="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})"/>
            <seealso cref="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{ItemType})"/>
            <seealso cref="M:Exiled.API.Features.Player.DropItems"/>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearItems(System.Boolean)">
            <summary>
            Clears the player's items.
            </summary>
            <param name="destroy">Whether or not to fully destroy the old items.</param>
            <seealso cref="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})"/>
            <seealso cref="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{ItemType})"/>
            <seealso cref="M:Exiled.API.Features.Player.DropItems"/>
        </member>
        <member name="M:Exiled.API.Features.Player.ClearAmmo">
            <summary>
            Clears all ammo in the inventory.
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.ResetInventory(System.Collections.Generic.IEnumerable{Exiled.API.Features.Items.Item})"/>
            <seealso cref="M:Exiled.API.Features.Player.SetAmmo(Exiled.API.Enums.AmmoType,System.UInt16)"/>
            <seealso cref="M:Exiled.API.Features.Player.DropItems"/>
        </member>
        <member name="M:Exiled.API.Features.Player.DropItems">
            <summary>
            Drops all items in the player's inventory, including all ammo and items.
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.ClearInventory(System.Boolean)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.ThrowGrenade(Exiled.API.Enums.ProjectileType,System.Boolean)">
            <summary>
            Forces the player to throw a grenade.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.ProjectileType"/> to be thrown.</param>
            <param name="fullForce">Whether to throw with full or half force.</param>
            <returns>The <see cref="T:Exiled.API.Features.Items.Throwable"/> item that was spawned.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ThrowItem(Exiled.API.Features.Items.Throwable,System.Boolean)">
            <summary>
            Forcefully throws a <paramref name="throwable"/> item.
            </summary>
            <param name="throwable">The <see cref="T:Exiled.API.Features.Items.Throwable"/> to be thrown.</param>
            <param name="fullForce">Whether to throw with full or half force.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ShowHint(System.String,System.Single)">
            <summary>
            Shows a hint to the player.
            </summary>
            <param name="message">The message to be shown.</param>
            <param name="duration">The duration the text will be on screen.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ShowHint(Exiled.API.Features.Hint)">
            <summary>
            Show a hint to the player.
            </summary>
            <param name="hint">The hint to be shown.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ShowHitMarker(System.Single)">
            <summary>
            Sends a HitMarker to the player.
            </summary>
            <param name="size">The size of the hitmarker, ranging from <c>0</c> to <c><see cref="F:Hitmarker.MaxSize"/></c>).</param>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetSessionVariable``1(System.String,``0@)">
            <summary>
            Safely gets an <see cref="T:System.Object"/> from <see cref="P:Exiled.API.Features.Player.SessionVariables"/>, then casts it to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The returned object type.</typeparam>
            <param name="key">The key of the object to get.</param>
            <param name="result">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter is used.</param>
            <returns><see langword="true"/> if the SessionVariables contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.PlayShieldBreakSound">
            <summary>
            Plays the Hume Shield break sound effect from the player.
            </summary>
            <remarks>This will only function if the player's <see cref="P:Exiled.API.Features.Roles.FpcRole.IsHumeShieldedRole"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Player.GetModule``1">
            <summary>
            Gets a <see cref="T:PlayerStatsSystem.StatBase"/> module from the player's <see cref="T:PlayerStatsSystem.PlayerStats"/> component.
            </summary>
            <typeparam name="T">The returned object type.</typeparam>
            <returns>The <typeparamref name="T"/> module that was requested.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.IsEffectActive``1">
            <summary>
            Gets a <see cref="T:System.Boolean"/> describing whether or not the given <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> is currently enabled.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to check.</typeparam>
            <returns>A <see cref="T:System.Boolean"/> determining whether or not the player effect is active.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableAllEffects">
            <summary>
            Disables all currently active <see cref="T:CustomPlayerEffects.StatusEffectBase">status effects</see>.
            </summary>
            <seealso cref="M:Exiled.API.Features.Player.DisableEffects(System.Collections.Generic.IEnumerable{Exiled.API.Enums.EffectType})"/>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableAllEffects(Exiled.API.Enums.EffectCategory)">
            <summary>
            Disables all currently active <see cref="T:CustomPlayerEffects.StatusEffectBase">status effects</see>.
            </summary>
            <param name="category">A category to filter the disabled effects.</param>
            <seealso cref="M:Exiled.API.Features.Player.DisableAllEffects"/>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableEffect``1">
            <summary>
            Disables a specific <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> on the player.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to disable.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableEffect(Exiled.API.Enums.EffectType)">
            <summary>
            Disables a specific <see cref="T:Exiled.API.Enums.EffectType">status effect</see> on the player.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Enums.EffectType"/> to disable.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.DisableEffects(System.Collections.Generic.IEnumerable{Exiled.API.Enums.EffectType})">
            <summary>
            Disables a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> on the player.
            </summary>
            <param name="effects">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> to disable.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect``1(System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> on the player.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to enable.</typeparam>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>A bool indicating whether or not the effect was valid and successfully enabled.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect``1(System.Byte,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> on the player.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to enable.</typeparam>
            <param name="intensity">The intensity of the effect will be active for.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>A bool indicating whether or not the effect was valid and successfully enabled.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(CustomPlayerEffects.StatusEffectBase,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> on the player.
            </summary>
            <param name="statusEffect">The name of the <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>A bool indicating whether or not the effect was valid and successfully enabled.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(CustomPlayerEffects.StatusEffectBase,System.Byte,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> on the player.
            </summary>
            <param name="statusEffect">The name of the <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to enable.</param>
            <param name="intensity">The intensity of the effect will be active for.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>A bool indicating whether or not the effect was valid and successfully enabled.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(System.String,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> on the player.
            </summary>
            <param name="effectName">The name of the <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> instance of the activated effect.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(System.String,System.Byte,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see> on the player.
            </summary>
            <param name="effectName">The name of the <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to enable.</param>
            <param name="intensity">The intensity of the effect will be active for.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> instance of the activated effect.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(Exiled.API.Enums.EffectType,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:Exiled.API.Enums.EffectType">status effect</see> on the player.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.EffectType"/> to enable.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(Exiled.API.Enums.EffectType,System.Byte,System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:Exiled.API.Enums.EffectType">status effect</see> on the player.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.EffectType"/> to enable.</param>
            <param name="intensity">The intensity of the effect will be active for.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>return if the effect has been Enable.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffect(Exiled.API.Features.Effect)">
            <summary>
            Enables a <see cref="T:Exiled.API.Features.Effect">status effect</see> on the player.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Features.Effect"/> to enable.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SyncEffect(Exiled.API.Features.Effect)">
            <summary>
            Syncs the <see cref="T:Exiled.API.Features.Effect">status effect</see> on the player.
            </summary>
            <param name="effect">The <see cref="T:Exiled.API.Features.Effect"/> to sync.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ApplyRandomEffect(Exiled.API.Enums.EffectCategory,System.Single,System.Boolean)">
            <summary>
            Enables a random <see cref="T:Exiled.API.Enums.EffectType"/> on the player.
            </summary>
            <param name="category">An optional category to filter the applied effect. Set to <see cref="F:Exiled.API.Enums.EffectCategory.None"/> for any effect.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>A <see cref="T:Exiled.API.Enums.EffectType"/> that was given to the player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ApplyRandomEffect(Exiled.API.Enums.EffectCategory,System.Byte,System.Single,System.Boolean)">
            <summary>
            Enables a random <see cref="T:Exiled.API.Enums.EffectType"/> on the player.
            </summary>
            <param name="category">An optional category to filter the applied effect. Set to <see cref="F:Exiled.API.Enums.EffectCategory.None"/> for any effect.</param>
            <param name="intensity">The intensity of the effect will be active for.</param>
            <param name="duration">The amount of time the effect will be active for.</param>
            <param name="addDurationIfActive">If the effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
            <returns>A <see cref="T:Exiled.API.Enums.EffectType"/> that was given to the player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffects(System.Collections.Generic.IEnumerable{Exiled.API.Enums.EffectType},System.Single,System.Boolean)">
            <summary>
            Enables a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> on the player.
            </summary>
            <param name="types">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Enums.EffectType"/> to enable.</param>
            <param name="duration">The amount of time the effects will be active for.</param>
            <param name="addDurationIfActive">If an effect is already active, setting to <see langword="true"/> will add this duration onto the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.EnableEffects(System.Collections.Generic.IEnumerable{Exiled.API.Features.Effect})">
            <summary>
            Enables a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Effect"/> on the player.
            </summary>
            <param name="effects">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Effect"/> to enable.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.SyncEffects(System.Collections.Generic.IEnumerable{Exiled.API.Features.Effect})">
            <summary>
            Syncs a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Effect"/> on the player.
            </summary>
            <param name="effects">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Effect"/> to enable.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.GetEffect(Exiled.API.Enums.EffectType)">
            <summary>
            Gets an instance of <see cref="T:CustomPlayerEffects.StatusEffectBase"/> by <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
            <param name="effectType">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <returns>The <see cref="T:CustomPlayerEffects.StatusEffectBase"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetEffect(Exiled.API.Enums.EffectType,CustomPlayerEffects.StatusEffectBase@)">
            <summary>
            Tries to get an instance of <see cref="T:CustomPlayerEffects.StatusEffectBase"/> by <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.EffectType"/>.</param>
            <param name="statusEffect">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/>.</param>
            <returns>A bool indicating whether or not the <paramref name="statusEffect"/> was successfully gotten.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetEffect``1(``0@)">
            <summary>
            Tries to get an instance of <see cref="T:CustomPlayerEffects.StatusEffectBase"/> by <see cref="T:Exiled.API.Enums.EffectType"/>.
            </summary>
            <param name="statusEffect">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/>.</param>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to get.</typeparam>
            <returns>A bool indicating whether or not the <paramref name="statusEffect"/> was successfully gotten.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.GetEffectIntensity``1">
            <summary>
            Gets a <see cref="T:System.Byte"/> indicating the intensity of the given <see cref="T:CustomPlayerEffects.StatusEffectBase"></see>.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to check.</typeparam>
            <exception cref="T:System.ArgumentException">Thrown if the given type is not a valid <see cref="T:CustomPlayerEffects.StatusEffectBase"/>.</exception>
            <returns>The intensity of the effect.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.ChangeEffectIntensity``1(System.Byte,System.Single)">
            <summary>
            Changes the intensity of a <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <typeparam name="T">The <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to change the intensity of.</typeparam>
            <param name="intensity">The intensity of the effect.</param>
            <param name="duration">The new duration to add to the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ChangeEffectIntensity(Exiled.API.Enums.EffectType,System.Byte,System.Single)">
            <summary>
            Changes the intensity of a <see cref="T:CustomPlayerEffects.StatusEffectBase"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.EffectType"/> to change.</param>
            <param name="intensity">The new intensity to use.</param>
            <param name="duration">The new duration to add to the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ChangeEffectIntensity(System.String,System.Byte,System.Single)">
            <summary>
            Changes the intensity of a <see cref="T:CustomPlayerEffects.StatusEffectBase">status effect</see>.
            </summary>
            <param name="effectName">The name of the <see cref="T:CustomPlayerEffects.StatusEffectBase"/> to enable.</param>
            <param name="intensity">The intensity of the effect.</param>
            <param name="duration">The new length of the effect. Defaults to infinite length.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.OpenReportWindow(System.String)">
            <summary>
            Opens the report window.
            </summary>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.PlaceTantrum(System.Boolean)">
            <summary>
            Places a Tantrum (SCP-173's ability) under the player.
            </summary>
            <param name="isActive">Whether or not the tantrum will apply the <see cref="F:Exiled.API.Enums.EffectType.Stained"/> effect.</param>
            <remarks>If <paramref name="isActive"/> is <see langword="true"/>, the tantrum is moved slightly up from its original position. Otherwise, the collision will not be detected and the slowness will not work.</remarks>
            <returns>The <see cref="T:Exiled.API.Features.Hazards.TantrumHazard"/> instance..</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.AddAhp(System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Gives a new <see cref="T:PlayerStatsSystem.AhpStat">to the player</see>.
            </summary>
            <param name="amount">The amount to give the player.</param>
            <param name="limit">The maximum AHP for this stat.</param>
            <param name="decay">How much value is lost per second.</param>
            <param name="efficacy">Percent of incoming damage absorbed by this stat.</param>
            <param name="sustain">The number of seconds to delay the start of the decay.</param>
            <param name="persistant">Whether or not the process is removed when the value hits 0.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Reconnect(System.UInt16,System.Single,System.Boolean,RoundRestarting.RoundRestartType)">
            <summary>
            Reconnects the player to the server. Can be used to redirect them to another server on a different port but same IP.
            </summary>
            <param name="newPort">New port.</param>
            <param name="delay">Player reconnection delay.</param>
            <param name="reconnect">Whether or not player should be reconnected.</param>
            <param name="roundRestartType">Type of round restart.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.PlayGunSound(ItemType,System.Byte,System.Byte)">
            <inheritdoc cref="M:Exiled.API.Extensions.MirrorExtensions.PlayGunSound(Exiled.API.Features.Player,UnityEngine.Vector3,ItemType,System.Byte,System.Byte)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.PlaceBlood(UnityEngine.Vector3)">
            <inheritdoc cref="M:Exiled.API.Features.Map.PlaceBlood(UnityEngine.Vector3,UnityEngine.Vector3)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.GetNearCameras(System.Single)">
            <inheritdoc cref="M:Exiled.API.Features.Map.GetNearCameras(UnityEngine.Vector3,System.Single)"/>
        </member>
        <member name="M:Exiled.API.Features.Player.Teleport(UnityEngine.Vector3)">
            <summary>
            Teleports the player to the given <see cref="T:UnityEngine.Vector3"/> coordinates.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> coordinates to move the player to.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Teleport(System.Object)">
            <summary>
            Teleports the player to the given object, with no offset.
            </summary>
            <param name="obj">The object to teleport to.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Teleport(System.Object,UnityEngine.Vector3)">
            <summary>
            Teleports the player to the given object, offset by the defined offset value.
            </summary>
            <param name="obj">The object to teleport the player to.</param>
            <param name="offset">The offset to teleport.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RandomTeleport(System.Type)">
            <summary>
            Teleports player to a random object of a specific type.
            </summary>
            <param name="type">Object for teleport.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RandomTeleport(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Teleports the player to a random object.
            </summary>
            <param name="types">The list of object types to choose from.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.RandomTeleport``1">
            <summary>
            Teleports player to a random object of a specific type.
            </summary>
            <typeparam name="T">Object for teleport.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Player.AddComponent``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.AddComponent(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.AddComponent``1(System.Type,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.GetComponent``1">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.GetComponent``1(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.GetComponent(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetComponent``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetComponent(System.Type,Exiled.API.Features.Core.EActor@)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.TryGetComponent``1(System.Type,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.HasComponent``1(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.HasComponent(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Player.GetCooldownItem(ItemType)">
            <summary>
            Get the time cooldown on this ItemType.
            </summary>
            <param name="itemType">The itemtypes to choose for getting cooldown.</param>
            <returns>Return the time in seconds of the cooldowns.</returns>
        </member>
        <member name="M:Exiled.API.Features.Player.SetCooldownItem(System.Single,ItemType)">
            <summary>
            Set the time cooldown on this ItemType.
            </summary>
            <param name="time">The times for the cooldown.</param>
            <param name="itemType">The itemtypes to choose for being cooldown.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.Explode">
            <summary>
            Explode the player.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Player.Explode(Exiled.API.Enums.ProjectileType,Exiled.API.Features.Player)">
            <summary>
            Explode the player.
            </summary>
            <param name="projectileType">The projectile that will create the explosion.</param>
            <param name="attacker">The Player that will causing the explosion.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ExplodeEffect(Exiled.API.Enums.ProjectileType)">
            <summary>
            Spawn projectile effect on the player.
            </summary>
            <param name="projectileType">The projectile that will create the effect.</param>
        </member>
        <member name="M:Exiled.API.Features.Player.ToString">
            <summary>
            Converts the player in a human-readable format.
            </summary>
            <returns>A string containing Player-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Plugin`1">
            <summary>
            Expose how a plugin has to be made.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Plugin`1"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Author">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Version">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.RequiredExiledVersion">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.IgnoreRequiredVersionCheck">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Commands">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.Config">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.InternalTranslation">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.ConfigPath">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Plugin`1.TranslationPath">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnReloaded">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnRegisteringCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.OnUnregisteringCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Plugin`1.CompareTo(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Plugin`2">
            <summary>
            Expose how a plugin has to be made.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
            <typeparam name="TTranslation">The translation type.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Plugin`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Plugin`2"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Plugin`2.Translation">
            <summary>
            Gets the plugin translations.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Pools.DictionaryPool`2">
            <summary>
            Defines a system used to store and retrieve <see cref="T:System.Collections.Generic.Dictionary`2"/> objects.
            </summary>
            <typeparam name="TKey">The type of the key in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the value in the dictionary.</typeparam>
            <seealso cref="T:Exiled.API.Features.Pools.ListPool`1"/>
            <seealso cref="T:Exiled.API.Features.Pools.HashSetPool`1"/>
        </member>
        <member name="P:Exiled.API.Features.Pools.DictionaryPool`2.Pool">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pools.DictionaryPool`2"/> that stores dictionaries.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pools.DictionaryPool`2.Get">
            <summary>
            Rent a <see cref="T:System.Collections.Generic.Dictionary`2"/> temporarily.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pools.DictionaryPool`2.Get(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Rent a <see cref="T:System.Collections.Generic.Dictionary`2"/> temporarily. Fills it with the provided <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="pairs">The items to fill the dictionary with.</param>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pools.DictionaryPool`2.Return(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Returns a finished <see cref="T:System.Collections.Generic.Dictionary`2"/> to the pool, clearing all of its contents.
            </summary>
            <param name="obj">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to return.</param>
        </member>
        <member name="M:Exiled.API.Features.Pools.DictionaryPool`2.ToArrayReturn(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Returns the <see cref="T:System.Collections.Generic.Dictionary`2"/> to the pool and returns its contents as an array.
            </summary>
            <param name="obj">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to return.</param>
            <returns>The contents of the returned dictionary as an array.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pools.HashSetPool`1">
            <summary>
            Defines a system used to store and retrieve <see cref="T:System.Collections.Generic.HashSet`1"/> objects.
            </summary>
            <typeparam name="T">The type of the objects in the hash set.</typeparam>
            <seealso cref="T:Exiled.API.Features.Pools.DictionaryPool`2"/>
            <seealso cref="T:Exiled.API.Features.Pools.ListPool`1"/>
        </member>
        <member name="P:Exiled.API.Features.Pools.HashSetPool`1.Pool">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pools.HashSetPool`1"/> that stores hash sets.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pools.HashSetPool`1.Get">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pools.HashSetPool`1.Get(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Retrieves a stored object of type <see cref="T:System.Collections.Generic.HashSet`1"/>, or creates it if it does not exist. The hashset will be filled with all the provided <paramref name="items"/>.
            </summary>
            <param name="items">The items to fill the hashset with.</param>
            <returns>The stored object, or a new object, of type <see cref="T:System.Collections.Generic.HashSet`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pools.HashSetPool`1.Return(System.Collections.Generic.HashSet{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pools.HashSetPool`1.ToArrayReturn(System.Collections.Generic.HashSet{`0})">
            <summary>
            Returns the <see cref="T:System.Collections.Generic.HashSet`1"/> to the pool and returns its contents as an array.
            </summary>
            <param name="obj">The <see cref="T:System.Collections.Generic.HashSet`1"/> to return.</param>
            <returns>The contents of the returned hashset as an array.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pools.IPool`1">
            <summary>
            Defines the contract for a class that stores and retrieves commonly used objects.
            </summary>
            <typeparam name="T">The type that is stored in the pool.</typeparam>
        </member>
        <member name="M:Exiled.API.Features.Pools.IPool`1.Get">
            <summary>
            Retrieves a stored object of type <typeparamref name="T"/>, or creates it if it does not exist.
            </summary>
            <returns>The stored object, or a new object, of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pools.IPool`1.Return(`0)">
            <summary>
            Returns the object to the pool.
            </summary>
            <param name="obj">The object to return, of type <typeparamref name="T"/>.</param>
        </member>
        <member name="T:Exiled.API.Features.Pools.ListPool`1">
            <summary>
            Defines a system used to store and retrieve <see cref="T:System.Collections.Generic.List`1"/> objects.
            </summary>
            <typeparam name="T">The type of the objects in the list.</typeparam>
            <seealso cref="T:Exiled.API.Features.Pools.DictionaryPool`2"/>
            <seealso cref="T:Exiled.API.Features.Pools.HashSetPool`1"/>
        </member>
        <member name="P:Exiled.API.Features.Pools.ListPool`1.Pool">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pools.ListPool`1"/> that stores lists.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pools.ListPool`1.Get">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pools.ListPool`1.Get(System.Int32)">
            <summary>
            Retrieves a stored object of type <see cref="T:System.Collections.Generic.List`1"/>, or creates it if it does not exist. The capacity of the list will be equal to or greater than <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The capacity of content in the <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <returns>The stored object, or a new object, of type <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pools.ListPool`1.Get(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Retrieves a stored object of type <see cref="T:System.Collections.Generic.List`1"/>, or creates it if it does not exist. The list will be filled with all the provided <paramref name="items"/>.
            </summary>
            <param name="items">The items to fill the list with.</param>
            <returns>The stored object, or a new object, of type <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pools.ListPool`1.Return(System.Collections.Generic.List{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pools.ListPool`1.ToArrayReturn(System.Collections.Generic.List{`0})">
            <summary>
            Returns the <see cref="T:System.Collections.Generic.List`1"/> to the pool and returns its contents as an array.
            </summary>
            <param name="obj">The <see cref="T:System.Collections.Generic.List`1"/> to return.</param>
            <returns>The contents of the returned list as an array.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pools.QueuePool`1">
            <summary>
            Defines a system used to store and retrieve <see cref="T:System.Collections.Generic.Queue`1"/> objects.
            </summary>
            <typeparam name="T">The type of the objects in the list.</typeparam>
            <seealso cref="T:Exiled.API.Features.Pools.DictionaryPool`2"/>
            <seealso cref="T:Exiled.API.Features.Pools.HashSetPool`1"/>
        </member>
        <member name="P:Exiled.API.Features.Pools.QueuePool`1.Pool">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pools.QueuePool`1"/> that stores lists.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pools.QueuePool`1.Get">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pools.QueuePool`1.Get(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Retrieves a stored object of type <see cref="T:System.Collections.Generic.List`1"/>, or creates it if it does not exist. The list will be filled with all the provided <paramref name="items"/>.
            </summary>
            <param name="items">The items to fill the list with.</param>
            <returns>The stored object, or a new object, of type <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pools.QueuePool`1.Return(System.Collections.Generic.Queue{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pools.QueuePool`1.ToArrayReturn(System.Collections.Generic.Queue{`0})">
            <summary>
            Returns the <see cref="T:System.Collections.Generic.Queue`1"/> to the pool and returns its contents as an array.
            </summary>
            <param name="obj">The <see cref="T:System.Collections.Generic.Queue`1"/> to return.</param>
            <returns>The contents of the returned queue as an array.</returns>
        </member>
        <member name="T:Exiled.API.Features.Pools.StringBuilderPool">
            <summary>
            Defines a system used to store and retrieve <see cref="T:System.Text.StringBuilder"/> objects.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Pools.StringBuilderPool.Pool">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Pools.StringBuilderPool"/> that stores <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Pools.StringBuilderPool.Get">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pools.StringBuilderPool.Get(System.Int32)">
            <summary>
            Retrieves a stored object of type <see cref="T:System.Text.StringBuilder"/>, or creates it if it does not exist. The capacity of the StringBuilder will be equal to or greater than <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The capacity of content in the <see cref="T:System.Text.StringBuilder"/>.</param>
            <returns>The stored object, or a new object, of type <see cref="T:System.Text.StringBuilder"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Pools.StringBuilderPool.Return(System.Text.StringBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Pools.StringBuilderPool.ToStringReturn(System.Text.StringBuilder)">
            <summary>
            Returns the contents of the <see cref="T:System.Text.StringBuilder"/> and returns it to the pool.
            </summary>
            <param name="obj">The <see cref="T:System.Text.StringBuilder"/> to return.</param>
            <returns>The value of the <see cref="T:System.Text.StringBuilder"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Ragdoll">
            <summary>
            A set of tools to handle the ragdolls more easily.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Ragdoll.BasicRagdollToRagdoll">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/>s and their corresponding <see cref="T:Exiled.API.Features.Ragdoll"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.#ctor(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Ragdoll"/> class.
            </summary>
            <param name="ragdoll">The encapsulated <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/> which contains all the <see cref="T:Exiled.API.Features.Ragdoll"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.FreezeTime">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/>s clean up time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.AllowCleanUp">
            <summary>
            Gets a value indicating whether or not the clean up event can be executed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Base">
            <summary>
            Gets the <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/> instance of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Transform">
            <summary>
            Gets the <see cref="T:UnityEngine.Transform"/> of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.NetworkInfo">
            <summary>
            Gets or sets the ragdoll's <see cref="T:PlayerRoles.Ragdolls.RagdollData"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.DamageHandler">
            <summary>
            Gets or sets the ragdoll's <see cref="T:PlayerStatsSystem.DamageHandlerBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.SpecialRigidbodies">
            <summary>
            Gets the ragdoll's <see cref="T:UnityEngine.Rigidbody"/>[].
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.DeathAnimations">
            <summary>
            Gets all ragdoll's <see cref="T:DeathAnimations.DeathAnimation"/>[].
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.IsFrozen">
            <summary>
            Gets a value indicating whether or not the ragdoll has been already cleaned up.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.CanBeCleanedUp">
            <summary>
            Gets or sets a value indicating whether or not the ragdoll can be cleaned up.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Name">
            <summary>
            Gets the ragdoll's name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Nickname">
            <summary>
            Gets or sets the ragdoll's nickname.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.ExistenceTime">
            <summary>
            Gets the ragdoll's existence time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Owner">
            <summary>
            Gets or sets the owner <see cref="T:Exiled.API.Features.Player"/>. Can be <see langword="null"/> if the ragdoll does not have an owner.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.CreationTime">
            <summary>
            Gets or sets the time that the ragdoll was spawned.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Role">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.RoleTypeId"/> of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.IsExpired">
            <summary>
            Gets a value indicating whether or not the ragdoll has expired and SCP-049 is unable to revive it if was not being targets.
            <seealso cref="M:Exiled.API.Features.Roles.Scp049Role.CanResurrect(Exiled.API.Features.Ragdoll)"/>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.IsConsumed">
            <summary>
            Gets or sets a value indicating whether or not this ragdoll has been consumed by an SCP-049-2.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Room">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> the ragdoll is located in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Zone">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ZoneType"/> the ragdoll is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Position">
            <summary>
            Gets or sets the ragdoll's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Rotation">
            <summary>
            Gets or sets the ragdoll's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.Scale">
            <summary>
            Gets or sets the ragdoll's scale.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.DeathReason">
            <summary>
            Gets the ragdoll's death reason.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Ragdoll.IgnoredRagdolls">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/>'s that will be ignored by clean up event.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.GetLast(Exiled.API.Features.Player)">
            <summary>
            Gets the last ragdoll of the player.
            </summary>
            <param name="player">The player to get the last ragdoll.</param>
            <returns>The Last Ragdoll.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.TryCreate(PlayerRoles.Ragdolls.RagdollData,Exiled.API.Features.Ragdoll@)">
            <summary>
            Creates a new ragdoll.
            </summary>
            <param name="networkInfo">The data associated with the ragdoll.</param>
            <param name="ragdoll">Created ragdoll. Will be <see langword="null"/> if method retunred <see langword="false"/>.</param>
            <returns><see langword="true"/> if ragdoll was successfully created. Otherwise, false.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.TryCreate(PlayerRoles.RoleTypeId,System.String,PlayerStatsSystem.DamageHandlerBase,Exiled.API.Features.Ragdoll@,Exiled.API.Features.Player)">
            <summary>
            Creates a new ragdoll.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/> of the ragdoll.</param>
            <param name="name">The name of the ragdoll.</param>
            <param name="damageHandler">The damage handler responsible for the ragdoll's death.</param>
            <param name="ragdoll">Created ragdoll. Will be <see langword="null"/> if method retunred <see langword="false"/>.</param>
            <param name="owner">The optional owner of the ragdoll.</param>
            <returns>The ragdoll.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.TryCreate(PlayerRoles.RoleTypeId,System.String,System.String,Exiled.API.Features.Ragdoll@,Exiled.API.Features.Player)">
            <summary>
            Creates a new ragdoll.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/> of the ragdoll.</param>
            <param name="name">The name of the ragdoll.</param>
            <param name="deathReason">The reason the ragdoll died.</param>
            <param name="ragdoll">Created ragdoll. Will be <see langword="null"/> if method retunred <see langword="false"/>.</param>
            <param name="owner">The optional owner of the ragdoll.</param>
            <returns>The ragdoll.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.CreateAndSpawn(PlayerRoles.Ragdolls.RagdollData)">
            <summary>
            Creates and spawns a new ragdoll.
            </summary>
            <param name="networkInfo">The data associated with the ragdoll.</param>
            <returns>The ragdoll.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.CreateAndSpawn(PlayerRoles.RoleTypeId,System.String,PlayerStatsSystem.DamageHandlerBase,UnityEngine.Vector3,UnityEngine.Quaternion,Exiled.API.Features.Player)">
            <summary>
            Creates and spawns a new ragdoll.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/> of the ragdoll.</param>
            <param name="name">The name of the ragdoll.</param>
            <param name="damageHandler">The damage handler responsible for the ragdoll's death.</param>
            <param name="position">The position of the ragdoll.</param>
            <param name="rotation">The rotation of the ragdoll.</param>
            <param name="owner">The optional owner of the ragdoll.</param>
            <returns>The ragdoll.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.CreateAndSpawn(PlayerRoles.RoleTypeId,System.String,System.String,UnityEngine.Vector3,UnityEngine.Quaternion,Exiled.API.Features.Player)">
            <summary>
            Creates and spawns a new ragdoll.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/> of the ragdoll.</param>
            <param name="name">The name of the ragdoll.</param>
            <param name="deathReason">The reason the ragdoll died.</param>
            <param name="position">The position of the ragdoll.</param>
            <param name="rotation">The rotation of the ragdoll.</param>
            <param name="owner">The optional owner of the ragdoll.</param>
            <returns>The ragdoll.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Get(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Ragdoll"/> belonging to the <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/>, if any.
            </summary>
            <param name="ragdoll">The <see cref="T:PlayerRoles.Ragdolls.BasicRagdoll"/> to get.</param>
            <returns>A <see cref="T:Exiled.API.Features.Ragdoll"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Get(Exiled.API.Features.Player)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/> belonging to the <see cref="T:Exiled.API.Features.Player"/>, if any.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to get.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Get(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player})">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/> belonging to the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/>, if any.
            </summary>
            <param name="players">The <see cref="T:Exiled.API.Features.Player"/>s to get.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Ragdoll"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Destroy">
            <summary>
            Destroys the ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.Spawn">
            <summary>
            Spawns the ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.UnSpawn">
            <summary>
            Un-spawns the ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Ragdoll.ToString">
            <summary>
            Returns the Ragdoll in a human-readable format.
            </summary>
            <returns>A string containing Ragdoll-related data.</returns>
        </member>
        <member name="T:Exiled.API.Features.Recontainer">
            <summary>
            A wrapper class for <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079Recontainer"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.Base">
            <summary>
            Gets the base <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079Recontainer"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ContainmentGates">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Doors.Door"/> which contains all the <see cref="T:Exiled.API.Features.Doors.Door"/> instances used for the containment zone.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsCassieBusy">
            <summary>
            Gets a value indicating whether the C.A.S.S.I.E is currently busy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsContainmentZoneOpen">
            <summary>
            Gets or sets a value indicating whether the containment zone is open.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsContainmentZoneLocked">
            <summary>
            Gets or sets a value indicating whether the containment zone is locked.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.OverchargeDelay">
            <summary>
            Gets or sets the delay to wait before overcharging.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.LockdownDuration">
            <summary>
            Gets or sets the lockdown duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorButton">
            <summary>
            Gets the activator button's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorButtonPosition">
            <summary>
            Gets or sets the <see cref="P:Exiled.API.Features.Recontainer.ActivatorButton"/>'s position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorWindow">
            <summary>
            Gets the activator's window.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorPosition">
            <summary>
            Gets the activator's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ActivatorLerpSpeed">
            <summary>
            Gets or sets the activator's lerp speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ProgressAnnouncement">
            <summary>
            Gets or sets the announcement played to warn players about the contaiment sequence's progress.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.CountdownAnnouncement">
            <summary>
            Gets or sets the announcement played when counting down to overcharge.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ContainmentSuccessAnnouncement">
            <summary>
            Gets or sets the announcement played when the contaiment is successful done.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.ContainmentFailureAnnouncement">
            <summary>
            Gets or sets the announcement played when the contaiment is failed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.AllGeneratorsActivatedAnnouncement">
            <summary>
            Gets or sets the announcement played when all the generators have been activated.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsContainmentSequenceDone">
            <summary>
            Gets or sets a value indicating whether the containment sequence is done.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.IsContainmentSequenceSuccessful">
            <summary>
            Gets or sets a value indicating whether the containment sequence is successfully done.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Recontainer.LockedDoors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Doors.Door"/> which contains all the <see cref="T:Exiled.API.Features.Doors.Door"/> instances locked during the overcharge procedure.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.TryKillScp079">
            <summary>
            Tries to kill SCP-079.
            </summary>
            <returns><see langword="true"/> if SCP-079 was successfully contained; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.PlayAnnouncement(System.String,System.Single)">
            <summary>
            Playes an announcement.
            </summary>
            <param name="announcement">The announcement to play.</param>
            <param name="glitchyMultiplier">The glitchy multiplier.</param>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.BeginOvercharge">
            <summary>
            Begins the overcharge procedure.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.EndOvercharge">
            <summary>
            Ends the overcharge procedure.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.AnnounceEngagementStatus">
            <summary>
            Announces the engagement status.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.AnnounceEngagementStatus(System.Int32)">
            <summary>
            Announces the engagement status.
            </summary>
            <param name="engagedGenerators">The engaged generators count.</param>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.RefreshEngamentStatus">
            <summary>
            Refreshes the engagement status.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.Recontain">
            <summary>
            Begins the recontainment procedure.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.RefreshActivator">
            <summary>
            Refreshes the activator.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Recontainer.BreakGlass">
            <summary>
            Breaks the glass protecting the activator button.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Respawn">
            <summary>
            A set of tools to handle team respawns more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.NtfHelicopter">
            <summary>
            Gets the NTF Helicopter's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.ChaosVan">
            <summary>
            Gets the Chaos Van's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.NextKnownTeam">
            <summary>
            Gets or sets the next known <see cref="T:Respawning.SpawnableTeamType"/> that will spawn.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.TimeUntilNextPhase">
            <summary>
            Gets or sets the amount of seconds before the next respawn phase will occur.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.TimeUntilSpawnWave">
            <summary>
            Gets a <see cref="T:System.TimeSpan"/> indicating the amount of time before the next respawn wave will occur.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.NextTeamTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> indicating the moment in UTC time the next respawn wave will occur.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.IsSpawning">
            <summary>
            Gets a value indicating whether or not a team is currently being spawned or the animations are playing for a team.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.ChaosTickets">
            <summary>
            Gets or sets the amount of spawn tickets belonging to the Chaos Insurgency.
            </summary>
            <seealso cref="P:Exiled.API.Features.Respawn.NtfTickets"/>
        </member>
        <member name="P:Exiled.API.Features.Respawn.NtfTickets">
            <summary>
            Gets or sets the amount of spawn tickets belonging to the NTF.
            </summary>
            <seealso cref="P:Exiled.API.Features.Respawn.ChaosTickets"/>
        </member>
        <member name="P:Exiled.API.Features.Respawn.ProtectionEnabled">
            <summary>
            Gets or sets a value indicating whether or not spawn protection is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.ProtectionTime">
            <summary>
            Gets or sets the spawn protection time, in seconds.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.ProtectedCanShoot">
            <summary>
            Gets or sets a value indicating whether or not spawn protected players can shoot.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Respawn.ProtectedTeams">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:PlayerRoles.Team"/> that have spawn protection.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffect(System.Byte)">
            <summary>
            Play an effect when a certain class spawns.
            </summary>
            <param name="effect">The effect to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffect(Exiled.API.Enums.RespawnEffectType)">
            <summary>
            Play an effect when a certain class spawns.
            </summary>
            <param name="effect">The effect to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffects(System.Byte[])">
            <summary>
            Play effects when a certain class spawns.
            </summary>
            <param name="effects">The effects to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.PlayEffects(Exiled.API.Enums.RespawnEffectType[])">
            <summary>
            Play effects when a certain class spawns.
            </summary>
            <param name="effects">The effects to be played.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.SummonNtfChopper">
            <summary>
            Summons the NTF chopper.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Respawn.SummonChaosInsurgencyVan(System.Boolean)">
            <summary>
            Summons the <see cref="F:Exiled.API.Enums.Side.ChaosInsurgency"/> van.
            </summary>
            <param name="playMusic">Whether or not to play the Chaos Insurgency spawn music.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.GrantTickets(Respawning.SpawnableTeamType,System.Single)">
            <summary>
            Grants tickets to a <see cref="T:Respawning.SpawnableTeamType"/>.
            </summary>
            <param name="team">The <see cref="T:Respawning.SpawnableTeamType"/> to grant tickets to.</param>
            <param name="amount">The amount of tickets to grant.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.RemoveTickets(Respawning.SpawnableTeamType,System.Single)">
            <summary>
            Removes tickets from a <see cref="T:Respawning.SpawnableTeamType"/>.
            </summary>
            <param name="team">The <see cref="T:Respawning.SpawnableTeamType"/> to remove tickets from.</param>
            <param name="amount">The amount of tickets to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.ModifyTickets(Respawning.SpawnableTeamType,System.Single)">
            <summary>
            Modify tickets from a <see cref="T:Respawning.SpawnableTeamType"/>.
            </summary>
            <param name="team">The <see cref="T:Respawning.SpawnableTeamType"/> to modify tickets from.</param>
            <param name="amount">The amount of tickets to modify.</param>
        </member>
        <member name="M:Exiled.API.Features.Respawn.ForceWave(Respawning.SpawnableTeamType,System.Boolean)">
            <summary>
            Forces a spawn of the given <see cref="T:Respawning.SpawnableTeamType"/>.
            </summary>
            <param name="team">The <see cref="T:Respawning.SpawnableTeamType"/> to spawn.</param>
            <param name="playEffects">Whether or not effects will be played with the spawn.</param>
        </member>
        <member name="T:Exiled.API.Features.Roles.FilmMakerRole">
            <summary>
            Represents the base-game FilmMaker role.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.FilmMakerRole.#ctor(PlayerRoles.Filmmaker.FilmmakerRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.FilmMakerRole"/> class.
            </summary>
            <param name="filmmakerRole">the base <see cref="T:PlayerRoles.Filmmaker.FilmmakerRole"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.FilmMakerRole.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.FilmMakerRole.CameraRotation">
            <summary>
            Gets or sets the filmmaker's camera rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FilmMakerRole.Base">
            <summary>
            Gets the base <see cref="T:PlayerRoles.Filmmaker.FilmmakerRole"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Roles.FpcRole">
            <summary>
            Defines a role that represents an fpc class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.FpcRole.#ctor(PlayerRoles.FirstPersonControl.FpcStandardRoleBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.FpcRole"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayerRoleBase"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.FpcRole.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.API.Features.Roles.FpcRole"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.FirstPersonController">
            <summary>
            Gets the <see cref="P:Exiled.API.Features.Roles.FpcRole.FirstPersonController"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.RelativePosition">
            <summary>
            Gets or sets the player's relative position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.RotationDetected">
            <summary>
            Gets or sets a value indicating whether if a rotation is detected on the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.WalkingSpeed">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Roles.Role"/> walking speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.SprintingSpeed">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Roles.Role"/> sprinting speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.JumpingSpeed">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Roles.Role"/> jumping speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.CrouchingSpeed">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Roles.Role"/> crouching speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.Velocity">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Player"/> velocity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.MovementDetected">
            <summary>
            Gets or sets a value indicating whether if a movement is detected on a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.CanSendInputs">
            <summary>
            Gets a value indicating whether or not the player can send inputs.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsInvisible">
            <summary>
            Gets or sets a value indicating whether or not the player is invisible.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsUsingStamina">
            <summary>
            Gets or sets a value indicating whether or not the player should use stamina system. Resets on death.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.StaminaUsageMultiplier">
            <summary>
            Gets or sets the stamina usage multiplier. Resets on death.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.StaminaRegenMultiplier">
            <summary>
            Gets or sets the stamina regen multiplier. Resets on death.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsInvisibleFor">
            <summary>
            Gets a list of players who can't see the player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.MoveState">
            <summary>
            Gets or sets the player's current <see cref="T:PlayerRoles.FirstPersonControl.PlayerMovementState"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsCrouching">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is crouching or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsGrounded">
            <summary>
            Gets a value indicating whether or not the player is on the ground.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.MovementSpeed">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/>'s current movement speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsInDarkness">
            <summary>
            Gets a value indicating whether or not the <see cref="T:Exiled.API.Features.Player"/> is in darkness.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.VerticalRotation">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/>'s vertical rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.HorizontalRotation">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/>'s horizontal rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsAfk">
            <summary>
            Gets a value indicating whether or not the <see cref="T:Exiled.API.Features.Player"/> is AFK.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsHumeShieldedRole">
            <summary>
            Gets a value indicating whether or not this role is protected by a hume shield.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.FpcRole.IsNoclipEnabled">
            <summary>
            Gets or sets a value indicating whether or not the player has noclip enabled.
            </summary>
            <returns><see cref="T:System.Boolean"/> indicating status.</returns>
            <remarks>For permitting a player to enter and exit noclip freely, see <see cref="P:Exiled.API.Features.Player.IsNoclipPermitted"/>.</remarks>
            <seealso cref="P:Exiled.API.Features.Player.IsNoclipPermitted"/>
        </member>
        <member name="M:Exiled.API.Features.Roles.FpcRole.ResetStamina(System.Boolean)">
            <summary>
            Resets the <see cref="T:Exiled.API.Features.Player"/>'s stamina.
            </summary>
            <param name="multipliers">Resets <see cref="P:Exiled.API.Features.Roles.FpcRole.StaminaUsageMultiplier"/> and <see cref="P:Exiled.API.Features.Roles.FpcRole.StaminaRegenMultiplier"/>.</param>
        </member>
        <member name="T:Exiled.API.Features.Roles.HumanRole">
            <summary>
            Defines a role that represents a human class.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.HumanRole.#ctor(PlayerRoles.HumanRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.HumanRole"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.HumanRole"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.HumanRole.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.HumanRole.SpawnableTeamType">
            <summary>
            Gets or sets the <see cref="P:Exiled.API.Features.Roles.HumanRole.SpawnableTeamType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.HumanRole.UnitName">
            <summary>
            Gets the player's unit name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.HumanRole.UnitNameId">
            <summary>
            Gets or sets the <see cref="P:Exiled.API.Features.Roles.HumanRole.UnitNameId"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.HumanRole.UsesUnitNames">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Roles.HumanRole"/> uses unit names or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.HumanRole.Base">
            <summary>
            Gets the game <see cref="T:PlayerRoles.HumanRole"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.HumanRole.GetArmorEfficacy(HitboxType)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.HumanRole"/> armor efficacy based on a specific <see cref="T:HitboxType"/> and the armor the <see cref="P:Exiled.API.Features.Roles.Role.Owner"/> is wearing.
            </summary>
            <param name="hitbox">The <see cref="T:HitboxType"/>.</param>
            <returns>The armor efficacy.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.IHumeShieldRole">
            <summary>
            Represents a role that supports a hume shield.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.IHumeShieldRole.HumeShieldModule">
            <summary>
            Gets a reference to the role's <see cref="T:PlayerRoles.PlayableScps.HumeShield.HumeShieldModuleBase"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Roles.ISubroutinedScpRole">
            <summary>
            Defines a interface that represents a <see cref="T:PlayerRoles.Subroutines.SubroutineManagerModule"/> in player's role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.ISubroutinedScpRole.SubroutineModule">
            <summary>
            Gets the SCP <see cref="T:PlayerRoles.Subroutines.SubroutineManagerModule"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Roles.NoneRole">
            <summary>
            Defines a role that represents players with no role.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.NoneRole.#ctor(PlayerRoles.PlayerRoleBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.NoneRole"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.NoneRole"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.NoneRole.Type">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Roles.OverwatchRole">
            <summary>
            Defines a role that represents a player with overwatch enabled.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.OverwatchRole.#ctor(PlayerRoles.Spectating.OverwatchRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.OverwatchRole"/> class.
            </summary>
            <param name="baseRole">The encapsulated <see cref="T:PlayerRoles.Spectating.OverwatchRole"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.OverwatchRole.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.OverwatchRole.Base">
            <summary>
            Gets the game <see cref="T:PlayerRoles.Spectating.OverwatchRole"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.OverwatchRole.GetObfuscatedRole">
            <summary>
            Gets the Overwatch role for a player.
            </summary>
            <returns>The overwatch RoleType.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Role">
            <summary>
            Defines the class for role-related classes.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.#ctor(PlayerRoles.PlayerRoleBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayerRoleBase"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Owner">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> this role is referring to.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Type">
            <summary>
            Gets the <see cref="T:PlayerRoles.RoleTypeId"/> of this <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Base">
            <summary>
            Gets the base <see cref="T:PlayerRoles.PlayerRoleBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.SpawnReason">
            <summary>
            Gets the <see cref="T:PlayerRoles.RoleChangeReason"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.SpawnFlags">
            <summary>
            Gets the <see cref="T:PlayerRoles.RoleSpawnFlags"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Team">
            <summary>
            Gets the <see cref="T:PlayerRoles.Team"/> of this <see cref="T:Exiled.API.Features.Roles.Role"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Side">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.Side"/> of this <see cref="T:Exiled.API.Features.Roles.Role"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Color">
            <summary>
            Gets the <see cref="T:UnityEngine.Color"/> of this <see cref="T:Exiled.API.Features.Roles.Role"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.Name">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Role"/> full name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.ActiveTime">
            <summary>
            Gets the last time the <see cref="T:Exiled.API.Features.Roles.Role"/> was active.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.IsDead">
            <summary>
            Gets a value indicating whether or not this role represents a dead role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.IsAlive">
            <summary>
            Gets a value indicating whether or not this role represents a living role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.IsValid">
            <summary>
            Gets a value indicating whether or not this role is still valid. This will only ever be <see langword="false"/> if the Role is stored and accessed at a later date.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Role.RandomSpawnLocation">
            <summary>
            Gets a random spawn position of this role.
            </summary>
            <returns>The spawn position.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Implicit(Exiled.API.Features.Roles.Role)~PlayerRoles.RoleTypeId">
            <summary>
            Converts a role to its appropriate <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="role">The role.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Equality(Exiled.API.Features.Roles.Role,Exiled.API.Features.Roles.Role)">
            <summary>
            Returns whether or not 2 roles are the same.
            </summary>
            <param name="left">The role.</param>
            <param name="right">The other role.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Inequality(Exiled.API.Features.Roles.Role,Exiled.API.Features.Roles.Role)">
            <summary>
            Returns whether or not the two roles are different.
            </summary>
            <param name="left">The role.</param>
            <param name="right">The other role.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Equality(Exiled.API.Features.Roles.Role,PlayerRoles.RoleTypeId)">
            <summary>
            Returns whether or not the role has the same RoleTypeId as the given <paramref name="typeId"/>.
            </summary>
            <param name="role">The <see cref="T:Exiled.API.Features.Roles.Role"/>.</param>
            <param name="typeId">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Inequality(Exiled.API.Features.Roles.Role,PlayerRoles.RoleTypeId)">
            <summary>
            Returns whether or not the role has a different RoleTypeId as the given <paramref name="typeId"/>.
            </summary>
            <param name="role">The <see cref="T:Exiled.API.Features.Roles.Role"/>.</param>
            <param name="typeId">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Equality(PlayerRoles.RoleTypeId,Exiled.API.Features.Roles.Role)">
            <summary>
            Returns whether or not the role has the same RoleTypeId as the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <param name="role">The <see cref="T:Exiled.API.Features.Roles.Role"/>.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.op_Inequality(PlayerRoles.RoleTypeId,Exiled.API.Features.Roles.Role)">
            <summary>
            Returns whether or not the role has a different RoleTypeId as the given <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:PlayerRoles.RoleTypeId"/>.</param>
            <param name="role">The <see cref="T:Exiled.API.Features.Roles.Role"/>.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.ToString">
            <summary>
            Returns the role in a human-readable format.
            </summary>
            <returns>A string containing role-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.Set(PlayerRoles.RoleTypeId,Exiled.API.Enums.SpawnReason)">
            <summary>
            Sets the player's <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="newRole">The new <see cref="T:PlayerRoles.RoleTypeId"/> to be set.</param>
            <param name="reason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> defining why the player's role was changed.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.Set(PlayerRoles.RoleTypeId,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Sets the player's <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="newRole">The new <see cref="T:PlayerRoles.RoleTypeId"/> to be set.</param>
            <param name="spawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> defining player spawn logic.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.Set(PlayerRoles.RoleTypeId,Exiled.API.Enums.SpawnReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Sets the player's <see cref="T:PlayerRoles.RoleTypeId"/>.
            </summary>
            <param name="newRole">The new <see cref="T:PlayerRoles.RoleTypeId"/> to be set.</param>
            <param name="reason">The <see cref="T:Exiled.API.Enums.SpawnReason"/> defining why the player's role was changed.</param>
            <param name="spawnFlags">The <see cref="T:PlayerRoles.RoleSpawnFlags"/> defining player spawn logic.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Role.Create(PlayerRoles.PlayerRoleBase)">
            <summary>
            Creates a role from <see cref="T:PlayerRoles.RoleTypeId"/> and <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="role">The <see cref="T:PlayerRoles.PlayerRoleBase"/>.</param>
            <returns>The created <see cref="T:Exiled.API.Features.Roles.Role"/> instance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp0492Role">
            <summary>
            Defines a role that represents SCP-049-2.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp0492Role.#ctor(PlayerRoles.PlayableScps.Scp049.Zombies.ZombieRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp0492Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieRole"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.HumeShieldModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.AttackAbility">
            <summary>
            Gets SCP-049-2's <see cref="T:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieAttackAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.BloodlustAbility">
            <summary>
            Gets SCP-049-2's <see cref="T:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieBloodlustAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.ConsumeAbility">
            <summary>
            Gets SCP-049-2's <see cref="T:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.ResurrectNumber">
            <summary>
            Gets or sets the amount of times this SCP-049-2 has been resurrected.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.AttackDamage">
            <summary>
            Gets the SCP-049-2 attack damage.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.SimulatedStare">
            <summary>
            Gets or sets a value indicating the amount of time to simulate SCP-049-2's Bloodlust ability.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.BloodlustActive">
            <summary>
            Gets a value indicating whether or not SCP-049-2 is currently pursuing a target (Bloodlust ability).
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.IsConsuming">
            <summary>
            Gets a value indicating whether or not SCP-049-2 is consuming a ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.RagdollConsuming">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Ragdoll"/> that SCP-049-2 is currently consuming. Will be <see langword="null"/> if <see cref="P:Exiled.API.Features.Roles.Scp0492Role.IsConsuming"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp0492Role.AttackCooldown">
            <summary>
            Gets the amount of time in between SCP-049-2 attacks.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp0492Role.IsInConsumeRange(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Returns a <see langword="bool"/> indicating whether or not SCP-049-2 is close enough to a ragdoll to consume it.
            </summary>
            <remarks>This method only returns whether or not SCP-049-2 is close enough to the body to consume it; the body may have been consumed previously. Make sure to check <see cref="P:Exiled.API.Features.Ragdoll.IsConsumed"/> to ensure the body can be consumed.</remarks>
            <param name="ragdoll">The ragdoll to check.</param>
            <returns><see langword="true"/> if close enough to consume the body; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp0492Role.IsInConsumeRange(Exiled.API.Features.Ragdoll)">
            <summary>
            Returns a <see langword="bool"/> indicating whether or not SCP-049-2 is close enough to a ragdoll to consume it.
            </summary>
            <remarks>This method only returns whether or not SCP-049-2 is close enough to the body to consume it; the body may have been consumed previously. Make sure to check <see cref="P:Exiled.API.Features.Ragdoll.IsConsumed"/> to ensure the body can be consumed.</remarks>
            <param name="ragdoll">The ragdoll to check.</param>
            <returns><see langword="true"/> if close enough to consume the body; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp049Role">
            <summary>
            Defines a role that represents SCP-049.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.#ctor(PlayerRoles.PlayableScps.Scp049.Scp049Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp049Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049Role"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.TurnedPlayers">
            <summary>
            Gets a list of players who are turned away from SCP-049 Sense Ability.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.HumeShieldModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.ResurrectAbility">
            <summary>
            Gets SCP-049's <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049ResurrectAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.AttackAbility">
            <summary>
            Gets SCP-049's <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049AttackAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.CallAbility">
            <summary>
            Gets SCP-049's <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049CallAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.SenseAbility">
            <summary>
            Gets SCP-049's <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.IsRecalling">
            <summary>
            Gets a value indicating whether or not SCP-049 is currently reviving a player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.IsCallActive">
            <summary>
            Gets a value indicating whether or not SCP-049's "Doctor's Call" ability is currently active.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.RecallingPlayer">
            <summary>
            Gets the player that is currently being revived by SCP-049. Will be <see langword="null"/> if <see cref="P:Exiled.API.Features.Roles.Scp049Role.IsRecalling"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.RecallingRagdoll">
            <summary>
            Gets the ragdoll that is currently being revived by SCP-049. Will be <see langword="null"/> if <see cref="P:Exiled.API.Features.Roles.Scp049Role.IsRecalling"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.DeadZombies">
            <summary>
            Gets all the dead zombies.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.CallAbilityDuration">
            <summary>
            Gets or sets how mush time the Call Ability will be effective.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.CallAbilityBaseCooldown">
            <summary>
            Gets or sets the Cooldown of the Call Ability.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.SenseAbilityBaseCooldown">
            <summary>
            Gets or sets the Cooldown of the Sense Ability.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.SenseAbilityReducedCooldown">
            <summary>
            Gets or sets the Cooldown of the Sense Ability when you lost your target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.SenseAbilityDuration">
            <summary>
            Gets or sets the Cooldown of the Sense Ability when it's failed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.SenseAbilityFailCooldown">
            <summary>
            Gets or sets how mush time the Sense Ability will be effective.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.ResurrectedPlayers">
            <summary>
            Gets all the resurrected players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.CallCooldown">
            <summary>
            Gets or sets the amount of time before SCP-049 can use its Doctor's Call ability again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.GoodSenseCooldown">
            <summary>
            Gets or sets the amount of time before SCP-049 can use its Good Sense of the Doctor ability again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.RemainingAttackCooldown">
            <summary>
            Gets or sets the amount of time before SCP-049 can attack again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.RemainingCallDuration">
            <summary>
            Gets or sets the duration of the <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049CallAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.RemainingGoodSenseDuration">
            <summary>
            Gets or sets the duration of the <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.SenseDistance">
            <summary>
            Gets or sets the distance of the Sense Ability.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp049Role.Base">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049Role"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.LoseSenseTarget">
            <summary>
            Lose the current target of the Good Sense ability.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.Resurrect(Exiled.API.Features.Player)">
            <summary>
            Resurrects a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/>to resurrect.</param>
            <returns>The Resurrected player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.Resurrect(Exiled.API.Features.Ragdoll)">
            <summary>
            Resurrects a <see cref="T:Exiled.API.Features.Ragdoll"/> owner.
            </summary>
            <param name="ragdoll">The Ragdoll to resurrect.</param>
            <returns>The Resurrected Ragdoll.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.Attack(Exiled.API.Features.Player)">
            <summary>
            Attacks a Player.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/>to attack.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.Sense(Exiled.API.Features.Player)">
            <summary>
            Trigger the Sense Ability on the specified <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The Player to sense.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.RefreshCallDuration">
            <summary>
            Refresh the <see cref="T:PlayerRoles.PlayableScps.Scp049.Scp049CallAbility"/> duration.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.GetResurrectionCount(Exiled.API.Features.Player)">
            <summary>
            Gets the amount of resurrections of a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/>to check.</param>
            <returns>The amount of resurrections of the checked player.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.CanResurrect(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Returns a <see langword="bool"/> indicating whether or not the ragdoll can be resurrected by SCP-049.
            </summary>
            <param name="ragdoll">The ragdoll to check.</param>
            <returns><see langword="true"/> if the body can be revived; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.CanResurrect(Exiled.API.Features.Ragdoll)">
            <summary>
            Returns a <see langword="bool"/> indicating whether or not the ragdoll can be resurrected by SCP-049.
            </summary>
            <param name="ragdoll">The ragdoll to check.</param>
            <returns><see langword="true"/> if the body can be revived; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.IsInRecallRange(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Returns a <see langword="bool"/> indicating whether or not SCP-049 is close enough to a ragdoll to revive it.
            </summary>
            <remarks>This method only returns whether or not SCP-049 is close enough to the body to revive it; the body may have expired. Make sure to check <see cref="M:Exiled.API.Features.Roles.Scp049Role.CanResurrect(PlayerRoles.Ragdolls.BasicRagdoll)"/> to ensure the body can be revived.</remarks>
            <param name="ragdoll">The ragdoll to check.</param>
            <returns><see langword="true"/> if close enough to revive the body; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.IsInRecallRange(Exiled.API.Features.Ragdoll)">
            <summary>
            Returns a <see langword="bool"/> indicating whether or not SCP-049 is close enough to a ragdoll to revive it.
            </summary>
            <remarks>This method only returns whether or not SCP-049 is close enough to the body to revive it; the body may have expired. Make sure to check <see cref="M:Exiled.API.Features.Roles.Scp049Role.CanResurrect(Exiled.API.Features.Ragdoll)"/> to ensure the body can be revived.</remarks>
            <param name="ragdoll">The ragdoll to check.</param>
            <returns><see langword="true"/> if close enough to revive the body; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp049Role.GetSpawnChance(System.Collections.Generic.List{PlayerRoles.RoleTypeId})">
            <summary>
            Gets the Spawn Chance of SCP-049.
            </summary>
            <param name="alreadySpawned">The List of Roles already spawned.</param>
            <returns>The Spawn Chance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp079Role">
            <summary>
            Defines a role that represents SCP-079.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.#ctor(PlayerRoles.PlayableScps.Scp079.Scp079Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp079Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079Role"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.TurnedPlayers">
            <summary>
            Gets a list of players who will be turned away from SCP-079's scan.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.SpeakerAbility">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079SpeakerAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.DoorStateChanger">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079DoorAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.DoorLockChanger">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079DoorLockChanger"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.AuxManager">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079AuxManager"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.TierManager">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079TierManager"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.RewardManager">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Rewards.Scp079RewardManager"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.PingAbility">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Pinging.Scp079PingAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.TeslaAbility">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079TeslaAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.LockdownRoomAbility">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079LockdownRoomAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.BlackoutRoomAbility">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079BlackoutRoomAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.BlackoutZoneAbility">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079BlackoutZoneAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.LostSignalHandler">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079LostSignalHandler"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.CurrentCameraSync">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079CurrentCameraSync"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.ScannerTracker">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079ScannerTracker"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.ScannerZoneSelector">
            <summary>
            Gets SCP-079's <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079ScannerZoneSelector"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Camera">
            <summary>
            Gets or sets the camera SCP-079 is currently controlling.
            <remarks>This value will return the <c>Hcz079ContChamber</c> Camera if SCP-079's current camera cannot be detected.</remarks>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.CanTransmit">
            <summary>
            Gets a value indicating whether or not SCP-079 can transmit its voice to a speaker.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.MarkedRooms">
            <summary>
            Gets a list of rooms that have been marked by SCP-079. Marked rooms grant SCP-079 experience if a kill occurs in them.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Speaker">
            <summary>
            Gets the speaker SCP-079 is currently using. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.LockedDoor">
            <summary>
            Gets the doors SCP-079 has locked. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Abilities">
            <summary>
            Gets or sets SCP-079's abilities. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Experience">
            <summary>
            Gets or sets the amount of experience SCP-079 has.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.CameraPosition">
            <summary>
            Gets the Current Camera Position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.RelativeExperience">
            <summary>
            Gets the relative experience.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Level">
            <summary>
            Gets or sets SCP-079's level.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.LevelIndex">
            <summary>
            Gets or sets SCP-079's level index.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.NextLevelThreshold">
            <summary>
            Gets SCP-079's next level threshold.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Energy">
            <summary>
            Gets or sets SCP-079's energy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.MaxEnergy">
            <summary>
            Gets or sets SCP-079's max energy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.RoomLockdownCooldown">
            <summary>
            Gets or sets SCP-079's room lockdown cooldown.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.RemainingLockdownDuration">
            <summary>
            Gets the Remaining Lockdown Duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.BlackoutCount">
            <summary>
            Gets the amount of rooms that SCP-079 has blacked out.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.BlackoutCapacity">
            <summary>
            Gets the maximum amount of rooms that SCP-079 can black out at its current <see cref="P:Exiled.API.Features.Roles.Scp079Role.Level"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.BlackoutZoneCooldown">
            <summary>
            Gets or sets the amount of time until SCP-079 can use its blackout zone ability again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Scp2176LostTime">
            <summary>
            Gets or sets the amount of time that SCP-2176 will disable SCP-079 for.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.RollRotation">
            <summary>
            Gets the Roll Rotation of SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.IsLost">
            <summary>
            Gets a value indicating whether or not SCP-079's signal is lost due to SCP-2176.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.LostTime">
            <summary>
            Gets a value indicating how much more time SCP-079 will be lost.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.EnergyRegenerationSpeed">
            <summary>
            Gets SCP-079's energy regeneration speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp079Role.Base">
            <summary>
            Gets the game <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079Role"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.UnlockAllDoors">
            <summary>
            Unlocks all doors that SCP-079 has locked.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.LoseSignal(System.Single)">
            <summary>
            Forces SCP-079's signal to be lost for the specified amount of time.
            </summary>
            <param name="duration">Time to lose SCP-079's signal.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.AddExperience(System.Int32,PlayerRoles.PlayableScps.Scp079.Scp079HudTranslation)">
            <summary>
            Grants SCP-079 experience.
            </summary>
            <param name="amount">The amount to grant.</param>
            <param name="reason">The reason to grant experience.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.AddExperience(System.Int32,PlayerRoles.PlayableScps.Scp079.Scp079HudTranslation,PlayerRoles.RoleTypeId)">
            <summary>
            Grants SCP-079 experience.
            </summary>
            <param name="amount">The amount to grant.</param>
            <param name="reason">The reason to grant experience.</param>
            <param name="subject">The RoleType of the player that's causing it to happen.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.LockDoor(Exiled.API.Features.Doors.Door)">
            <summary>
            Locks the provided <paramref name="door"/>.
            </summary>
            <param name="door">The door to lock.</param>
            <returns><see langword="true"/> if the door has been lock; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.LockDoor(Exiled.API.Features.Doors.Door,System.Boolean)">
            <summary>
            Locks the provided <paramref name="door"/>.
            </summary>
            <param name="door">The door to lock.</param>
            <returns><see langword="true"/> if the door has been lock; otherwise, <see langword="false"/>.</returns>
            <param name="consumeEnergy">Indicates if the energy cost should be consumed or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.UnlockDoor">
            <summary>
            Unlocks the <see cref="P:Exiled.API.Features.Roles.Scp079Role.LockedDoor"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.UnlockDoor(Exiled.API.Features.Doors.Door)">
            <summary>
            Unlocks the provided <paramref name="door"/>.
            </summary>
            <param name="door">The door to unlock.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.MarkRoom(Exiled.API.Features.Room)">
            <summary>
            Marks a room as being modified by SCP-079 (granting experience if a kill happens in the room).
            </summary>
            <param name="room">The room to mark.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.MarkRooms(System.Collections.Generic.IEnumerable{Exiled.API.Features.Room})">
            <summary>
            Marks a array of rooms as being modified by SCP-079 (granting experience if a kill happens in the room).
            </summary>
            <param name="rooms">The Array of Rooms to mark.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.UnmarkRoom(Exiled.API.Features.Room)">
            <summary>
            Removes a marked room.
            </summary>
            <param name="room">The room to remove.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.ClearMarkedRooms">
            <summary>
            Clears the list of marked SCP-079 rooms.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.GetSwitchCost(Exiled.API.Features.Camera)">
            <summary>
            Gets the cost to switch from the current <see cref="P:Exiled.API.Features.Roles.Scp079Role.Camera"/> to the provided <paramref name="camera"/>.
            </summary>
            <param name="camera">The camera to get the cost to switch to.</param>
            <returns>The cost to switch from the current camera to the new camera.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.GetCost(Exiled.API.Features.Doors.Door,Interactables.Interobjects.DoorUtils.DoorAction)">
            <summary>
            Gets the cost to modify a door.
            </summary>
            <param name="door">The door to get the cost to modify.</param>
            <param name="action">The action.</param>
            <returns>The cost to modify the door.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.BlackoutRoom(System.Boolean)">
            <summary>
            Blackout the current room.
            </summary>
            <param name="consumeEnergy">Indicates if the energy cost should be consumed or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.BlackoutZone(System.Boolean)">
            <summary>
            Blackout the current zone.
            </summary>
            <param name="consumeEnergy">Indicates if the energy cost should be consumed or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.Ping(UnityEngine.Vector3,Exiled.API.Enums.PingType,System.Boolean)">
            <summary>
            Trigger the Ping Ability to ping a <see cref="T:RelativePositioning.RelativePosition"/>.
            </summary>
            <param name="position">The SyncNormal Position.</param>
            <param name="pingType">The PingType to return.</param>
            <param name="consumeEnergy">Indicates if the energy cost should be consumed or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.LockdownRoom">
            <summary>
            Trigger the Lockdown Room Ability to lock the current room.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.CancelLockdown">
            <summary>
            Cancels the Actual Lockdown.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.ActivateTesla(System.Boolean)">
            <summary>
            Trigger the SCP-079's Tesla Gate Ability.
            </summary>
            <param name="consumeEnergy">Indicates if the energy cost should be consume or not.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp079Role.GetSpawnChance(System.Collections.Generic.List{PlayerRoles.RoleTypeId})">
            <summary>
            Gets the spawn chance of SCP-079.
            </summary>
            <param name="alreadySpawned">The List of Roles already spawned.</param>
            <returns>The Spawn Chance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp096Role">
            <summary>
            Defines a role that represents SCP-096.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.#ctor(PlayerRoles.PlayableScps.Scp096.Scp096Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp096Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayableScps.Scp096.Scp096Role"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.TurnedPlayers">
            <summary>
            Gets a list of players who will be turned away from SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.HumeShieldModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.RageCycleAbility">
            <summary>
            Gets SCP-096's <see cref="T:PlayerRoles.PlayableScps.Scp096.Scp096RageCycleAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.RageManager">
            <summary>
            Gets SCP-096's <see cref="T:PlayerRoles.PlayableScps.Scp096.Scp096RageManager"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.TargetsTracker">
            <summary>
            Gets SCP-096's <see cref="T:PlayerRoles.PlayableScps.Scp096.Scp096TargetsTracker"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.AttackAbility">
            <summary>
            Gets SCP-096's <see cref="T:PlayerRoles.PlayableScps.Scp096.Scp096AttackAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.TryNotToCryAbility">
            <summary>
            Gets SCP-096's <see cref="T:PlayerRoles.PlayableScps.Scp096.Scp096TryNotToCryAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.ChargeAbility">
            <summary>
            Gets SCP-096's <see cref="T:PlayerRoles.PlayableScps.Scp096.Scp096ChargeAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.AbilityState">
            <summary>
            Gets a value indicating SCP-096's ability state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.RageState">
            <summary>
            Gets a value indicating SCP-096's rage state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.CanReceiveTargets">
            <summary>
            Gets a value indicating whether or not SCP-096 can receive targets.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.AttackPossible">
            <summary>
            Gets a value indicating whether or not SCP-096 can attack.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.ChargeCooldown">
            <summary>
            Gets or sets the Charge Ability Cooldown.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.RemainingChargeDuration">
            <summary>
            Gets or sets the Charge Ability duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.EnrageCooldown">
            <summary>
            Gets or sets the amount of time before SCP-096 can be enraged again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.EnragedTimeLeft">
            <summary>
            Gets or sets enraged time left.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.TotalEnrageTime">
            <summary>
            Gets or sets enraged time left.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.TryNotToCryActive">
            <summary>
            Gets or sets a value indicating whether the TryNotToCry ability is active.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.Targets">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of Players that are currently targeted by SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp096Role.Base">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp096.Scp096Role"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.AddTarget(Exiled.API.Features.Player)">
            <summary>
            Adds the specified <paramref name="player"/> as an SCP-096 target.
            </summary>
            <param name="player">The player to add as a target.</param>
            <returns><see langword="true"/> if target was successfully added. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.AddTarget(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Adds the specified <paramref name="player"/> as an SCP-096 target.
            </summary>
            <param name="player">The player to add as a target.</param>
            <param name="isLooking">Is because player look SCP-096.</param>
            <returns><see langword="true"/> if target was successfully added. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.RemoveTarget(Exiled.API.Features.Player)">
            <summary>
            Removes the specified <paramref name="player"/> from SCP-096's targets.
            </summary>
            <param name="player">The player to remove as a target.</param>
            <returns><see langword="true"/> if target was successfully removed. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.Enrage(System.Single)">
            <summary>
            Enrages SCP-096 for the given amount of times.
            </summary>
            <param name="time">The amount of time to enrage SCP-096.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.Calm(System.Boolean)">
            <summary>
            Ends SCP-096's enrage cycle.
            </summary>
            <param name="clearTime">Whether or not to clear the remaining enrage time.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.HasTarget(Exiled.API.Features.Player)">
            <summary>
            Returns whether or not the provided <paramref name="player"/> is a target of SCP-096.
            </summary>
            <param name="player">The player to check.</param>
            <returns>Whether or not the player is a target of SCP-096.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.IsObserved(Exiled.API.Features.Player)">
            <summary>
            Returns whether or not the provided <paramref name="player"/> is observed by SCP-096.
            </summary>
            <param name="player">The player to check.</param>
            <returns>Whether or not the player is observed.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.ClearTargets">
            <summary>
            Removes all targets from SCP-096's target list.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.Attack">
            <summary>
            Trigger the attack ability.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.Charge(System.Single)">
            <summary>
            Trigger the charge ability.
            </summary>
            <param name="cooldown">The cooldown time to set before the charge can be executed again.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.ShowRageInput(System.Single)">
            <summary>
            Shows the input prompt for the RageCycle ability.
            </summary>
            <param name="duration">The input prompt duration.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp096Role.GetSpawnChance(System.Collections.Generic.List{PlayerRoles.RoleTypeId})">
            <summary>
            Gets the Spawn Chance of SCP-096.
            </summary>
            <param name="alreadySpawned">The List of Roles already spawned.</param>
            <returns>The Spawn Chance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp106Role">
            <summary>
            Defines a role that represents SCP-106.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp106Role.#ctor(PlayerRoles.PlayableScps.Scp106.Scp106Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp106Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106Role"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.HumeShieldModule">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.HumeShield.HumeShieldModuleBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.VigorAbility">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106VigorAbilityBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.VigorComponent">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp106.VigorStat"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.Attack">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106Attack"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.StalkAbility">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106Attack"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.HuntersAtlasAbility">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106HuntersAtlasAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.SinkholeController">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106SinkholeController"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.MovementModule">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106MovementModule"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.Vigor">
            <summary>
            Gets or sets SCP-106's Vigor Level.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.IsSubmerged">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 is currently submerged.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.CanActivateTesla">
            <summary>
            Gets a value indicating whether or not SCP-106 can activate teslas.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.CanStopStalk">
            <summary>
            Gets a value indicating whether if SCP-106 <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106StalkAbility"/> can be cleared.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.IsSlowdown">
            <summary>
            Gets a value indicating whether or not SCP-106 is currently slow down by a door.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.SinkholeCurrentTime">
            <summary>
            Gets a value indicating the current time of the sinkhole.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.SinkholeNormalizedState">
            <summary>
            Gets a value indicating the normalized state of the sinkhole.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.IsDuringAnimation">
            <summary>
            Gets a value indicating whether or not SCP-106 is currently in the middle of an animation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.IsSinkholeHidden">
            <summary>
            Gets a value indicating whether or not SCP-106 sinkhole is hidden.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.SinkholeState">
            <summary>
            Gets or sets a value indicating whether the current sinkhole state.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.SinkholeTargetDuration">
            <summary>
            Gets the sinkhole target duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.SinkholeSpeedMultiplier">
            <summary>
            Gets the speed multiplier of the sinkhole.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.VigorStalkCostStationary">
            <summary>
            Gets or sets how mush cost the Ability Stalk will cost per tick when being stationary.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.VigorStalkCostMoving">
            <summary>
            Gets or sets how mush cost the Ability Stalk will cost per tick when moving.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.VigorRegeneration">
            <summary>
            Gets or sets how mush vigor will be regenerate while moving per seconds.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.AttackDamage">
            <summary>
            Gets or sets how mush damage Scp106 will dealt when attacking a player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.CorrodingTime">
            <summary>
            Gets or sets the duration of Corroding effect.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.VigorCaptureReward">
            <summary>
            Gets or sets how mush vigor Scp106 will gain when being reward for having caught a player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.CooldownReductionReward">
            <summary>
            Gets or sets how mush reduction cooldown Scp106 will gain when being reward for having caught a player.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.SinkholeCooldownDuration">
            <summary>
            Gets or sets the cooldown duration of it's Sinkhole ability's.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.HuntersAtlasCostPerMeter">
            <summary>
            Gets or sets how mush vigor it's ability Hunter Atlas will cost per meter.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.CaptureCooldown">
            <summary>
            Gets or sets the amount of time in between player captures.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.RemainingSinkholeCooldown">
            <summary>
            Gets or sets the Sinkhole cooldown.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.IsStalking">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 will enter his stalking mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp106Role.Base">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp106.Scp106Role"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp106Role.UsePortal(UnityEngine.Vector3,System.Single)">
            <summary>
            Forces SCP-106 to use its portal, and Teleport to position.
            </summary>
            <param name="position">Where the player will be teleported.</param>
            <param name="cost">The amount of vigor that is required and will be consumed.</param>
            <returns>If the player will be teleport.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp106Role.CapturePlayer(Exiled.API.Features.Player)">
            <summary>
            Send a player to the pocket dimension.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/>to send.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp106Role.GetSpawnChance(System.Collections.Generic.List{PlayerRoles.RoleTypeId})">
            <summary>
            Gets the Spawn Chance of SCP-106.
            </summary>
            <param name="alreadySpawned">The List of Roles already spawned.</param>
            <returns>The Spawn Chance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp1507Role">
            <summary>
            A wrapper for <see cref="T:PlayerRoles.PlayableScps.Scp1507.Scp1507Role"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp1507Role.#ctor(PlayerRoles.PlayableScps.Scp1507.Scp1507Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp1507Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayerRoleBase"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.Base">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.HumeShieldModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.AttackAbility">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp1507.Scp1507AttackAbility"/> for this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.SwarmAbility">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp1507.Scp1507SwarmAbility"/> for this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.VocalizeAbility">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp1507.Scp1507VocalizeAbility"/> for this role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.Damage">
            <summary>
            Gets or sets how much damage should deal SCP-1507.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.AttackDelay">
            <summary>
            Gets the delay between attacks.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.NearbyFlamingos">
            <summary>
            Gets or sets a list with flamingos, which are close to owner.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.AllFlamingos">
            <summary>
            Gets or sets a list with all flamingos.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp1507Role.Multiplier">
            <summary>
            Gets or sets a multiplier for healing.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp1507Role.TryAttackDoor">
            <summary>
            Tries to attack door.
            </summary>
            <returns><see langword="true"/> if successfully. Otherwise, <see langword="false"/>.</returns>
            <remarks>This method does not modify game logic, so if you want this method to work correctly, make sure that player is staying in front of the door.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp1507Role.Scream">
            <summary>
            Forces a SCP-1507 to scream.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp173Role">
            <summary>
            Defines a role that represents SCP-173.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp173Role.#ctor(PlayerRoles.PlayableScps.Scp173.Scp173Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp173Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayableScps.Scp173.Scp173Role"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.TurnedPlayers">
            <summary>
            Gets a list of players who will be turned away from SCP-173.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.HumeShieldModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.MovementModule">
            <summary>
            Gets SCP-173's movement module.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.ObserversTracker">
            <summary>
            Gets SCP-173's <see cref="T:PlayerRoles.PlayableScps.Scp173.Scp173ObserversTracker"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BlinkTimer">
            <summary>
            Gets SCP-173's <see cref="T:PlayerRoles.PlayableScps.Scp173.Scp173BlinkTimer"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.TeleportAbility">
            <summary>
            Gets SCP-173's <see cref="T:PlayerRoles.PlayableScps.Scp173.Scp173TeleportAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.TantrumAbility">
            <summary>
            Gets SCP-173's <see cref="T:PlayerRoles.PlayableScps.Scp173.Scp173TantrumAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BreakneckSpeedsAbility">
            <summary>
            Gets SCP-173's <see cref="T:PlayerRoles.PlayableScps.Scp173.Scp173BreakneckSpeedsAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.AudioPlayer">
            <summary>
            Gets the SCP-173's <see cref="T:PlayerRoles.PlayableScps.Scp173.Scp173AudioPlayer"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.RemainingBreakneckCooldown">
            <summary>
            Gets or sets the amount of time before SCP-173 can use breakneck speed again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.RemainingTantrumCooldown">
            <summary>
            Gets or sets the amount of time before SCP-173 can place a tantrum.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.IsObserved">
            <summary>
            Gets a value indicating whether or not SCP-173 is currently being viewed by one or more players.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.ObservingPlayers">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of players that are currently viewing SCP-173. Can be empty.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.MaxMovementSpeed">
            <summary>
            Gets SCP-173's max move speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.MovementSpeed">
            <summary>
            Gets the SCP-173's movement speed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.SimulatedStare">
            <summary>
            Gets or sets SCP-173's simulated stare. SCP-173 will be treated as though it is being looked at while this value is greater than <c>0</c>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BlinkReady">
            <summary>
            Gets or sets a value indicating whether or not SCP-173 is able to blink.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BlinkCooldown">
            <summary>
            Gets or sets the amount of time before SCP-173 can blink.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BlinkDistance">
            <summary>
            Gets a value indicating the max distance that SCP-173 can move in a blink. Factors in <see cref="P:Exiled.API.Features.Roles.Scp173Role.BreakneckActive"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.BreakneckActive">
            <summary>
            Gets or sets a value indicating whether or not SCP-173's breakneck speed is active.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp173Role.Base">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp173.Scp173Role"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp173Role.PlaceTantrum(System.Boolean,System.Single)">
            <summary>
            Places a Tantrum (SCP-173's ability) under the player.
            </summary>
            <param name="failIfObserved">Whether or not to place the tantrum if SCP-173 is currently being viewed.</param>
            <param name="cooldown">The cooldown until SCP-173 can place a tantrum again. Set to <c>0</c> to not affect the cooldown.</param>
            <returns>The <see cref="T:Exiled.API.Features.Hazards.TantrumHazard"/> instance, or <see langword="null"/> if it cannot be placed.</returns>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp173Role.SendAudio(PlayerRoles.PlayableScps.Scp173.Scp173AudioPlayer.Scp173SoundId)">
            <summary>
            Plays a SCP-173 Audio Clip (Snap, Hit, Teleport).
            </summary>
            <param name="soundId">The SoundId to Play.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp173Role.Blink(UnityEngine.Vector3)">
            <summary>
            Teleport SCP-173 using the blink ability to the Target Position.
            </summary>
            <param name="targetPos">The Target Position.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp173Role.GetSpawnChance(System.Collections.Generic.List{PlayerRoles.RoleTypeId})">
            <summary>
            Gets the Spawn Chance of SCP-173.
            </summary>
            <param name="alreadySpawned">The List of Roles already spawned.</param>
            <returns>The Spawn Chance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp3114Role">
            <summary>
            Defines a role that represents SCP-3114.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp3114Role.#ctor(PlayerRoles.PlayableScps.Scp3114.Scp3114Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp3114Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114Role"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.HumeShieldModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.Slap">
            <summary>
            Gets Scp3114's <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114Slap"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.Dance">
            <summary>
            Gets Scp3114's <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114Dance"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.Reveal">
            <summary>
            Gets Scp3114's <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114Reveal"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.Identity">
            <summary>
            Gets Scp3114's <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114Identity"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.History">
            <summary>
            Gets Scp3114's <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114History"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.FakeModelManager">
            <summary>
            Gets Scp3114's <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114FakeModelManager"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.Disguise">
            <summary>
            Gets Scp3114's <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114Disguise"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.VoiceLines">
            <summary>
            Gets Scp3114's <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114VoiceLines"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.Base">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114Role"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.SlapDamage">
            <summary>
            Gets the damage amount of SCP-3114's slap ability.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.StrangleTarget">
            <summary>
            Gets the current target of SCP-3114's strangle ability. Can be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.StolenRole">
            <summary>
            Gets or sets the SCP-3114's Stolen Role.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.Ragdoll">
            <summary>
            Gets or sets the SCP-3114's Ragdoll used for it's FakeIdentity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.UnitId">
            <summary>
            Gets or sets the SCP-3114's UnitId used for it's FakeIdentity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.DisguiseStatus">
            <summary>
            Gets or sets current state of SCP-3114's disguise ability.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.DisguiseDuration">
            <summary>
            Gets or sets the SCP-3114's Disguise duration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp3114Role.WarningTime">
            <summary>
            Gets or sets the warning time seconds.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp3114Role.ResetIdentity">
            <summary>
            Reset Scp3114 FakeIdentity.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp3114Role.PlaySound(PlayerRoles.PlayableScps.Scp3114.Scp3114VoiceLines.VoiceLinesName)">
            <summary>
            Plays a random Scp3114 voice line.
            </summary>
            <param name="voiceLine">The type of voice line to play.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp3114Role.GetSpawnChance(System.Collections.Generic.List{PlayerRoles.RoleTypeId})">
            <summary>
            Gets the Spawn Chance of SCP-3114.
            </summary>
            <param name="alreadySpawned">The List of Roles already spawned.</param>
            <returns>The Spawn Chance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.Scp939Role">
            <summary>
            Defines a role that represents SCP-939.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.#ctor(PlayerRoles.PlayableScps.Scp939.Scp939Role)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.Scp939Role"/> class.
            </summary>
            <param name="baseRole">the base <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939Role"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.API.Features.Roles.Scp939Role"/> class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.SubroutineModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.HumeShieldModule">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.ClawAbility">
            <summary>
            Gets SCP-939's <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939ClawAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.FocusAbility">
            <summary>
            Gets SCP-939's <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939FocusAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.LungeAbility">
            <summary>
            Gets SCP-939's <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939LungeAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.MimicPointController">
            <summary>
            Gets SCP-939's <see cref="P:Exiled.API.Features.Roles.Scp939Role.MimicPointController"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.AmnesticCloudAbility">
            <summary>
            Gets SCP-939's <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.EnvironmentalMimicry">
            <summary>
            Gets SCP-939's <see cref="T:PlayerRoles.PlayableScps.Scp939.Mimicry.EnvironmentalMimicry"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.FootstepRippleTrigger">
            <summary>
            Gets SCP-939's <see cref="P:Exiled.API.Features.Roles.Scp939Role.FootstepRippleTrigger"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.FirearmRippleTrigger">
            <summary>
            Gets SCP-939's <see cref="P:Exiled.API.Features.Roles.Scp939Role.FirearmRippleTrigger"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.MimicryRecorder">
            <summary>
            Gets SCP-939's <see cref="T:PlayerRoles.PlayableScps.Scp939.Mimicry.MimicryRecorder"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.AttackCooldown">
            <summary>
            Gets or sets the amount of time before SCP-939 can attack again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.IsFocused">
            <summary>
            Gets a value indicating whether or not SCP-939 is currently using its focus ability.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.IsLunging">
            <summary>
            Gets a value indicating whether or not SCP-939 is currently lunging.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.LungeState">
            <summary>
            Gets SCP-939's <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939LungeState"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.AmnesticCloudCooldown">
            <summary>
            Gets or sets the amount of time before SCP-939 can use its amnestic cloud ability again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.AmnesticCloudDuration">
            <summary>
            Gets or sets the duration of the amnestic cloud.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.MimicryCooldown">
            <summary>
            Gets or sets the amount of time before SCP-939 can use any of its mimicry abilities again.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.SavedVoices">
            <summary>
            Gets a value indicating the amount of voices that SCP-939 has saved.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.MimicryPointActive">
            <summary>
            Gets a value indicating whether or not SCP-939 has a placed mimic point.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.MimicryPointPosition">
            <summary>
            Gets a value indicating the position of SCP-939's mimic point. May be <see langword="null"/> if <see cref="P:Exiled.API.Features.Roles.Scp939Role.MimicryPointActive"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.VisiblePlayers">
            <summary>
            Gets a list of players this SCP-939 instance can see regardless of their movement.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.Scp939Role.Base">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp939.Scp939Role"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.ClearRecordings(Exiled.API.Features.Player)">
            <summary>
            Removes all recordings of player voices. Provide an optional target to remove all the recordings of a single player.
            </summary>
            <param name="target">If provided, will only remove recordings of the targeted player.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.ClearRecordings">
            <summary>
            Removes all recordings of player voices.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.PlayRippleSound(Exiled.API.Enums.UsableRippleType,UnityEngine.Vector3,Exiled.API.Features.Player)">
            <summary>
            Plays a Ripple Sound (Usable RippleType: Footstep, FireArm).
            </summary>
            <param name="ripple">The RippleType to play to 939.</param>
            <param name="position">The Sync Position to play.</param>
            <param name="playerToSend">The Player to send the Ripple Sound.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.CreateCloud(System.Single)">
            <summary>
            Created a Amnestic Cloud at the SCP-939's position.
            </summary>
            <param name="duration">The duration of the Amnestic cloud.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.PlaceMimicPoint(UnityEngine.Vector3)">
            <summary>
            Place a Mimic Point at the specified position.
            </summary>
            <param name="mimicPointPosition">The Position of the Mimic Point.</param>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.DestroyCurrentMimicPoint">
            <summary>
            Destroys the Current Mimic Point.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.Scp939Role.GetSpawnChance(System.Collections.Generic.List{PlayerRoles.RoleTypeId})">
            <summary>
            Gets the Spawn Chance of SCP-939.
            </summary>
            <param name="alreadySpawned">The List of Roles already spawned.</param>
            <returns>The Spawn Chance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Roles.SpectatorRole">
            <summary>
            Defines a role that represents a spectator.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Roles.SpectatorRole.#ctor(PlayerRoles.Spectating.SpectatorRole)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Roles.SpectatorRole"/> class.
            </summary>
            <param name="baseRole">The encapsulated <see cref="T:PlayerRoles.Spectating.SpectatorRole"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.Type">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.DeathTime">
            <summary>
            Gets the <see cref="T:System.DateTime"/> at which the player died.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.DeadTime">
            <summary>
            Gets the total amount of time the player has been dead.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.DeathPosition">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/>'s death position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.IsReadyToRespawn">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is ready to respawn or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.SpectatedPlayer">
            <summary>
            Gets currently spectated <see cref="T:Exiled.API.Features.Player"/> by this <see cref="T:Exiled.API.Features.Player"/>. May be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Roles.SpectatorRole.Base">
            <summary>
            Gets the game <see cref="T:PlayerRoles.Spectating.SpectatorRole"/>.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Room">
            <summary>
            The in-game room.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Room.RoomIdentifierToRoom">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:MapGeneration.RoomIdentifier"/>s and their corresponding <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Room"/> which contains all the <see cref="T:Exiled.API.Features.Room"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Name">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.GameObject">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Transform">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Position">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Rotation">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Zone">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.ZoneType"/> in which the room is located.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.RoomName">
            <summary>
            Gets the <see cref="T:MapGeneration.RoomName"/> enum representing this room.
            </summary>
            <remarks>This property is the internal <see cref="T:MapGeneration.RoomName"/> of the room. For the actual string of the Room's name, see <see cref="P:Exiled.API.Features.Room.Name"/>.</remarks>
            <seealso cref="P:Exiled.API.Features.Room.Name"/>
        </member>
        <member name="P:Exiled.API.Features.Room.RoomShape">
            <summary>
            Gets the room's <see cref="T:MapGeneration.RoomShape"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Type">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.RoomType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Identifier">
            <summary>
            Gets a reference to the room's <see cref="T:MapGeneration.RoomIdentifier"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.TeslaGate">
            <summary>
            Gets a reference to the <see cref="T:TeslaGate"/> in the room, or <see langword="null"/> if this room does not contain one.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Players">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Windows">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:Exiled.API.Features.Window"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Doors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:Exiled.API.Features.Doors.Door"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Speakers">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079Speaker"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Cameras">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:Exiled.API.Features.Camera"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.RoomLightControllers">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="P:Exiled.API.Features.Room.RoomLightController"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
            <remarks>
            Using that will make sense only for rooms with more than one light controller, in other cases better to use <see cref="P:Exiled.API.Features.Room.RoomLightController"/>.
            </remarks>
        </member>
        <member name="P:Exiled.API.Features.Room.Pickups">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Pickups.Pickup"/> in the <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.Color">
            <summary>
            Gets or sets the color of the room's lights by changing the warhead color.
            </summary>
            <remarks>Will return <see cref="P:UnityEngine.Color.clear"/> when <see cref="P:Exiled.API.Features.Room.RoomLightController"/> is <see langword="null"/>.</remarks>
        </member>
        <member name="P:Exiled.API.Features.Room.AreLightsOff">
            <summary>
            Gets or sets a value indicating whether or not the lights in this room are currently off.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.RoomLightControllerNetIdentity">
            <summary>
            Gets the FlickerableLightController's NetworkIdentity.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.RoomLightController">
            <summary>
            Gets the room's FlickerableLightController.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.WindowsValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing all known <see cref="T:Exiled.API.Features.Window"/>s in that <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.DoorsValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing all known <see cref="T:Exiled.API.Features.Doors.Door"/>s in that <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.SpeakersValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing all known <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079Speaker"/>s in that <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.CamerasValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing all known <see cref="T:Exiled.API.Features.Camera"/>s in that <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Room.RoomLightControllersValue">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> containing all known <see cref="P:Exiled.API.Features.Room.RoomLightController"/>s in that <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(Exiled.API.Enums.RoomType)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Room"/> given the specified <see cref="T:Exiled.API.Enums.RoomType"/>.
            </summary>
            <param name="roomType">The <see cref="T:Exiled.API.Enums.RoomType"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> with the given <see cref="T:Exiled.API.Enums.RoomType"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(MapGeneration.RoomIdentifier)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Room"/> from a given <see cref="P:Exiled.API.Features.Room.Identifier"/>.
            </summary>
            <param name="roomIdentifier">The <see cref="P:Exiled.API.Features.Room.Identifier"/> to search with.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> of the given identified, if any. Can be <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(RoomLightController)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Room"/> from a given <see cref="T:MapGeneration.RoomIdentifier"/>.
            </summary>
            <param name="flickerableLightController">The <see cref="P:Exiled.API.Features.Room.RoomLightController"/> to search with.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> of the given identified, if any. Can be <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(UnityEngine.Vector3)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Room"/> given the specified <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> with the given <see cref="T:UnityEngine.Vector3"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(RelativePositioning.RelativePosition)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Room"/> given the specified <see cref="T:RelativePositioning.RelativePosition"/>.
            </summary>
            <param name="position">The <see cref="T:RelativePositioning.RelativePosition"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> with the given <see cref="T:RelativePositioning.RelativePosition"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(Exiled.API.Enums.ZoneType)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Room"/> given the specified <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
            <param name="zoneType">The <see cref="T:Exiled.API.Enums.ZoneType"/> to search for.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> with the given <see cref="T:Exiled.API.Enums.ZoneType"/> or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.Get(System.Func{Exiled.API.Features.Room,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Room"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Room"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.FindParentRoom(UnityEngine.GameObject)">
            <summary>
            Tries to find the room that a <see cref="P:Exiled.API.Features.Room.GameObject"/> is inside, first using the <see cref="P:Exiled.API.Features.Room.Transform"/>'s parents, then using a Raycast if no room was found.
            </summary>
            <param name="objectInRoom">The <see cref="P:Exiled.API.Features.Room.GameObject"/> inside the room.</param>
            <returns>The <see cref="T:Exiled.API.Features.Room"/> that the <see cref="P:Exiled.API.Features.Room.GameObject"/> is located inside. Can be <see langword="null"/>.</returns>
            <seealso cref="M:Exiled.API.Features.Room.Get(UnityEngine.Vector3)"/>
        </member>
        <member name="M:Exiled.API.Features.Room.Random(Exiled.API.Enums.ZoneType)">
            <summary>
            Gets a random <see cref="T:Exiled.API.Features.Room"/>.
            </summary>
            <param name="zoneType">Filters by <see cref="T:Exiled.API.Enums.ZoneType"/>.</param>
            <returns><see cref="T:Exiled.API.Features.Room"/> object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.LocalPosition(UnityEngine.Vector3)">
            <summary>
            Returns the local space position, based on a world space position.
            </summary>
            <param name="position">World position.</param>
            <returns>Local position, based on the room.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.WorldPosition(UnityEngine.Vector3)">
            <summary>
            Returns the World position, based on a local space position.
            </summary>
            <param name="offset">Local position.</param>
            <returns>World position, based on the room.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.TurnOffLights(System.Single)">
            <summary>
            Flickers the room's lights off for a duration.
            </summary>
            <param name="duration">Duration in seconds, or -1 for an indefinite duration.</param>
        </member>
        <member name="M:Exiled.API.Features.Room.LockDown(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all the doors in the room.
            </summary>
            <param name="duration">Duration in seconds, or <c>-1</c> for permanent lockdown.</param>
            <param name="lockType">DoorLockType of the lockdown.</param>
            <seealso cref="M:Exiled.API.Features.Doors.Door.LockAll(System.Single,Exiled.API.Enums.ZoneType,Exiled.API.Enums.DoorLockType)"/>
            <seealso cref="M:Exiled.API.Features.Doors.Door.LockAll(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType},Exiled.API.Enums.DoorLockType)"/>
        </member>
        <member name="M:Exiled.API.Features.Room.Blackout(System.Single,Exiled.API.Enums.DoorLockType)">
            <summary>
            Locks all the doors and turns off all lights in the room.
            </summary>
            <param name="duration">Duration in seconds, or <c>-1</c> for permanent blackout.</param>
            <param name="lockType">DoorLockType of the blackout.</param>
            <seealso cref="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,Exiled.API.Enums.ZoneType)"/>
            <seealso cref="M:Exiled.API.Features.Map.TurnOffAllLights(System.Single,System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})"/>
        </member>
        <member name="M:Exiled.API.Features.Room.UnlockAll">
            <summary>
            Unlocks all the doors in the room.
            </summary>
            <seealso cref="M:Exiled.API.Features.Doors.Door.UnlockAll"/>
            <seealso cref="M:Exiled.API.Features.Doors.Door.UnlockAll(Exiled.API.Enums.ZoneType)"/>
            <seealso cref="M:Exiled.API.Features.Doors.Door.UnlockAll(System.Collections.Generic.IEnumerable{Exiled.API.Enums.ZoneType})"/>
            <seealso cref="M:Exiled.API.Features.Doors.Door.UnlockAll(System.Func{Exiled.API.Features.Doors.Door,System.Boolean})"/>
        </member>
        <member name="M:Exiled.API.Features.Room.ResetColor">
            <summary>
            Resets the room color to default.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Room.ToString">
            <summary>
            Returns the Room in a human-readable format.
            </summary>
            <returns>A string containing Room-related data.</returns>
        </member>
        <member name="M:Exiled.API.Features.Room.CreateComponent(UnityEngine.GameObject)">
            <summary>
            Factory method to create and add a <see cref="T:Exiled.API.Features.Room"/> component to a Transform.
            We can add parameters to be set privately here.
            </summary>
            <param name="roomGameObject">The Game Object to attach the Room component to.</param>
        </member>
        <member name="T:Exiled.API.Features.Round">
            <summary>
            A set of tools to handle the round more easily.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IgnoredPlayers">
            <summary>
            Gets a list of players who will be ignored from determining round end.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.ElapsedTime">
            <summary>
            Gets the time elapsed from the start of the round.
            </summary>
            <seealso cref="P:Exiled.API.Features.Round.StartedTime"/>
        </member>
        <member name="P:Exiled.API.Features.Round.StartedTime">
            <summary>
            Gets the start time of the round.
            </summary>
            <seealso cref="P:Exiled.API.Features.Round.ElapsedTime"/>
            <seealso cref="P:Exiled.API.Features.Round.IsStarted"/>
        </member>
        <member name="P:Exiled.API.Features.Round.IsStarted">
            <summary>
            Gets a value indicating whether the round is started or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.InProgress">
            <summary>
            Gets a value indicating whether the round in progress or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsEnded">
            <summary>
            Gets a value indicating whether the round is ended or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLobby">
            <summary>
            Gets a value indicating whether the round is lobby or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.ChaosTargetCount">
            <summary>
            Gets or sets a value indicating the amount of Chaos Targets remaining.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLocked">
            <summary>
            Gets or sets a value indicating whether the round is locked or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.IsLobbyLocked">
            <summary>
            Gets or sets a value indicating whether the lobby is locked or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.EscapedDClasses">
            <summary>
            Gets or sets the number of players who have escaped as <see cref="F:PlayerRoles.RoleTypeId.ClassD"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.EscapedScientists">
            <summary>
            Gets or sets the number of players who have escaped as <see cref="F:PlayerRoles.RoleTypeId.Scientist"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.Kills">
            <summary>
            Gets or sets the number of kills.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.SurvivingSCPs">
            <summary>
            Gets or sets the number of surviving SCPs.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.KillsByScp">
            <summary>
            Gets or sets the number of kills made by SCPs.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.ChangedIntoZombies">
            <summary>
            Gets or sets the number of players who have been turned into zombies.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.LobbyWaitingTime">
            <summary>
            Gets or sets the timer for waiting players in lobby.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.NextRoundAction">
            <summary>
            Gets or sets the action to do at round end.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.UptimeRounds">
            <summary>
            Gets the number of rounds since the server started.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Round.AliveSides">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> indicating the sides that are currently alive.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.Restart(System.Boolean,System.Boolean,ServerStatic.NextRoundAction)">
            <summary>
            Restarts the round with custom settings.
            </summary>
            <param name="fastRestart">
            Indicates whether or not it'll be a fast restart.
            If it's a fast restart, then players won't be reconnected from
            the server; otherwise, they will.
            </param>
            <param name="overrideRestartAction">
            Overrides a value of <see cref="T:ServerStatic.NextRoundAction"/>.
            Makes sense if someone used a command to set another action.
            </param>
            <param name="restartAction">
            The <see cref="T:ServerStatic.NextRoundAction"/>.
            <para>
            <see cref="F:ServerStatic.NextRoundAction.DoNothing"/> - does nothing, just restarts the round silently.
            <see cref="F:ServerStatic.NextRoundAction.Restart"/> - restarts the server, reconnects all players.
            <see cref="F:ServerStatic.NextRoundAction.Shutdown"/> - shutdowns the server, also disconnects all players.
            </para>
            </param>
        </member>
        <member name="M:Exiled.API.Features.Round.RestartSilently">
            <summary>
            Restarts the round silently.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Round.EndRound(System.Boolean)">
            <summary>
            Forces the round to end, regardless of which factions are alive.
            </summary>
            <param name="forceEnd">
            Indicates whether or not it'll force the restart with no check if it's locked.
            </param>
            <returns>A <see cref="T:System.Boolean"/> describing whether or not the round was successfully ended.</returns>
        </member>
        <member name="M:Exiled.API.Features.Round.Start">
            <summary>
            Start the round.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp1507Ragdoll">
            <summary>
            A wrapper for <see cref="T:PlayerRoles.PlayableScps.Scp1507.Scp1507Ragdoll"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp1507Ragdoll.#ctor(PlayerRoles.PlayableScps.Scp1507.Scp1507Ragdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Scp1507Ragdoll"/> class.
            </summary>
            <param name="ragdoll">The encapsulated <see cref="T:PlayerRoles.PlayableScps.Scp1507.Scp1507Ragdoll"/>.</param>
        </member>
        <member name="P:Exiled.API.Features.Scp1507Ragdoll.Base">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Scp1507Ragdoll.RevivalProgress">
            <summary>
            Gets or sets current progress of revival process.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp1507Ragdoll.IsRevived">
            <summary>
            Gets or sets a value indicating whether or not this ragdoll has been revived.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp1507Ragdoll.ResetTime">
            <summary>
            Gets or sets amount of time when ragdoll was reset last time.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp1507Ragdoll.SpawnVariant(PlayerRoles.RoleTypeId)">
            <summary>
            Spawns a variant from available ragdolls for chosen role.
            </summary>
            <param name="role">Role. Can be <see cref="F:PlayerRoles.RoleTypeId.Flamingo"/>, <see cref="F:PlayerRoles.RoleTypeId.AlphaFlamingo"/> or <see cref="F:PlayerRoles.RoleTypeId.ZombieFlamingo"/>.</param>
        </member>
        <member name="M:Exiled.API.Features.Scp1507Ragdoll.Vocalize(Exiled.API.Features.Player)">
            <summary>
            Vocalizes ragdoll.
            </summary>
            <param name="player">Player who vocalizes. If <see langword="null"/>, will be chosen random.</param>
        </member>
        <member name="T:Exiled.API.Features.Scp2536">
            <summary>
            A wrapper for <see cref="T:Christmas.Scp2536.Scp2536Controller"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp2536.Controller">
            <summary>
            Gets the <see cref="T:Christmas.Scp2536.Scp2536Controller"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp2536.GiftController">
            <summary>
            Gets the <see cref="T:Christmas.Scp2536.Scp2536GiftController"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp2536.IgnoredPlayers">
            <summary>
            Gets or sets list of ignored player. They can't interact with SCP-2536.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp2536.WhitelistedTeams">
            <summary>
            Gets array of <see cref="T:PlayerRoles.Team"/> that are able to interact with SCP-2536.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp2536.IsHidden">
            <summary>
            Gets a value indicating whether or not SCP-2536 is hidden or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp2536.AvailableGifts">
            <summary>
            Gets the collection of all available gifts.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp2536.Cooldowns">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.Dictionary`2"/> with cooldowns.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp2536.Boxes">
            <summary>
            Gets all available <see cref="T:Christmas.Scp2536.Scp2536GiftController.GiftBox"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp2536.GetGift``1">
            <summary>
            Gets a gift of provided type.
            </summary>
            <typeparam name="T">Gift type.</typeparam>
            <returns>Gift. Otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Scp2536.GiveRandomGift(Exiled.API.Features.Player)">
            <summary>
            Gives random gift to player.
            </summary>
            <param name="player">Player to who give gift.</param>
        </member>
        <member name="M:Exiled.API.Features.Scp2536.GiveGift(Christmas.Scp2536.Scp2536GiftBase,Exiled.API.Features.Player)">
            <summary>
            Gives specified gift to player.
            </summary>
            <param name="gift">Gift to give.</param>
            <param name="player">Player to who give gift.</param>
        </member>
        <member name="M:Exiled.API.Features.Scp2536.TryGiveWeaponGift(Exiled.API.Features.Player)">
            <summary>
            Tries to give to player a weapon as a gift.
            </summary>
            <param name="player">Player to who give gift.</param>
            <returns><see langword="true"/> if weapon was successfully gaven. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Scp3114Ragdoll">
            <summary>
            A wrapper for SCP-3114 ragdolls.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp3114Ragdoll.#ctor(PlayerRoles.PlayableScps.Scp3114.Scp3114Ragdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Scp3114Ragdoll"/> class.
            </summary>
            <param name="ragdoll">The base ragdoll to wrap. <inheritdoc cref="P:Exiled.API.Features.Scp3114Ragdoll.Base"/></param>
        </member>
        <member name="P:Exiled.API.Features.Scp3114Ragdoll.Base">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Scp3114Ragdoll.DisguiseRole">
            <summary>
            Gets or sets the role that the corpse is disguised as.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp3114Ragdoll.RevealDelay">
            <summary>
            Gets or sets the delay between when SCP-3114 can disguise this corpse.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp3114Ragdoll.RevealDuration">
            <summary>
            Gets or sets the time required to reveal this corpse.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp3114Ragdoll.RevealElapsed">
            <summary>
            Gets or sets the current time of revealing this corpse.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp3114Ragdoll.IsPlayingAnimation">
            <summary>
            Gets or sets a value indicating whether or not this corpse will trigger animation.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Scp559">
            <summary>
            Represents a cake.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Scp559.CakeToWrapper">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> <see cref="T:Scp559Cake"/> to <see cref="T:Exiled.API.Features.Scp559"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp559.#ctor(Scp559Cake)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Scp559"/> class.
            </summary>
            <param name="cakeBase">The <see cref="T:Scp559Cake"/> instance.</param>
        </member>
        <member name="P:Exiled.API.Features.Scp559.List">
            <summary>
            Gets the list with all <see cref="T:Exiled.API.Features.Scp559"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.PopulatedRooms">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> with rooms and amount of people in them.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.SpawnPositions">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> with spawnpoint in rooms.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.AvailableSpawnpoints">
            <summary>
            Gets the list of all available spawnpoints.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.PedestalOffset">
            <summary>
            Gets or sets offset for spawning near pedestals.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.Base">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Scp559.RemainingSlices">
            <summary>
            Gets or sets how many slices are still on cake.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.IsSpawned">
            <summary>
            Gets or sets a value indicating whether or not cake is spawned.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.RemainingTime">
            <summary>
            Gets or sets the time how much cake will still be usable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.RespawnTime">
            <summary>
            Gets or sets the minimum required time for cake to spawn.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp559.Position">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Features.Scp559.Get(Scp559Cake)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Scp559"/> by it's game instance.
            </summary>
            <param name="cake">Game instance.</param>
            <returns><see cref="T:Exiled.API.Features.Scp559"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Scp559.Get(System.Func{Exiled.API.Features.Scp559,System.Boolean})">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of SCP-559 which matches the predicate.
            </summary>
            <param name="predicate">Predicate to match.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of SCP-559.</returns>
        </member>
        <member name="M:Exiled.API.Features.Scp559.TryGetSpawnpoint(UnityEngine.Vector3@,System.Boolean@)">
            <summary>
            Tries to get available spawn point for SCP-559.
            </summary>
            <param name="pos">Position of spawn.</param>
            <param name="pedestal">Will be pedestal also spawned.</param>
            <returns><see langword="true"/> if position was found. Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Scp914">
            <summary>
            A set of tools to modify SCP-914's behaviour.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.Scp914Controller">
            <summary>
            Gets the cached <see cref="T:Scp914.Scp914Controller"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.KnobStatus">
            <summary>
            Gets or sets SCP-914's <see cref="T:Scp914.Scp914KnobSetting"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.ConfigMode">
            <summary>
            Gets or sets SCP-914's config mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.GameObject">
            <summary>
            Gets SCP-914's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.Transform">
            <summary>
            Gets SCP-914's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IntakePosition">
            <summary>
            Gets the position of SCP-914's intake chamber.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.OutputPosition">
            <summary>
            Gets the position of SCP-914's output chamber.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.MovingVector">
            <summary>
            Gets the position offset in which item is moving.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IsWorking">
            <summary>
            Gets a value indicating whether SCP-914 is active and currently processing items.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.InsideIntake">
            <summary>
            Gets a value indicating all of the GameObjects currently present inside SCP-914's intake chamber.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.IntakeBooth">
            <summary>
            Gets the intake booth <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.OutputBooth">
            <summary>
             Gets the output booth <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp914.Doors">
            <summary>
            Gets the list with <see cref="T:Exiled.API.Features.Doors.Door"/> which SCP-914 has.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp914.Scp914InputObject(System.Collections.Generic.IEnumerable{Exiled.API.Features.Player}@,System.Collections.Generic.IEnumerable{Exiled.API.Features.Pickups.Pickup}@)">
            <summary>
            Filters all GameObjects inside SCP-914's intake chamber into players and items.
            </summary>
            <param name="playersret">The <see cref="T:System.Collections.Generic.List`1"/> to return.</param>
            <param name="pickupsret">The <see cref="T:System.Collections.Generic.List`1"/> to return.</param>
            <returns>All GameObjects present inside SCP-914's intake chamber. And also return Player and Pickup casted.</returns>
        </member>
        <member name="M:Exiled.API.Features.Scp914.PlaySound(Scp914.Scp914InteractCode)">
            <summary>
            Plays the SCP-914's sound.
            </summary>
            <param name="soundId">The <see cref="T:Scp914.Scp914InteractCode"/> to play.</param>
        </member>
        <member name="M:Exiled.API.Features.Scp914.Start(Exiled.API.Features.Player,Scp914.Scp914InteractCode)">
            <summary>
            Starts SCP-914.
            </summary>
            <param name="player"><see cref="T:Exiled.API.Features.Player"/> who interacts with Scp914.</param>
            <param name="code"><see cref="T:Scp914.Scp914InteractCode"/> Interact code.</param>
        </member>
        <member name="T:Exiled.API.Features.Scp956">
            <summary>
            A wrapper for <see cref="T:Scp956Pinata"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.Singleton">
            <summary>
            Gets the <see cref="T:Scp956Pinata"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.IsSpawned">
            <summary>
            Gets or sets a value indicating whether or not SCP-956 is spawned.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.Position">
            <summary>
            Gets or sets current position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.InitPos">
            <summary>
            Gets or sets initial position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.Rotation">
            <summary>
            Gets or sets current rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.InitRotation">
            <summary>
            Gets or sets initial rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.IsFlying">
            <summary>
            Gets or sets a value indicating whether or not SCP-956 is flying.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.CurrentTarget">
            <summary>
            Gets or sets current target of an SCP.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.IsCapybara">
            <summary>
            Gets or sets a value indicating whether or not SCP-956 should look like a capybara.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Scp956.AvailableZones">
            <summary>
            Gets or sets zones where SCP-956 can spawn.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Scp956.SpawnBehindTarget(Exiled.API.Features.Player)">
            <summary>
            Spawns behind the specified target.
            </summary>
            <param name="target">Player to spawn. If <paramref name="target"/> is <see langword="null"/>, will be chosen random.</param>
        </member>
        <member name="T:Exiled.API.Features.Server">
            <summary>
            A set of tools to easily work with the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.PluginAssemblies">
            <summary>
            Gets a dictionary that pairs assemblies with their associated plugins.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Host">
            <summary>
            Gets the player's host of the server.
            Might be <see langword="null"/> when called when the server isn't loaded.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Broadcast">
            <summary>
            Gets the cached <see cref="T:Broadcast"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.SendSpawnMessage">
            <summary>
            Gets the cached <see cref="P:Exiled.API.Features.Server.SendSpawnMessage"/> <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Name">
            <summary>
            Gets or sets the name of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Version">
            <summary>
            Gets the server's version.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.StreamingAllowed">
            <summary>
            Gets a value indicating whether or not streaming of this version is allowed.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IsBeta">
            <summary>
            Gets a value indicating whether or not this server is on a beta version of SCP:SL.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.BuildType">
            <summary>
            Gets a value indicating the type of build this server is hosted on.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.PermissionsHandler">
            <summary>
            Gets the RemoteAdmin permissions handler.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IpAddress">
            <summary>
            Gets the Ip address of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IsDedicated">
            <summary>
            Gets a value indicating whether or not this server is a dedicated server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Port">
            <summary>
            Gets the port of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Tps">
            <summary>
            Gets the actual ticks per second of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.Frametime">
            <summary>
            Gets the actual frametime of the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.FriendlyFire">
            <summary>
            Gets or sets a value indicating whether or not friendly fire is enabled.
            </summary>
            <seealso cref="P:Exiled.API.Features.Player.IsFriendlyFireEnabled"/>
        </member>
        <member name="P:Exiled.API.Features.Server.PlayerCount">
            <summary>
            Gets the number of players currently on the server.
            </summary>
            <seealso cref="P:Exiled.API.Features.Player.List"/>
        </member>
        <member name="P:Exiled.API.Features.Server.MaxPlayerCount">
            <summary>
            Gets or sets the maximum number of players able to be on the server.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.LateJoinEnabled">
            <summary>
            Gets a value indicating whether or not late join is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.LateJoinTime">
            <summary>
            Gets the late join time, in seconds. If a player joins less than this many seconds into a game, they will be given a random class.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IsHeavilyModded">
            <summary>
            Gets or sets a value indicating whether the server is marked as Heavily Modded.
            <remarks>
            Read the VSR for more info about its usage.
            </remarks>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IsWhitelisted">
            <summary>
            Gets or sets a value indicating whether or not this server has the whitelist enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IsVerified">
            <summary>
            Gets a value indicating whether or not this server is verified.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.IsIdleModeEnabled">
            <summary>
            Gets or sets a value indicating whether or not idle mode is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Server.SessionVariables">
            <summary>
            Gets the dictionary of the server's session variables.
            <para>
            Session variables can be used to save temporary data. Data is stored in a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            The key of the data is always a <see cref="T:System.String"/>, whereas the value can be any <see cref="T:System.Object"/>.
            The data stored in a session variable can be accessed by different assemblies; it is recommended to uniquely identify stored data so that it does not conflict with other plugins that may also be using the same name.
            Data saved with session variables is not being saved on server restart. If the data must be saved after a restart, a database must be used instead.
            </para>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Server.Restart">
            <summary>
            Restarts the server, reconnects all players.
            </summary>
            <seealso cref="M:Exiled.API.Features.Server.RestartRedirect(System.UInt16)"/>
        </member>
        <member name="M:Exiled.API.Features.Server.Shutdown">
            <summary>
            Shutdowns the server, disconnects all players.
            </summary>
            <seealso cref="M:Exiled.API.Features.Server.ShutdownRedirect(System.UInt16)"/>
        </member>
        <member name="M:Exiled.API.Features.Server.RestartRedirect(System.UInt16)">
            <summary>
            Redirects players to a server on another port, restarts the current server.
            </summary>
            <param name="redirectPort">The port to redirect players to.</param>
            <returns><see langword="true"/> if redirection was successful; otherwise, <see langword="false"/>.</returns>
            <remarks>If the returned value is <see langword="false"/>, the server won't restart.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Server.ShutdownRedirect(System.UInt16)">
            <summary>
            Redirects players to a server on another port, shutdowns the current server.
            </summary>
            <param name="redirectPort">The port to redirect players to.</param>
            <returns><see langword="true"/> if redirection was successful; otherwise, <see langword="false"/>.</returns>
            <remarks>If the returned value is <see langword="false"/>, the server won't shutdown.</remarks>
        </member>
        <member name="M:Exiled.API.Features.Server.RunCommand(System.String,CommandSender)">
            <summary>
            Runs a server command.
            </summary>
            <param name="command">The command to be run.</param>
            <param name="sender">The <see cref="T:CommandSender"/> running the command.</param>
        </member>
        <member name="M:Exiled.API.Features.Server.ExecuteCommand(System.String,CommandSender)">
            <summary>
            Executes a server command.
            </summary>
            <param name="command">The command to be run.</param>
            <param name="sender">The <see cref="T:CommandSender"/> running the command.</param>
            <returns>Command response, if there is one; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Server.TryGetSessionVariable``1(System.String,``0@)">
            <summary>
            Safely gets an <see cref="T:System.Object"/> from <see cref="P:Exiled.API.Features.Server.SessionVariables"/>, then casts it to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The returned object type.</typeparam>
            <param name="key">The key of the object to get.</param>
            <param name="result">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter is used.</param>
            <returns><see langword="true"/> if the SessionVariables contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Snowpile">
            <summary>
            A wrapper for <see cref="T:Snowpile"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Snowpile.BaseToWrapper">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> with <see cref="T:Snowpile"/> to <see cref="T:Exiled.API.Features.Snowpile"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Snowpile.#ctor(Snowpile)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Snowpile"/> class.
            </summary>
            <param name="snowpile">The <see cref="T:Snowpile"/> instance.</param>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.List">
            <summary>
            Gets the list of all snowpiles.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.Base">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.Position">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.Rotation">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.RemainingUses">
            <summary>
            Gets or sets amount of uses that this snowpile can handle.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.Regenerate">
            <summary>
            Gets or sets a value indicating whether or not this snowpile should regenerate amount of usages.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.RegenerationTimer">
            <summary>
            Gets or sets a current timer of regeneration.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.RegenerationDuration">
            <summary>
            Gets or sets time how much snowpile should regenerate 1 snow ball.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Snowpile.InitUses">
            <summary>
            Gets or sets maximal amount of uses that this snowpile can has..
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Snowpile.Get(Snowpile)">
            <summary>
            Gets a <see cref="T:Exiled.API.Features.Snowpile"/> which is connected to it's base game analog.
            </summary>
            <param name="snowpile">Base game analog.</param>
            <returns>A <see cref="T:Exiled.API.Features.Snowpile"/> instance or <see langword="null"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Snowpile.Get(System.Func{Exiled.API.Features.Snowpile,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Snowpile"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satisfy.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains elements that satisfy the condition.</returns>
        </member>
        <member name="T:Exiled.API.Features.Spawn.DynamicSpawnPoint">
            <summary>
            Handles dynamic spawn locations.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.DynamicSpawnPoint.Location">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Enums.SpawnLocationType"/> for this item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.DynamicSpawnPoint.Chance">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.DynamicSpawnPoint.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.DynamicSpawnPoint.Position">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Spawn.RoleSpawnPoint">
            <summary>
            Defines a spawn point that follows a base-game role spawn point.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.RoleSpawnPoint.Role">
            <summary>
            Gets or sets the role type used for this spawn.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.RoleSpawnPoint.Chance">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.RoleSpawnPoint.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.RoleSpawnPoint.Position">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.Spawn.SpawnLocation">
            <summary>
            Represents a spawn location for a <see cref="T:Exiled.API.Features.Roles.Role"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Spawn.SpawnLocation.#ctor(PlayerRoles.RoleTypeId,UnityEngine.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Spawn.SpawnLocation"/> class.
            </summary>
            <param name="roleType">The <see cref="T:PlayerRoles.RoleTypeId"/> this spawn is for.</param>
            <param name="position">The <see cref="T:UnityEngine.Vector3"/> position of the spawn.</param>
            <param name="horizontalRotation">The horizontal rotation of the spawn.</param>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnLocation.RoleType">
            <summary>
            Gets the <see cref="T:PlayerRoles.RoleTypeId"/> the spawn is for.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnLocation.Position">
            <summary>
            Gets the position of the spawn.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnLocation.HorizontalRotation">
            <summary>
            Gets the horizontal rotation of the spawn.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Spawn.SpawnPoint">
            <summary>
            Defines item spawn properties.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnPoint.Name">
            <summary>
            Gets or sets this spawn point name.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnPoint.Chance">
            <summary>
            Gets or sets the spawn chance.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnPoint.Position">
            <summary>
            Gets or sets this spawn point position.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Spawn.SpawnPoint.Deconstruct(System.Single@,UnityEngine.Vector3@)">
            <summary>
            Deconstructs the class into usable variables.
            </summary>
            <param name="chance"><inheritdoc cref="P:Exiled.API.Features.Spawn.SpawnPoint.Chance"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.API.Features.Spawn.SpawnPoint.Position"/></param>
        </member>
        <member name="T:Exiled.API.Features.Spawn.SpawnProperties">
            <summary>
            Handles special properties of spawning an item.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnProperties.Limit">
            <summary>
            Gets or sets a value indicating how many of the item can be spawned when the round starts.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnProperties.DynamicSpawnPoints">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of possible dynamic spawn points.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnProperties.StaticSpawnPoints">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of possible static spawn points.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.SpawnProperties.RoleSpawnPoints">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.List`1"/> of possible role-based spawn points.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Spawn.SpawnProperties.Count">
            <summary>
            Counts how many spawn points are in this instance.
            </summary>
            <returns>How many spawn points there are.</returns>
        </member>
        <member name="T:Exiled.API.Features.Spawn.StaticSpawnPoint">
            <summary>
            Handles static spawn locations.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Spawn.StaticSpawnPoint.Name">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.StaticSpawnPoint.Chance">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.API.Features.Spawn.StaticSpawnPoint.Position">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.API.Features.TeslaGate">
            <summary>
            The in-game tesla gate.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.TeslaGate.BaseTeslaGateToTeslaGate">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:TeslaGate"/>s and their corresponding <see cref="T:Exiled.API.Features.TeslaGate"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.#ctor(TeslaGate,Exiled.API.Features.Room)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.TeslaGate"/> class.
            </summary>
            <param name="baseTeslaGate">The <see cref="T:TeslaGate"/> instance.</param>
            <param name="room">The <see cref="T:Exiled.API.Features.Room"/> for this tesla.</param>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> which contains all the <see cref="T:Exiled.API.Features.TeslaGate"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IgnoredPlayers">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players ignored by tesla gates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IgnoredRoles">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:PlayerRoles.RoleTypeId"/> which contains all the roles ignored by tesla gates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IgnoredTeams">
            <summary>
            Gets or sets a <see cref="T:System.Collections.Generic.HashSet`1"/> of <see cref="T:PlayerRoles.Team"/> which contains all the teams ignored by tesla gates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Base">
            <summary>
            Gets the base <see cref="T:TeslaGate"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.GameObject">
            <summary>
            Gets the tesla gate's <see cref="T:UnityEngine.GameObject"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Transform">
            <summary>
            Gets the tesla gate's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Position">
            <summary>
            Gets the tesla gate's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Rotation">
            <summary>
            Gets the tesla gate's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.Room">
            <summary>
            Gets the tesla gate's <see cref="T:Exiled.API.Features.Room"/> which is located in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IsShocking">
            <summary>
            Gets a value indicating whether or not the tesla gate's shock burst is in progess.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.InactiveTime">
            <summary>
            Gets or sets the tesla gate's inactive time.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.HurtRange">
            <summary>
            Gets or sets the tesla gate's radius from which players can be hurted.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.TriggerRange">
            <summary>
            Gets or sets the tesla gate's distance from which can be triggered.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IdleRange">
            <summary>
            Gets or sets the tesla gate's distance from which players must stand for it to enter idle mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.ActivationTime">
            <summary>
            Gets or sets the tesla gate's windup time to wait before generating the shock.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.CooldownTime">
            <summary>
            Gets or sets the tesla gate's cooldown to wait before the next shock.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.IsIdling">
            <summary>
            Gets or sets a value indicating whether the tesla gate is idling.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.UseInstantBurst">
            <summary>
            Gets or sets a value indicating whether or not the tesla gate's next burst should be treated as instant burst.
            <para>The instant burst ignores the standard cooldown time, reducing it to the cooldown time used for bursts triggered by SCP-079.</para>
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.TantrumsToDestroy">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Hazards.TantrumHazard"/> which contains all the tantrums to destroy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.PlayersInHurtRange">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players inside the hurt range.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.PlayersInIdleRange">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players inside the idle range.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.TeslaGate.PlayersInTriggerRange">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Player"/> which contains all the players inside the trigger range.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.Get(TeslaGate)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.TeslaGate"/> belonging to the <see cref="T:TeslaGate"/>.
            </summary>
            <param name="baseTeslaGate">The <see cref="T:TeslaGate"/> instance.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.TeslaGate"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.Get(System.Func{Exiled.API.Features.TeslaGate,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.TryGet(TeslaGate,Exiled.API.Features.TeslaGate@)">
            <summary>
            Try-get a <see cref="T:Exiled.API.Features.TeslaGate"/> belonging to the <see cref="T:TeslaGate"/>, if any.
            </summary>
            <param name="baseTeslaGate">The <see cref="T:TeslaGate"/> instance.</param>
            <param name="gate">A <see cref="T:Exiled.API.Features.TeslaGate"/> or <see langword="null"/> if not found.</param>
            <returns>Whether or not the tesla gate was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.TryGet(System.Func{Exiled.API.Features.TeslaGate,System.Boolean},System.Collections.Generic.IEnumerable{Exiled.API.Features.TeslaGate}@)">
            <summary>
            Try-get a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <param name="gates">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.TeslaGate"/> which contains elements that satify the condition.</param>
            <returns>Whether or not at least one tesla gate was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.Trigger(System.Boolean)">
            <summary>
            Triggers the tesla gate.
            </summary>
            <param name="isInstantBurst">A value indicating whether the shock should be treated as instant burst.</param>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.ForceTrigger">
            <summary>
            Force triggers the tesla gate ignoring the delay between each burst.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.IsPlayerInHurtRange(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is in the hurt range of a specific tesla gate.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> is in the hurt range of the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.IsPlayerInIdleRange(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is in the idle range of a specific tesla gate.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> is in the idle range of the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.IsPlayerInTriggerRange(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the <see cref="T:Exiled.API.Features.Player"/> is in the trigger range of a specific tesla gate.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> is in the trigger range of the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.CanBeIdle(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the tesla gate can be idle by a specific <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> can idle the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.TeslaGate.CanBeTriggered(Exiled.API.Features.Player)">
            <summary>
            Gets a value indicating whether the tesla gate can be triggered by a specific <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> to check.</param>
            <returns><see langword="true"/> if the given <see cref="T:Exiled.API.Features.Player"/> can trigger the tesla gate; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Features.Toys.AdminToy">
            <summary>
            A wrapper class for <see cref="T:AdminToys.AdminToyBase"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.#ctor(AdminToys.AdminToyBase,Exiled.API.Enums.AdminToyType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Toys.AdminToy"/> class.
            </summary>
            <param name="toyAdminToyBase">The <see cref="T:AdminToys.AdminToyBase"/> to be wrapped.</param>
            <param name="type">The <see cref="T:Exiled.API.Enums.AdminToyType"/> of the object.</param>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.AdminToyBase">
            <summary>
            Gets the original <see cref="T:AdminToys.AdminToyBase"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.ToyType">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.AdminToyType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.Position">
            <summary>
            Gets or sets the position of the toy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.Rotation">
            <summary>
            Gets or sets the rotation of the toy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.Scale">
            <summary>
            Gets or sets the scale of the toy.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.AdminToy.MovementSmoothing">
            <summary>
            Gets or sets the movement smoothing value of the toy.
            <para>
            Higher values reflect smoother movements.
            <br /> - 60 is an ideal value.
            </para>
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.Get(AdminToys.AdminToyBase)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Toys.AdminToy"/> belonging to the <see cref="T:AdminToys.AdminToyBase"/>.
            </summary>
            <param name="adminToyBase">The <see cref="T:AdminToys.AdminToyBase"/> instance.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Toys.AdminToy"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.Spawn">
            <summary>
            Spawns the toy into the game. Use <see cref="M:Exiled.API.Features.Toys.AdminToy.UnSpawn"/> to remove it.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.UnSpawn">
            <summary>
            Removes the toy from the game. Use <see cref="M:Exiled.API.Features.Toys.AdminToy.Spawn"/> to bring it back.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.AdminToy.Destroy">
            <summary>
            Destroys the toy.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Toys.Light">
            <summary>
            A wrapper class for <see cref="T:AdminToys.LightSourceToy"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.Light.#ctor(AdminToys.LightSourceToy)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Toys.Light"/> class.
            </summary>
            <param name="lightSourceToy">The <see cref="T:AdminToys.LightSourceToy"/> of the toy.</param>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.Base">
            <summary>
            Gets the base <see cref="T:AdminToys.LightSourceToy"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.Intensity">
            <summary>
            Gets or sets the intensity of the light.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.Range">
            <summary>
            Gets or sets the range of the light.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.Color">
            <summary>
            Gets or sets the color of the primitive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Light.ShadowEmission">
            <summary>
            Gets or sets a value indicating whether the light should cause shadows from other objects.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.Light.Create(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Light"/>.
            </summary>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Toys.Light"/> should be initially spawned.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Light"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Light.Create(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean,System.Nullable{UnityEngine.Color})">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Light"/>.
            </summary>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Toys.Light"/> should be initially spawned.</param>
            <param name="color">The color of the <see cref="T:Exiled.API.Features.Toys.Light"/>.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Light"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Light.Get(AdminToys.LightSourceToy)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Toys.Light"/> belonging to the <see cref="T:AdminToys.LightSourceToy"/>.
            </summary>
            <param name="lightSourceToy">The <see cref="T:AdminToys.LightSourceToy"/> instance.</param>
            <returns>The corresponding <see cref="T:AdminToys.LightSourceToy"/> instance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Toys.Primitive">
            <summary>
            A wrapper class for <see cref="T:AdminToys.PrimitiveObjectToy"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.#ctor(AdminToys.PrimitiveObjectToy)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Toys.Primitive"/> class.
            </summary>
            <param name="toyAdminToyBase">The <see cref="T:AdminToys.PrimitiveObjectToy"/> of the toy.</param>
        </member>
        <member name="P:Exiled.API.Features.Toys.Primitive.Base">
            <summary>
            Gets the base <see cref="T:AdminToys.PrimitiveObjectToy"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Primitive.Type">
            <summary>
            Gets or sets the type of the primitive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Primitive.Color">
            <summary>
            Gets or sets the material color of the primitive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.Primitive.Collidable">
            <summary>
            Gets or sets a value indicating whether the primitive can be collided with.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.Create(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.
            </summary>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="spawn">Whether or not the <see cref="T:Exiled.API.Features.Toys.Primitive"/> should be initially spawned.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.Create(UnityEngine.PrimitiveType,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.
            </summary>
            <param name="primitiveType">The type of primitive to spawn.</param>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="spawn">Whether or not the <see cref="T:Exiled.API.Features.Toys.Primitive"/> should be initially spawned.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.Create(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean,System.Nullable{UnityEngine.Color})">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.
            </summary>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="spawn">Whether or not the <see cref="T:Exiled.API.Features.Toys.Primitive"/> should be initially spawned.</param>
            <param name="color">The color of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.Create(UnityEngine.PrimitiveType,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean,System.Nullable{UnityEngine.Color})">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.
            </summary>
            <param name="primitiveType">The type of primitive to spawn.</param>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <param name="spawn">Whether or not the <see cref="T:Exiled.API.Features.Toys.Primitive"/> should be initially spawned.</param>
            <param name="color">The color of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.Create(Exiled.API.Structs.PrimitiveSettings)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.
            </summary>
            <param name="primitiveSettings">The settings of the <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.Primitive"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.Primitive.Get(AdminToys.PrimitiveObjectToy)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Toys.Primitive"/> belonging to the <see cref="T:AdminToys.PrimitiveObjectToy"/>.
            </summary>
            <param name="primitiveObjectToy">The <see cref="T:AdminToys.PrimitiveObjectToy"/> instance.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Toys.Primitive"/> instance.</returns>
        </member>
        <member name="T:Exiled.API.Features.Toys.ShootingTargetToy">
            <summary>
            A wrapper class for <see cref="T:AdminToys.ShootingTarget"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.#ctor(AdminToys.ShootingTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/> class.
            </summary>
            <param name="target">The base <see cref="T:AdminToys.ShootingTarget"/> class.</param>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Base">
            <summary>
            Gets the base-game <see cref="T:AdminToys.ShootingTarget"/> for this target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Bullseye">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the bullseye.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.VerificationRule">
            <summary>
            Gets the <see cref="T:Interactables.Verification.IVerificationRule"/> for this target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.BullseyePosition">
            <summary>
            Gets the bullseye location of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.BullseyeRadius">
            <summary>
            Gets the bullseye radius of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.MaxHealth">
            <summary>
            Gets or sets the max health of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Health">
            <summary>
            Gets or sets the remaining health of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.AutoResetTime">
            <summary>
            Gets or sets the remaining health of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Scale">
            <summary>
            Gets or sets the size scale of the target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.IsSynced">
            <summary>
            Gets or sets a value indicating whether or not the target is in sync mode.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ShootingTargetToy.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.Create(Exiled.API.Enums.ShootingTargetType,System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.ShootingTargetType"/> of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</param>
            <param name="position">The position of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</param>
            <param name="rotation">The rotation of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</param>
            <param name="scale">The scale of the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</param>
            <param name="spawn">Whether the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/> should be initially spawned.</param>
            <returns>The new <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/>.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.Get(AdminToys.ShootingTarget)">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/> belonging to the <see cref="T:AdminToys.ShootingTarget"/>.
            </summary>
            <param name="shootingTarget">The <see cref="T:AdminToys.ShootingTarget"/> instance.</param>
            <returns>The corresponding <see cref="T:Exiled.API.Features.Toys.ShootingTargetToy"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.Clear">
            <summary>
            Clears the target and resets its health.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Toys.ShootingTargetToy.Damage(System.Single,PlayerStatsSystem.DamageHandlerBase,UnityEngine.Vector3)">
            <summary>
            Damages the target with the given damage, item, footprint, and hit location.
            </summary>
            <param name="damage">The damage to be dealt.</param>
            <param name="damageHandler">The <see cref="T:PlayerStatsSystem.DamageHandlerBase"/> dealing the damage.</param>
            <param name="exactHit">The exact location of the hit.</param>
            <returns>Whether or not the damage was sent.</returns>
        </member>
        <member name="T:Exiled.API.Features.Toys.ToysHelper">
            <summary>
            A helper class for interacting with toys.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.PrimitiveBaseObject">
            <summary>
            Gets the base <see cref="T:AdminToys.PrimitiveObjectToy"/> to instantiate when creating a new primitive.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.LightBaseObject">
            <summary>
            Gets the base <see cref="T:AdminToys.LightSourceToy"/> to instantiate when creating a new light.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.SportShootingTargetObject">
            <summary>
            Gets the base <see cref="T:AdminToys.ShootingTarget"/> to instantiate when creating a new sport shooting target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.DboyShootingTargetObject">
            <summary>
            Gets the base <see cref="T:AdminToys.ShootingTarget"/> to instantiate when creating a new dboy shooting target.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Toys.ToysHelper.BinaryShootingTargetObject">
            <summary>
            Gets the base <see cref="T:AdminToys.ShootingTarget"/> to instantiate when creating a new binary shooting target.
            </summary>
        </member>
        <member name="T:Exiled.API.Features.Warhead">
            <summary>
            A set of tools to easily work with the alpha warhead.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Controller">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadController"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.SitePanel">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadNukesitePanel"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.OutsitePanel">
            <summary>
            Gets the cached <see cref="T:AlphaWarheadOutsitePanel"/> component.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Lever">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the warhead lever.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.AutoDetonate">
            <summary>
            Gets or sets a value indicating whether or not automatic detonation is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.OpenDoors">
            <summary>
            Gets or sets a value indicating whether or not doors will be opened when the warhead activates.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.BlastDoors">
            <summary>
            Gets all of the warhead blast doors.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.LeverStatus">
            <summary>
            Gets or sets a value indicating whether or not the warhead lever is enabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsKeycardActivated">
            <summary>
            Gets or sets a value indicating whether or not the warhead's outside panel has been opened.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Status">
            <summary>
            Gets or sets the warhead status.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsDetonated">
            <summary>
            Gets a value indicating whether or not the warhead has already been detonated.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsInProgress">
            <summary>
            Gets a value indicating whether or not the warhead detonation is in progress.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.DetonationTimer">
            <summary>
            Gets or sets the warhead detonation timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.RealDetonationTimer">
            <summary>
            Gets the warhead real detonation timer.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.IsLocked">
            <summary>
            Gets or sets a value indicating whether or not the warhead can be disabled.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.Kills">
            <summary>
            Gets or sets the amount of kills caused by the warhead (shown on the summary screen).
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Warhead.CanBeStarted">
            <summary>
            Gets a value indicating whether or not the warhead can be started.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.CloseBlastDoors">
            <summary>
            Closes the surface blast doors.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.TriggerDoors(System.Boolean)">
            <summary>
            Opens or closes all doors on the map, based on the provided <paramref name="open"/>.
            </summary>
            <param name="open">Whether to open or close all doors on the map.</param>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Start">
            <summary>
            Starts the warhead countdown.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Stop">
            <summary>
            Stops the warhead.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Detonate">
            <summary>
            Detonates the warhead.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.Shake">
            <summary>
            Shake all players, like if the warhead has been detonated.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Warhead.CanBeDetonated(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Gets whether or not the provided position will be detonated by the alpha warhead.
            </summary>
            <param name="pos">The position to check.</param>
            <param name="includeOnlyLifts">If <see langword="true"/>, only lifts will be checked.</param>
            <returns>Whether or not the given position is prone to being detonated.</returns>
        </member>
        <member name="T:Exiled.API.Features.Window">
            <summary>
            A wrapper class for <see cref="T:BreakableWindow"/>.
            </summary>
        </member>
        <member name="F:Exiled.API.Features.Window.BreakableWindowToWindow">
            <summary>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing all known <see cref="T:BreakableWindow"/>s and their corresponding <see cref="T:Exiled.API.Features.Window"/>.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Window.#ctor(BreakableWindow,Exiled.API.Features.Room)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Features.Window"/> class.
            </summary>
            <param name="window">The base <see cref="T:BreakableWindow"/> for this door.</param>
            <param name="room">The <see cref="P:Exiled.API.Features.Window.Room"/> for this window.</param>
        </member>
        <member name="P:Exiled.API.Features.Window.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Doors.Door"/> which contains all the <see cref="T:Exiled.API.Features.Doors.Door"/> instances.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Base">
            <summary>
            Gets the base-game <see cref="T:BreakableWindow"/> for this window.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject"/> of the window.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Transform">
            <summary>
            Gets the window's <see cref="T:UnityEngine.Transform"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Room">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room"/> the window is in.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Type">
            <summary>
            Gets the window's <see cref="T:Exiled.API.Enums.GlassType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Zone">
            <summary>
            Gets the window's <see cref="T:Exiled.API.Enums.ZoneType"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Position">
            <summary>
            Gets or sets the window's position.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.IsBreakable">
            <summary>
            Gets a value indicating whether or not this window is breakable.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.IsBroken">
            <summary>
            Gets or sets a value indicating whether or not this window is broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Health">
            <summary>
            Gets or sets if the window's remaining health. No effect if the window cannot be broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.Rotation">
            <summary>
            Gets or sets the window's rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.DisableScpDamage">
            <summary>
            Gets or sets a value indicating whether or not this window can be broken by SCP.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.SyncStatus">
            <summary>
            Gets or sets a value indicating whether or not this window is broken.
            </summary>
        </member>
        <member name="P:Exiled.API.Features.Window.LastAttacker">
            <summary>
            Gets or sets a value indicating who is the LastAttacker.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Window.Get(BreakableWindow)">
            <summary>
            Gets the window object associated with a specific <see cref="T:Exiled.API.Features.Window"/>, or creates a new one if there isn't one.
            </summary>
            <param name="breakableWindow">The base-game <see cref="T:Exiled.API.Features.Window"/>.</param>
            <returns>A <see cref="T:Exiled.API.Features.Doors.Door"/> wrapper object.</returns>
        </member>
        <member name="M:Exiled.API.Features.Window.Get(System.Func{Exiled.API.Features.Window,System.Boolean})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Window"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Window"/> which contains elements that satify the condition.</returns>
        </member>
        <member name="M:Exiled.API.Features.Window.TryGet(BreakableWindow,Exiled.API.Features.Window@)">
            <summary>
            Try-get a <see cref="T:Exiled.API.Features.Window"/> belonging to the <see cref="T:BreakableWindow"/>, if any.
            </summary>
            <param name="breakableWindow">The <see cref="T:BreakableWindow"/> instance.</param>
            <param name="window">A <see cref="T:Exiled.API.Features.Window"/> or <see langword="null"/> if not found.</param>
            <returns>Whether or not a window was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Window.TryGet(System.Func{Exiled.API.Features.Window,System.Boolean},System.Collections.Generic.IEnumerable{Exiled.API.Features.Window}@)">
            <summary>
            Try-get a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Window"/> filtered based on a predicate.
            </summary>
            <param name="predicate">The condition to satify.</param>
            <param name="windows">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Exiled.API.Features.Window"/> which contains elements that satify the condition.</param>
            <returns>Whether or not at least one window was found.</returns>
        </member>
        <member name="M:Exiled.API.Features.Window.BreakWindow">
            <summary>
            Break the window.
            </summary>
        </member>
        <member name="M:Exiled.API.Features.Window.DamageWindow(System.Single)">
            <summary>
            Damages the window.
            </summary>
            <param name="amount">The amount of damage to deal.</param>
        </member>
        <member name="M:Exiled.API.Features.Window.DamageWindow(System.Single,Exiled.API.Features.DamageHandlers.DamageHandlerBase)">
            <summary>
            Damages the window.
            </summary>
            <param name="amount">The amount of damage to deal.</param>
            <param name="handler">The handler of damage.</param>
        </member>
        <member name="M:Exiled.API.Features.Window.ToString">
            <summary>
            Returns the Window in a human-readable format.
            </summary>
            <returns>A string containing Window-related data.</returns>
        </member>
        <member name="T:Exiled.API.Interfaces.IConfig">
            <summary>
            Defines the contract for basic config features.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IConfig.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IConfig.Debug">
            <summary>
            Gets or sets a value indicating whether debug messages should be displayed in the console or not.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IDamageableDoor">
            <summary>
            Interface for doors that can be damaged.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IDamageableDoor.Health">
            <summary>
            Gets or sets the health of the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IDamageableDoor.MaxHealth">
            <summary>
            Gets or sets max health of the door.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IDamageableDoor.IsDestroyed">
            <summary>
            Gets or sets a value indicating whether or not door is destroyed.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IDamageableDoor.IsBreakable">
            <summary>
            Gets a value indicating whether or not this door is breakable.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IDamageableDoor.IgnoredDamage">
            <summary>
            Gets or sets damage types which will be ignored.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IDamageableDoor.Damage(System.Single,Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Damages the door.
            </summary>
            <param name="amount">Amount to be dealt.</param>
            <param name="damageType">Damage type. Some types can be ignored.</param>
            <returns><see langword="true"/> if door was damaged. Otherwise, false.</returns>
        </member>
        <member name="M:Exiled.API.Interfaces.IDamageableDoor.Break(Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Breaks the specified door. No effect if the door cannot be broken, or if it is already broken.
            </summary>
            <param name="type">The <see cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType"/> to apply to the door.</param>
            <returns><see langword="true"/> if the door was broken, <see langword="false"/> if it was unable to be broken, or was already broken before.</returns>
        </member>
        <member name="T:Exiled.API.Interfaces.INonInteractableDoor">
            <summary>
            Represents an interface for all non-interactable doors.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.INonInteractableDoor.IgnoreLockdowns">
            <summary>
            Gets or sets a value indicating whether or not door should ignore lockdowns.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.INonInteractableDoor.IgnoreRemoteAdmin">
            <summary>
            Gets or sets a value indicating whether or not door should ignore RA requests.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IPlugin`1">
            <summary>
            Defines the contract for basic plugin features.
            </summary>
            <typeparam name="TConfig">The config type.</typeparam>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Assembly">
            <summary>
            Gets the plugin assembly.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Name">
            <summary>
            Gets the plugin name.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Prefix">
            <summary>
            Gets the plugin prefix.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Author">
            <summary>
            Gets the plugin author.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Commands">
            <summary>
            Gets the plugin commands.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Priority">
            <summary>
            Gets the plugin priority.
            Higher values mean higher priority and vice versa.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Version">
            <summary>
            Gets the plugin version.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.RequiredExiledVersion">
            <summary>
            Gets the required version of Exiled to run the plugin without bugs or incompatibilities.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.IgnoreRequiredVersionCheck">
            <summary>
            Gets a value indicating whether a plugin should bypass the required EXILED version check.
            This should only be used by plugins which do not need to be updated across major version updates.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.Config">
            <summary>
            Gets the plugin config.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.InternalTranslation">
            <summary>
            Gets the internally used translations. Plugins should implement <see cref="T:Exiled.API.Features.Plugin`2"/> and use <see cref="P:Exiled.API.Features.Plugin`2.Translation"/>.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.ConfigPath">
            <summary>
            Gets the plugin config path.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPlugin`1.TranslationPath">
            <summary>
            Gets the plugin translation path.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnEnabled">
            <summary>
            Fired after enabling the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnDisabled">
            <summary>
            Fired after disabling the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnReloaded">
            <summary>
            Fired after reloading the plugin.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnRegisteringCommands">
            <summary>
            Fired before registering commands.
            </summary>
        </member>
        <member name="M:Exiled.API.Interfaces.IPlugin`1.OnUnregisteringCommands">
            <summary>
            Fired before unregistering configs.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IPosition">
            <summary>
            Represents an object with a <see cref="T:UnityEngine.Vector3"/> position.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IPosition.Position">
            <summary>
            Gets the position of this object.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IRotation">
            <summary>
            Represents an object with a <see cref="T:UnityEngine.Quaternion"/> rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Interfaces.IRotation.Rotation">
            <summary>
            Gets the rotation of this object.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.ITranslation">
            <summary>
            Defines the contract for basic translation features.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IWorldSpace">
            <summary>
            Represents an object with a <see cref="T:UnityEngine.Vector3"/> position and a <see cref="T:UnityEngine.Quaternion"/> rotation.
            </summary>
        </member>
        <member name="T:Exiled.API.Interfaces.IWrapper`1">
            <summary>
            Defines the contract for classes that wrap a base-game object.
            </summary>
            <typeparam name="T">The base-game class that is being wrapped.</typeparam>
        </member>
        <member name="P:Exiled.API.Interfaces.IWrapper`1.Base">
            <summary>
            Gets the base <typeparamref name="T"/> that this class is wrapping.
            </summary>
        </member>
        <member name="T:Exiled.API.Structs.ArmorAmmoLimit">
            <summary>
            The limit of a certain <see cref="T:Exiled.API.Enums.AmmoType"/> when wearing a piece of armor.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.ArmorAmmoLimit.AmmoType">
            <summary>
            The <see cref="T:Exiled.API.Enums.AmmoType"/> being limited.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.ArmorAmmoLimit.Limit">
            <summary>
            The amount to limit to.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.ArmorAmmoLimit.#ctor(Exiled.API.Enums.AmmoType,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Structs.ArmorAmmoLimit"/> struct.
            </summary>
            <param name="type">The <see cref="T:Exiled.API.Enums.AmmoType"/> of the ammo.</param>
            <param name="limit">The ammo limit.</param>
        </member>
        <member name="M:Exiled.API.Structs.ArmorAmmoLimit.op_Implicit(InventorySystem.Items.Armor.BodyArmor.ArmorAmmoLimit)~Exiled.API.Structs.ArmorAmmoLimit">
            <summary>
            Converts a base game <see cref="T:InventorySystem.Items.Armor.BodyArmor.ArmorAmmoLimit"/> to its appropriate <see cref="T:Exiled.API.Structs.ArmorAmmoLimit"/>.
            </summary>
            <param name="armorLimit">Base game armor limit.</param>
        </member>
        <member name="M:Exiled.API.Structs.ArmorAmmoLimit.op_Explicit(Exiled.API.Structs.ArmorAmmoLimit)~InventorySystem.Items.Armor.BodyArmor.ArmorAmmoLimit">
            <summary>
            Converts a <see cref="T:Exiled.API.Structs.ArmorAmmoLimit"/> to its appropriate base game <see cref="T:InventorySystem.Items.Armor.BodyArmor.ArmorAmmoLimit"/>.
            </summary>
            <param name="armorLimit">armor limit.</param>
        </member>
        <member name="T:Exiled.API.Structs.AttachmentIdentifier">
            <summary>
            A tool to identify attachments.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.#ctor(System.UInt32,InventorySystem.Items.Firearms.Attachments.AttachmentName,InventorySystem.Items.Firearms.Attachments.AttachmentSlot)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> struct.
            </summary>
            <param name="code">The code of the attachment.</param>
            <param name="name">The name of the attachment.</param>
            <param name="slot">The slot of the attachment.</param>
        </member>
        <member name="P:Exiled.API.Structs.AttachmentIdentifier.Code">
            <summary>
            Gets the attachment code.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.AttachmentIdentifier.Name">
            <summary>
            Gets the attachment name.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.AttachmentIdentifier.Slot">
            <summary>
            Gets the attachment slot.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Equality(Exiled.API.Structs.AttachmentIdentifier,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="left">The left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand to compare.</param>
            <param name="right">The right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Inequality(Exiled.API.Structs.AttachmentIdentifier,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>.
            </summary>
            <param name="left">The left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand to compare.</param>
            <param name="right">The right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Equality(Exiled.API.Structs.AttachmentIdentifier,InventorySystem.Items.Firearms.Attachments.Components.Attachment)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <param name="right">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Inequality(Exiled.API.Structs.AttachmentIdentifier,InventorySystem.Items.Firearms.Attachments.Components.Attachment)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <param name="right">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Equality(InventorySystem.Items.Firearms.Attachments.Components.Attachment,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.
            </summary>
            <param name="left">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <returns><see langword="true"/> if the values are equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Inequality(InventorySystem.Items.Firearms.Attachments.Components.Attachment,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Compares two operands: <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/>.
            </summary>
            <param name="left">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare.</param>
            <returns><see langword="true"/> if the values are not equal.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Addition(Exiled.API.Structs.AttachmentIdentifier,System.UInt32)">
            <summary>
            Computes the sum of its right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand and its left-hand <see cref="T:System.UInt32"/> operand.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added up.</param>
            <param name="right">The <see cref="T:System.UInt32"/> to be added up.</param>
            <returns>A <see cref="T:System.UInt32"/> value that represents the sum of the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Subtraction(Exiled.API.Structs.AttachmentIdentifier,System.UInt32)">
            <summary>
            Subtracts its right-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand from its left-hand <see cref="T:System.UInt32"/> operand.
            </summary>
            <param name="left">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be subtracted.</param>
            <param name="right">The <see cref="T:System.UInt32"/> to be subtracted.</param>
            <returns>A <see cref="T:System.UInt32"/> value representing the subtraction between the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Addition(System.UInt32,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Computes the sum of its right-hand <see cref="T:System.UInt32"/> operand and its left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand.
            </summary>
            <param name="left">The <see cref="T:System.UInt32"/> to be added up.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be added up.</param>
            <returns>A <see cref="T:System.UInt32"/> value that represents the sum of the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.op_Subtraction(System.UInt32,Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Subtracts its right-hand <see cref="T:System.UInt32"/> operand from its left-hand <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> operand.
            </summary>
            <param name="left">The <see cref="T:System.UInt32"/> to be subtracted.</param>
            <param name="right">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to be subtracted.</param>
            <returns>A <see cref="T:System.UInt32"/> value representing the subtraction between the two operands.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.TryParse(System.String,Exiled.API.Structs.AttachmentIdentifier@)">
            <summary>
            Converts the string representation of a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to its <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> equivalent.
            A return value indicates whether the conversion is succeeded or failed.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
            <param name="identifier">The converted <see cref="T:System.String"/>.</param>
            <returns><see langword="true"/> if <see cref="T:System.String"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.Get(Exiled.API.Enums.FirearmType,InventorySystem.Items.Firearms.Attachments.AttachmentName)">
            <summary>
            Gets a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> by name.
            </summary>
            <param name="type">Weapons <see cref="T:Exiled.API.Enums.FirearmType"/>.</param>
            <param name="name">Attachment name.</param>
            <returns><see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.Get(Exiled.API.Enums.FirearmType,InventorySystem.Items.Firearms.Attachments.AttachmentSlot)">
            <summary>
            Gets the all <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/>'s for type, by slot.
            </summary>
            <param name="type">Weapons <see cref="T:Exiled.API.Enums.FirearmType"/>.</param>
            <param name="slot">Attachment slot.</param>
            <returns><see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> instance.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.TryParse(System.String,InventorySystem.Items.Firearms.Attachments.AttachmentName@)">
            <summary>
            Converts the string representation of a <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> to its <see cref="T:InventorySystem.Items.Firearms.Attachments.AttachmentName"/> equivalent.
            A return value indicates whether the conversion is succeeded or failed.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to convert.</param>
            <param name="name">The converted <see cref="T:System.String"/>.</param>
            <returns><see langword="true"/> if <see cref="T:System.String"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.Equals(InventorySystem.Items.Firearms.Attachments.Components.Attachment)">
            <summary>
            Indicates whether this instance and a <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> are equal.
            </summary>
            <param name="firearmAttachment">The <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> to compare with the current instance.</param>
            <returns><see langword="true"/> if <see cref="T:InventorySystem.Items.Firearms.Attachments.Components.Attachment"/> and this instance represent the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Exiled.API.Structs.AttachmentIdentifier.Equals(Exiled.API.Structs.AttachmentIdentifier)">
            <summary>
            Indicates whether this instance and a <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> are equal.
            </summary>
            <param name="attachmentIdentifier">The <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> to compare with the current instance.</param>
            <returns><see langword="true"/> if <see cref="T:Exiled.API.Structs.AttachmentIdentifier"/> and this instance represent the same value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Exiled.API.Structs.PrimitiveSettings">
            <summary>
            Settings for primitives.
            </summary>
        </member>
        <member name="M:Exiled.API.Structs.PrimitiveSettings.#ctor(UnityEngine.PrimitiveType,UnityEngine.Color,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.API.Structs.PrimitiveSettings"/> struct.
            </summary>
            <param name="primitiveType">The type of the primitive.</param>
            <param name="color">The color of the primitive.</param>
            <param name="position">The position of the primitive.</param>
            <param name="rotation">The rotation of the primitive.</param>
            <param name="scale">The scale of the primitive.</param>
            <param name="spawn">Whether or not the primitive should be spawned.</param>
        </member>
        <member name="P:Exiled.API.Structs.PrimitiveSettings.PrimitiveType">
            <summary>
            Gets the primitive type.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.PrimitiveSettings.Color">
            <summary>
            Gets the primitive color.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.PrimitiveSettings.Position">
            <summary>
            Gets the primitive position.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.PrimitiveSettings.Rotation">
            <summary>
            Gets the primitive rotation.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.PrimitiveSettings.Scale">
            <summary>
            Gets the primitive scale.
            </summary>
        </member>
        <member name="P:Exiled.API.Structs.PrimitiveSettings.Spawn">
            <summary>
            Gets a value indicating whether or not the primitive should be spawned.
            </summary>
        </member>
        <member name="T:Exiled.API.Structs.RadioRangeSettings">
            <summary>
            Settings for specific radio ranges.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.RadioRangeSettings.IdleUsage">
            <summary>
            The amount of battery usage per minute while idle.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.RadioRangeSettings.TalkingUsage">
            <summary>
            The amount of battery usage per minute while talking.
            </summary>
        </member>
        <member name="F:Exiled.API.Structs.RadioRangeSettings.MaxRange">
            <summary>
            The maximum range in which this radio will pickup and send voice messages.
            </summary>
        </member>
    </members>
</doc>
