<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Exiled.Events</name>
    </assembly>
    <members>
        <member name="T:Exiled.Events.Attributes.EventPatchAttribute">
            <summary>
            An attribute to contain data about an event patch.
            </summary>
        </member>
        <member name="M:Exiled.Events.Attributes.EventPatchAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Attributes.EventPatchAttribute"/> class.
            </summary>
            <param name="eventName">The <see cref="T:System.Type"/> of the handler class that contains the event.</param>
            <param name="handlerType">The name of the event.</param>
        </member>
        <member name="P:Exiled.Events.Attributes.EventPatchAttribute.Event">
            <summary>
            Gets the <see cref="T:Exiled.Events.EventArgs.Interfaces.IExiledEvent"/> that will be raised by this patch.
            </summary>
        </member>
        <member name="T:Exiled.Events.Commands.Config.EConfig">
            <summary>
            The config command.
            </summary>
        </member>
        <member name="M:Exiled.Events.Commands.Config.EConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Commands.Config.EConfig"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Config.EConfig.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Config.EConfig.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Config.EConfig.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Config.EConfig.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Config.EConfig.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Config.Merge">
            <summary>
            The config merge command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Config.Merge.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Config.Merge"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Config.Merge.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Config.Merge.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Config.Merge.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Config.Merge.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Config.Split">
            <summary>
            The config split command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Config.Split.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Config.Split"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Config.Split.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Config.Split.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Config.Split.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Config.Split.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.PluginManager.Disable">
            <summary>
            The command to disable a plugin.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Disable.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.PluginManager.Disable"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Disable.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Disable.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Disable.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.PluginManager.Disable.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.PluginManager.Enable">
            <summary>
            The command to enable a plugin.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Enable.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.PluginManager.Enable"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Enable.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Enable.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Enable.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.PluginManager.Enable.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.PluginManager.Patches">
            <summary>
            The command to show all the patches done by plugins.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Patches.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.PluginManager.Patches"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Patches.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Patches.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Patches.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.PluginManager.Patches.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.PluginManager.PluginManager">
            <summary>
            The plugin manager.
            </summary>
        </member>
        <member name="M:Exiled.Events.Commands.PluginManager.PluginManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Commands.PluginManager.PluginManager"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.PluginManager.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.PluginManager.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.PluginManager.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.PluginManager.PluginManager.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.PluginManager.PluginManager.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.PluginManager.Show">
            <summary>
            The command to show all plugins.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Show.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.PluginManager.Show"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Show.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Show.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.PluginManager.Show.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.PluginManager.Show.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.All">
            <summary>
            The reload all command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.All.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.All"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.All.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.All.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.All.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.All.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Configs">
            <summary>
            The reload configs command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.Configs"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Configs.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Configs.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.GamePlay">
            <summary>
            The reload gameplay command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.GamePlay"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.GamePlay.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.GamePlay.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Permissions">
            <summary>
            The reload permissions command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Permissions.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.Permissions"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Permissions.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Permissions.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Permissions.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Permissions.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Plugins">
            <summary>
            The reload plugins command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.Plugins"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Plugins.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Plugins.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Reload">
            <summary>
            The reload command.
            </summary>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Commands.Reload.Reload"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Reload.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.LoadGeneratedCommands">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Reload.ExecuteParent(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.RemoteAdmin">
            <summary>
            The reload remoteadmin command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.RemoteAdmin"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.RemoteAdmin.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.RemoteAdmin.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Commands.Reload.Translations">
            <summary>
            The reload translations command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Translations.Instance">
            <summary>
            Gets static instance of the <see cref="T:Exiled.Events.Commands.Reload.Translations"/> command.
            </summary>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Translations.Command">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Translations.Aliases">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Commands.Reload.Translations.Description">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Commands.Reload.Translations.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.Config">
            <inheritdoc cref="T:Exiled.API.Interfaces.IConfig"/>
        </member>
        <member name="P:Exiled.Events.Config.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Config.Debug">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Config.UseDynamicPatching">
            <summary>
            Gets or sets a value indicating whether events are only patched if they have delegates subscribed to them.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanTutorialBlockScp173">
            <summary>
            Gets or sets a value indicating whether SCP-173 can be blocked or not by the tutorial.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanTutorialTriggerScp096">
            <summary>
            Gets or sets a value indicating whether SCP-096 can be triggered or not by the tutorial.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanScp049SenseTutorial">
            <summary>
            Gets or sets a value indicating whether SCP-049 can activate the sense ability on tutorials.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.TutorialNotAffectedByScp079Scan">
            <summary>
            Gets or sets a value indicating whether tutorial is affected by SCP-079 scan.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanFlashbangsAffectThrower">
            <summary>
            Gets or sets a value indicating whether flashbangs flash original thrower.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.IsNameTrackingEnabled">
            <summary>
            Gets or sets a value indicating whether the name tracking (invisible EXILED version string added to the end of the server name) is enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldDropInventory">
            <summary>
            Gets or sets a value indicating whether the inventory should be dropped before being set as spectator, through commands or plugins.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanSpawnBlood">
            <summary>
            Gets or sets a value indicating whether the blood can be spawned or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.CanKeycardThrowAffectDoors">
            <summary>
            Gets or sets a value indicating whether keycard throw can affect basic doors.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldReloadConfigsAtRoundRestart">
            <summary>
            Gets or sets a value indicating whether configs has to be reloaded every time a round restarts.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldReloadTranslationsAtRoundRestart">
            <summary>
            Gets or sets a value indicating whether translations has to be reloaded every time a round restarts.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.ShouldLogBans">
            <summary>
            Gets a value indicating whether bans should be logged or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.Config.LogRaCommands">
            <summary>
            Gets or sets a value indicating whether to log RA commands.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs">
            <summary>
            Contains all the information after sending a C.A.S.S.I.E. message.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs" /> class.
            </summary>
            <param name="words">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs.Words" />
            </param>
            <param name="makeHold">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs.MakeHold" />
            </param>
            <param name="makeNoise">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs.MakeNoise" />
            </param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs.Words">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs.MakeHold">
            <summary>
            Gets or sets a value indicating whether or not the message should be held.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs.MakeNoise">
            <summary>
            Gets or sets a value indicating whether or not the message should make noise.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the message can be sent.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IAttackerEvent">
            <summary>
            Event args for when a player is taking damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IAttackerEvent.Attacker">
            <summary>
            Gets the attacker <see cref="T:Exiled.API.Features.Player" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IAttackerEvent.DamageHandler">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DamageHandlers.DamageHandlerBase" /> managing the damage to the target.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.ICameraEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Camera" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.ICameraEvent.Camera">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Camera" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IDeniableEvent">
            <summary>
            Event args for events that can be allowed or denied.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IDeniableEvent.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the event is allowed to continue.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IDoorEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Doors.Door" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IDoorEvent.Door">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Doors.Door" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IExiledEvent">
            <summary>
            The base Exiled Event Args interface to be used by all other event arg interfaces/classes.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IFirearmEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Items.Firearm" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IFirearmEvent.Firearm">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Firearm" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IGeneratorEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Generator" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IGeneratorEvent.Generator">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Generator" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IHazardEvent">
            <summary>
            Event args for all <see cref="P:Exiled.Events.EventArgs.Interfaces.IHazardEvent.Hazard"/> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IHazardEvent.Hazard">
            <summary>
            Gets the environmental hazard that the player is interacting with.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IItemEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Items.Item" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IItemEvent.Item">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Item" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IPickupEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Pickups.Pickup" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IPickupEvent.Pickup">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Pickups.Pickup" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IPlayerEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Player" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IPlayerEvent.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IRagdollEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Ragdoll" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IRagdollEvent.Ragdoll">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Ragdoll" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IRoomEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Room" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IRoomEvent.Room">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Room" /> that is a part of the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp0492Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp0492Role" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp0492Event.Scp0492">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp0492Role" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp049Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp049Role" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp049Event.Scp049">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp049Role" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp079Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp079Role" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp079Event.Scp079">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp079Role" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp096Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp096Role" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp096Event.Scp096">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp096Role" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp106Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp106Role" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp106Event.Scp106">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp106Role" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp1507Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp1507Role"/> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp1507Event.Scp1507">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp1507Role"/> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp173Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp173Role" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp173Event.Scp173">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp173Role" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp3114Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp3114Role" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp3114Event.Scp3114">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp3114Role" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp559Event">
            <summary>
            Defines the base contract for all <see cref="T:Scp559Cake"/> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp559Event.Scp559">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Scp559"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IScp939Event">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.Roles.Scp939Role" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IScp939Event.Scp939">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Roles.Scp939Role" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.ITeslaEvent">
            <summary>
            Event args used for all <see cref="T:Exiled.API.Features.TeslaGate" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.ITeslaEvent.Tesla">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.TeslaGate" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Interfaces.IUsableEvent">
            <summary>
            Event args used for all <see cref="P:Exiled.Events.EventArgs.Interfaces.IUsableEvent.Usable" /> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Interfaces.IUsableEvent.Usable">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Interfaces.IUsableEvent.Usable" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs">
            <summary>
            Contains all information before changing firearm ammo.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.#ctor(InventorySystem.Items.ItemBase,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs"/> class.
            </summary>
            <param name="firearm"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.Firearm"/></param>
            <param name="oldAmmo"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.OldAmmo"/></param>
            <param name="newAmmo"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.NewAmmo"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> who's changing the <see cref="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.Firearm"/>'s ammo.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.Firearm">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Firearm"/> the ammo type is being changed to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.OldAmmo">
            <summary>
            Gets the old ammo.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.NewAmmo">
            <summary>
            Gets or sets the new ammo to be used by the firearm.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the ammo can be changed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs">
            <summary>
            Contains all information before changing item attachments.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Items.Firearm,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.Player" />
            </param>
            <param name="firearm">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.Firearm" />
            </param>
            <param name="code">The attachments code.</param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.CurrentAttachmentIdentifiers">
            <summary>
            Gets the old <see cref="T:Exiled.API.Structs.AttachmentIdentifier" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.NewAttachmentIdentifiers">
            <summary>
            Gets or sets the new <see cref="T:Exiled.API.Structs.AttachmentIdentifier" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.CurrentCode">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.CurrentAttachmentIdentifiers" /> code.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.NewCode">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.NewAttachmentIdentifiers" /> code.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the attachments can be changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.Firearm">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Firearm" /> which is being modified.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player" /> who's changing attachments.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs">
            <summary>
            Contains all information before a player charges a <see cref="T:Exiled.API.Features.Items.Jailbird"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ItemBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs.Player"/></param>
            <param name="swingItem">The item being charged.</param>
            <param name="isAllowed">Whether the item can be charged or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> who's charging an item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs.Item">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Item"/> that is being charged. This will always be a <see cref="T:Exiled.API.Features.Items.Jailbird"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the Jailbird can be charged.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs">
            <summary>
            Contains all information before a keycard interacts with a door.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.#ctor(InventorySystem.Items.Keycards.KeycardPickup,Exiled.API.Features.Player,Interactables.Interobjects.DoorUtils.DoorVariant,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs"/> class.
            </summary>
            <param name="pickup"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.Pickup"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.Player"/></param>
            <param name="door"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.Door"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.Pickup">
            <summary>
            Gets the item that's interacting with the door.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.Player">
            <summary>
            Gets the player who's threw the keycard.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.Door">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Doors.Door"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the keycard can interact with the door.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs">
            <summary>
            Contains all information before receiving a preference.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.#ctor(Exiled.API.Features.Player,ItemType,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.Player" />
            </param>
            <param name="itemType">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.Item" />
            </param>
            <param name="currentCode">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.CurrentCode" />
            </param>
            <param name="newCode">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.NewCode" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.Item">
            <summary>
            Gets the <see cref="T:Exiled.API.Enums.FirearmType" /> which is being modified.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.CurrentAttachmentIdentifiers">
            <summary>
            Gets the old <see cref="T:Exiled.API.Structs.AttachmentIdentifier" />[].
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.NewAttachmentIdentifiers">
            <summary>
            Gets or sets the new <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:Exiled.API.Structs.AttachmentIdentifier" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.CurrentCode">
            <summary>
            Gets the current attachments code.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.NewCode">
            <summary>
            Gets or sets the new attachments code.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the attachments preference is allowed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player" /> who's changing attachments.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Item.SwingingEventArgs">
            <summary>
            Contains all information before a player swings a <see cref="T:Exiled.API.Features.Items.Jailbird"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Item.SwingingEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ItemBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Item.SwingingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.SwingingEventArgs.Player"/></param>
            <param name="swingItem">The item being swung.</param>
            <param name="isAllowed">Whether the item can be swung or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.SwingingEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> who's swinging an item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.SwingingEventArgs.Item">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Item"/> that is being swung.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.SwingingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the item can be swung.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs">
            <summary>
            Contains all information before radio pickup battery drains.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.#ctor(InventorySystem.Items.Radio.RadioPickup,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs"/> class.
            </summary>
            <param name="pickup"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.RadioPickup"/></param>
            <param name="drain"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.Drain"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.Pickup">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.RadioPickup">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.Pickup"/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs.Drain">
            <summary>
            Gets or sets the radio percent drain.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs">
            <summary>
            Contains all information before C.A.S.S.I.E announces light containment zone decontamination.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs.#ctor(System.Int32,LightContainmentZoneDecontamination.DecontaminationController.DecontaminationPhase.PhaseFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs" /> class.
            </summary>
            <param name="announcementId">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs.Id" />
            </param>
            <param name="phaseFunction">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs.PhaseFunction" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs.Id">
            <summary>
            Gets the announcement id, from 0 to 6.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs.State">
            <summary>
            Gets the announcement id, from 0 to 6.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs.PhaseFunction">
            <summary>
            Gets a value indicating whether the action will be.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs.IsGlobal">
            <summary>
            Gets a value indicating whether the announcement is going to be global or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs">
            <summary>
            Contains all information before C.A.S.S.I.E announces the NTF entrance.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.#ctor(System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs" /> class.
            </summary>
            <param name="scpsLeft">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.ScpsLeft" />
            </param>
            <param name="unitName">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.UnitName" />
            </param>
            <param name="unitNumber">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.UnitNumber" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.ScpsLeft">
            <summary>
            Gets or sets the number of SCPs left.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.UnitName">
            <summary>
            Gets or sets the NTF unit name.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.UnitNumber">
            <summary>
            Gets or sets the NTF unit number.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the NTF spawn will be announced by C.A.S.S.I.E.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs">
            <summary>
            Contains all information before C.A.S.S.I.E announces an SCP termination.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs" /> class.
            </summary>
            <param name="scp">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.Player" />
            </param>
            <param name="damageHandlerBase">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.DamageHandler" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.Role">
            <summary>
            Gets the killed <see cref="T:Exiled.API.Features.Roles.Role" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.TerminationCause">
            <summary>
            Gets or sets the termination cause.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.Player">
            <summary>
            Gets the player the announcement is being played for.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.Attacker">
            <summary>
            Gets the player who killed the SCP.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.DamageHandler">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the SCP termination will be announced by C.A.S.S.I.E.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs">
            <summary>
            Contains all information for when the server is turned a pickup into a live grenade.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs.#ctor(InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup,InventorySystem.Items.ThrowableProjectiles.ThrownProjectile)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs"/> class.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> being changed.</param>
            <param name="projectile">The <see cref="T:Exiled.API.Features.Pickups.Projectiles.TimeGrenadeProjectile"/>.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs.Pickup">
            <summary>
            Gets a value indicating the pickup that changed into a grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs.Projectile">
            <summary>
            Gets a value indicating the projectile that spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs.FuseTime">
            <summary>
            Gets or sets a value indicating how long the fuse of the changed grenade will be.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs">
            <summary>
            Contains all information for when the server is turning a pickup into a live grenade.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs.#ctor(InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs" /> class.
            </summary>
            <param name="pickup">The <see cref="T:Exiled.API.Features.Pickups.Pickup"/> being changed.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs.Pickup">
            <summary>
            Gets a value indicating the pickup being changed into a grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs.Type">
            <summary>
            Gets or sets a value indicating what type of grenade will be spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the pickup will be changed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.DecontaminatingEventArgs">
            <summary>
            Contains all information before decontaminating the light containment zone.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.DecontaminatingEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.DecontaminatingEventArgs" /> class.
            </summary>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.DecontaminatingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.DecontaminatingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not light containment zone decontamination can begin.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs">
            <summary>
            Contains all information before a grenade explodes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.#ctor(Footprinting.Footprint,UnityEngine.Vector3,InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade,UnityEngine.Collider[])">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs"/> class.
            </summary>
            <param name="thrower"><inheritdoc cref="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Player"/></param>
            <param name="position"><inheritdoc cref="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Position"/></param>
            <param name="grenade"><inheritdoc cref="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Projectile"/></param>
            <param name="targets"><inheritdoc cref="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.TargetsToAffect"/></param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ThrowableProjectiles.EffectGrenade,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs" /> class.
            </summary>
            <param name="thrower">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Player" />
            </param>
            <param name="grenade">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Projectile" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Position">
            <summary>
            Gets the position where the grenade is exploding.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.TargetsToAffect">
            <summary>
            Gets the players who could be affected by the grenade, if any, and the damage that be dealt.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Projectile">
            <summary>
            Gets the grenade that is exploding.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the grenade can be thrown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs.Player">
            <summary>
            Gets the player who thrown the grenade.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.FillingLockerEventArgs">
            <summary>
            Contains all information before the server spawns an item in locker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.FillingLockerEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase,MapGeneration.Distributors.LockerChamber)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.FillingLockerEventArgs" /> class.
            </summary>
            <param name="pickupBase">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.FillingLockerEventArgs.Pickup" />
            </param>
            <param name="lockerChamber">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.FillingLockerEventArgs.LockerChamber" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.FillingLockerEventArgs.Pickup">
            <summary>
            Gets a value indicating the item being spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.FillingLockerEventArgs.LockerChamber">
            <summary>
            Gets a value indicating the target locker chamber.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.FillingLockerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the item can be spawned.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs">
            <summary>
            Contains all information after activating a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs.#ctor(MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs" /> class.
            </summary>
            <param name="generator">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs.Generator" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs.Generator">
            <summary>
            Gets the generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the generator can be activated or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.PickupAddedEventArgs">
            <summary>
            Contains all information after the server spawns a pickup.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.PickupAddedEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.PickupAddedEventArgs" /> class.
            </summary>
            <param name="pickupBase">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.PickupAddedEventArgs.Pickup" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PickupAddedEventArgs.Pickup">
            <summary>
            Gets a value indicating the pickup being spawned.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs">
            <summary>
            Contains all information after the server destroys a pickup.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs" /> class.
            </summary>
            <param name="pickupBase">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs.Pickup" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs.Pickup">
            <summary>
            Gets a value indicating the pickup being destroyed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs">
            <summary>
            Contains all information before placing a blood decal.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,UnityEngine.RaycastHit,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.Player" />
            </param>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.Target" />
            </param>
            <param name="hit">
            <inheritdoc cref="T:UnityEngine.RaycastHit" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.Player"/> who's placing the blood.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.Target">
            <summary>
            Gets the target's <see cref="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.Player"/> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.Position">
            <summary>
            Gets or sets the blood placing position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the blood can be placed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs">
            <summary>
            Contains all information before placing a bullet hole decal.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.RaycastHit)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs" /> class.
            </summary>
            <param name="owner">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs.Player" />
            </param>
            <param name="hit">
            <inheritdoc cref="T:UnityEngine.RaycastHit" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs.Position">
            <summary>
            Gets or sets the decal position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs.Rotation">
            <summary>
            Gets or sets the decal rotation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the decal can be placed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs.Player">
            <summary>
            Gets the decal owner.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.SpawningItemEventArgs">
            <summary>
            Contains all information before the server spawns an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean,Interactables.Interobjects.DoorUtils.DoorVariant)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.SpawningItemEventArgs" /> class.
            </summary>
            <param name="pickupBase">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.Pickup" />
            </param>
            <param name="shouldInitiallySpawn">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.ShouldInitiallySpawn" />
            </param>
            <param name="door">
            <inheritdoc cref="T:Exiled.API.Features.Doors.Door" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.Pickup">
            <summary>
            Gets a value indicating the pickup being spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.ShouldInitiallySpawn">
            <summary>
            Gets or sets a value indicating whether or not the item will be initially spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.TriggerDoor">
            <summary>
            Gets or sets a value indicating the trigger door for pickup.
            </summary>
            <remarks>
            Works only when <see cref="P:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.ShouldInitiallySpawn"/> is false.
            null when <see cref="P:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.ShouldInitiallySpawn"/> is true.
            </remarks>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.SpawningItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the item can be spawned.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.SpawningTeamVehicleEventArgs">
            <summary>
            Contains all information before the server spawns a team's respawn vehicle.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.SpawningTeamVehicleEventArgs.#ctor(Respawning.SpawnableTeamType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.SpawningTeamVehicleEventArgs" /> class.
            </summary>
            <param name="team">
            The team who the vehicle belongs to.
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Map.SpawningTeamVehicleEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.SpawningTeamVehicleEventArgs.Team">
            <summary>
            Gets or sets which vehicle should spawn.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.SpawningTeamVehicleEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the vehicle can be spawned.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs">
            <summary>
            Contains all information before turning off lights.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs.#ctor(RoomLightController,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs"/> class.
            </summary>
            <param name="duration"><inheritdoc cref="P:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs.Duration"/></param>
            <param name="flickerableLightControllerHandler"><inheritdoc cref="P:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs.RoomLightController"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs.RoomLightController">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs.RoomLightController"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs.Duration">
            <summary>
            Gets or sets the blackout duration.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the lights can be turned off.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs">
            <summary>
            Contains all information before a player filps the switch to a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs.Player" />
            </param>
            <param name="generator">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs.Generator" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the switch can be flipped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs.Generator">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs.Generator" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs.Player">
            <summary>
            Gets the player who's filpping the switch to the generator.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs">
            <summary>
            Contains all information before a player activates the warhead panel.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the warhead can be activated.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs.Player">
            <summary>
            Gets the player who's trying to activate the warhead panel.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs">
            <summary>
            Contains all information before a player activates a workstation.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Firearms.Attachments.WorkstationController,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs.Player" />
            </param>
            <param name="controller">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs.WorkstationController" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs.WorkstationController">
            <summary>
            Gets the workstation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs.NewStatus">
            <summary>
            Gets or sets the workstation status.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the workstation can be activated.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs.Player">
            <summary>
            Gets the player who's trying to activate the workstation.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs">
            <summary>
            Contains all information when a player aims.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Items.Firearm,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.Player" />
            </param>
            <param name="firearm">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.Firearm" />
            </param>
            <param name="adsIn">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.AdsIn" />
            </param>
            <param name="adsOut">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.AdsOut" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.AdsIn">
            <summary>
            Gets a value indicating whether or not the player is aiming down sight in.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.AdsOut">
            <summary>
            Gets a value indicating whether or not the player is aiming down sight out.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.Firearm">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Firearm" /> used to trigger the aim action.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs.Player">
            <summary>
            Gets the player who's triggering the aim action.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.BannedEventArgs">
            <summary>
            Contains all information after banning a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.BannedEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,BanDetails,BanHandler.BanType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.BannedEventArgs" /> class.
            </summary>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.BannedEventArgs.Target" /></param>
            <param name="issuer"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.BannedEventArgs.Player" /></param>
            <param name="details"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.BannedEventArgs.Details" /></param>
            <param name="type"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.BannedEventArgs.Type" /></param>
            <param name="isForced"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.BannedEventArgs.IsForced" /></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.BannedEventArgs.Target">
            <summary>
            Gets the banned player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.BannedEventArgs.Player">
            <summary>
            Gets the issuer player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.BannedEventArgs.Details">
            <summary>
            Gets the ban details.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.BannedEventArgs.Type">
            <summary>
            Gets the ban type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.BannedEventArgs.IsForced">
            <summary>
            Gets a value indicating whether the ban is forced or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.BanningEventArgs">
            <summary>
            Contains all information before banning a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.BanningEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.BanningEventArgs" /> class.
            </summary>
            <param name="target">The ban target.</param>
            <param name="issuer">The ban issuer.</param>
            <param name="duration">The ban seconds duration.</param>
            <param name="reason">The ban reason.</param>
            <param name="fullMessage">The ban full message.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.BanningEventArgs.Duration">
            <summary>
            Gets or sets the ban duration.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs">
            <summary>
            Contains all information before a player cancels usage of an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Items.Item)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs" /> class.
            </summary>
            <param name="player">The player who's stopping the use of an item.</param>
            <param name="item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs.Usable" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs.Usable">
            <summary>
            Gets the item that the player cancelling.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs.Player">
            <summary>
            Gets the player who cancelling the item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs">
            <summary>
            Contains all information before a player cancels usage of an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs" /> class.
            </summary>
            <param name="player">The player who's stopping the use of an item.</param>
            <param name="item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsedItemEventArgs.Item" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs.Usable">
            <summary>
            Gets the item that the player cancelling.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs.Player">
            <summary>
            Gets the player who is cancelling the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can cancelling the use of item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangedItemEventArgs">
            <summary>
            Contains all information after a player's held item changes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangedItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangedItemEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangedItemEventArgs.Player" />
            </param>
            <param name="oldItem">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangedItemEventArgs.OldItem" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangedItemEventArgs.OldItem">
            <summary>
            Gets the previous item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangedItemEventArgs.NewItem">
            <summary>
            Gets the new item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangedItemEventArgs.Item">
            <summary>
            Gets the new item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangedItemEventArgs.Player">
            <summary>
            Gets the player who's changed the item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs">
            <summary>
            Contains all information before a player's user group changes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs.#ctor(Exiled.API.Features.Player,UserGroup,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs.Player" />
            </param>
            <param name="newGroup">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs.NewGroup" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs.NewGroup">
            <summary>
            Gets or sets the player's new group.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can change groups.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs.Player">
            <summary>
            Gets the player who's changing his group.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs">
            <summary>
            Contains all information before a player's intercom mute status is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs.Player" />
            </param>
            <param name="isMuted">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs.IsMuted" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs.Player">
            <summary>
            Gets the player who's being intercom muted/unmuted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs.IsMuted">
            <summary>
            Gets a value indicating whether the player is being intercom muted or unmuted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingIntercomMuteStatusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be intercom muted/unmuted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingItemEventArgs">
            <summary>
            Contains all information before a player's held item changes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ItemBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingItemEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingItemEventArgs.Player" />
            </param>
            <param name="newItem">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingItemEventArgs.Item" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingItemEventArgs.Item">
            <summary>
            Gets or sets the new item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event is allowed to continue.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingItemEventArgs.Player">
            <summary>
            Gets the player who's changing the item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs">
            <summary>
            Contains all information before MicroHID state is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.MicroHID.MicroHIDItem,InventorySystem.Items.MicroHID.HidState,InventorySystem.Items.MicroHID.HidState,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.Player" />
            </param>
            <param name="microHID">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.MicroHID" />
            </param>
            <param name="oldState">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.OldState" />
            </param>
            <param name="newState">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.NewState" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.MicroHID">
            <summary>
            Gets the MicroHID instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.OldState">
            <summary>
            Gets the old MicroHID state.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.NewState">
            <summary>
            Gets or sets the new MicroHID state.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the MicroHID state can be changed or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs.Player">
            <summary>
            Gets the player who's using the MicroHID.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs">
            <summary>
            Contains all information before changing movement state.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.FirstPersonControl.PlayerMovementState,PlayerRoles.FirstPersonControl.PlayerMovementState,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.Player" />
            </param>
            <param name="oldState">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.OldState" />
            </param>
            <param name="newState">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.NewState" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.Player">
            <summary>
            Gets the player who's changing the movement state.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.NewState">
            <summary>
            Gets or sets the new state.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the player can change the movement state.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs">
            <summary>
            Contains all information before a player's mute status is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs.Player" />
            </param>
            <param name="isMuted">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs.IsMuted" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs.Player">
            <summary>
            Gets the player who's being muted/unmuted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs.IsMuted">
            <summary>
            Gets a value indicating whether the player is being muted or unmuted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingMuteStatusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be muted/unmuted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs">
            <summary>
            Contains all information before changing a player's in-game nickname.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs.#ctor(Exiled.API.Features.Player,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs"/> class.
            </summary>
            <param name="player">The <see cref="P:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs.Player"/> who's name is being changed.</param>
            <param name="newName">The new name to be used.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs.OldName">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs.Player"/>'s old name.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs.NewName">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs.Player"/>'s new name.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> who's name is being changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event should be allowed.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs">
            <summary>
            Contains all information before radio preset is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Radio.RadioMessages.RadioRangeLevel,InventorySystem.Items.Radio.RadioMessages.RadioRangeLevel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.Player" />
            </param>
            <param name="oldValue">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.OldValue" />
            </param>
            <param name="newValue">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.NewValue" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.OldValue">
            <summary>
            Gets the old radio preset value.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.NewValue">
            <summary>
            Gets or sets the new radio preset value.
            <remarks>Client radio graphics won't sync with this value.</remarks>
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the radio preset can be changed or not.
            <remarks>Client radio graphics won't sync with <see cref="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.OldValue" />.</remarks>
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs.Player">
            <summary>
            Gets the player who's using the radio.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs">
            <summary>
            Contains all information before a player's <see cref="T:PlayerRoles.RoleTypeId" /> changes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.RoleTypeId,PlayerRoles.RoleChangeReason,PlayerRoles.RoleSpawnFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Player" />
            </param>
            <param name="newRole">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.NewRole" />
            </param>
            <param name="reason">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Reason" />
            </param>
            <param name="spawnFlags">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.SpawnFlags" />
            </param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Player">
            <summary>
            Gets the player whose <see cref="T:PlayerRoles.RoleTypeId" /> is changing.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.NewRole">
            <summary>
            Gets or sets the new player's role.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Items">
            <summary>
            Gets base items that the player will receive.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Ammo">
            <summary>
            Gets the base ammo values for the new role.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.ShouldPreserveInventory">
            <summary>
            Gets or sets a value indicating whether the inventory will be preserved or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Reason">
            <summary>
            Gets or sets the reason for their class change.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.SpawnFlags">
            <summary>
            Gets or sets the spawn flags for their class change.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can continue.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs">
            <summary>
            Contains all information before a spectator changes the spectated player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs.#ctor(ReferenceHub,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs.Player" />
            </param>
            <param name="oldTarget">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs.OldTarget" />
            </param>
            <param name="newTarget">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs.NewTarget" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs.OldTarget">
            <summary>
            Gets player that was being spectated.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs.NewTarget">
            <summary>
            Gets the player who's going to be spectated.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs.Player">
            <summary>
            Gets player that is changing spectated player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ClosingGeneratorEventArgs">
            <summary>
            Contains all information before a player closes a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ClosingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ClosingGeneratorEventArgs" /> class.
            </summary>
            <param name="player">The player who's closing the generator.</param>
            <param name="generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator" /> instance.</param>
            <param name="isAllowed">Indicates whether or not the generator can be closed.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ClosingGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the generator door can be closed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ClosingGeneratorEventArgs.Generator">
            <summary>
            Gets the generator that is being closed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ClosingGeneratorEventArgs.Player">
            <summary>
            Gets the player who's closing the generator door.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DamagingDoorEventArgs">
            <summary>
            Contains all information before damage is dealt to a <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant" />.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DamagingDoorEventArgs.#ctor(Interactables.Interobjects.DoorUtils.DoorVariant,System.Single,Interactables.Interobjects.DoorUtils.DoorDamageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DamagingDoorEventArgs" /> class.
            </summary>
            <param name="door">
            <inheritdoc cref="T:Interactables.Interobjects.DoorUtils.DoorVariant" />
            </param>
            <param name="damage">The damage being dealt.</param>
            <param name="doorDamageType">
            <inheritdoc cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingDoorEventArgs.Door">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Doors.Door" /> object that is damaged.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingDoorEventArgs.Damage">
            <summary>
            Gets or sets the damage dealt to the door.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingDoorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the door can be broken.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingDoorEventArgs.DamageType">
            <summary>
            Gets the <see cref="T:Interactables.Interobjects.DoorUtils.DoorDamageType"/> dealt to the door.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs">
            <summary>
            Contains all information before a player damages a shooting target.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.#ctor(Exiled.API.Features.Player,System.Single,System.Single,UnityEngine.Vector3,AdminToys.ShootingTarget,PlayerStatsSystem.DamageHandlerBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.Player" />
            </param>
            <param name="damage">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.Amount" />
            </param>
            <param name="distance">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.Distance" />
            </param>
            <param name="shootingTarget">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.ShootingTarget" />
            </param>
            <param name="damageHandler">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.Item" />
            </param>
            <param name="hitLocation">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.HitLocation" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.ShootingTarget">
            <summary>
            Gets the shooting target which is being damaged.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.DamageHandler">
            <summary>
            Gets the <see cref="T:PlayerStatsSystem.AttackerDamageHandler" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.HitLocation">
            <summary>
            Gets the exact world location the bullet impacted the target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.Amount">
            <summary>
            Gets or sets the damage amount.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.Distance">
            <summary>
            Gets or sets the distance between the shooter and the shooting target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the target can be damaged.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.Item">
            <summary>
            Gets the item which is being used to deal the damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs.Player">
            <summary>
            Gets the player who's damaging the shooting target.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs">
            <summary>
            Contains all information before damage is dealt to a <see cref="T:BreakableWindow" />.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs.#ctor(BreakableWindow,System.Single,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs" /> class.
            </summary>
            <param name="window">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs.Window" />
            </param>
            <param name="damage">The damage being dealt.</param>
            <param name="handler">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs.Handler" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs.Window">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs.Window" /> object that is damaged.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs.Handler">
            <summary>
            Gets or sets the damage handler for this event.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the window can be broken.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player" /> causing the damage.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs">
            <summary>
            Contains all information before deactivating a workstation.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs.#ctor(InventorySystem.Items.Firearms.Attachments.WorkstationController,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs" /> class.
            </summary>
            <param name="controller">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs.WorkstationController" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player" /> last user of the workstation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs.WorkstationController">
            <summary>
            Gets the workstation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs.NewStatus">
            <summary>
            Gets or sets the workstation status.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the workstation can be deactivated.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DestroyingEventArgs">
            <summary>
            Contains all information before a player's object is destroyed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DestroyingEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DestroyingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DestroyingEventArgs.Player" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DestroyingEventArgs.Player">
            <summary>
            Gets the destroying player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DiedEventArgs">
            <summary>
            Contains all information after a player dies.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DiedEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.RoleTypeId,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DiedEventArgs" /> class.
            </summary>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DiedEventArgs.Player" />
            </param>
            <param name="targetOldRole">Target's old <see cref="T:PlayerRoles.RoleTypeId" />.</param>
            <param name="damageHandler">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DiedEventArgs.DamageHandler" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DiedEventArgs.TargetOldRole">
            <summary>
            Gets the old <see cref="T:PlayerRoles.RoleTypeId" /> from the killed player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DiedEventArgs.Player">
            <summary>
            Gets the dead player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DiedEventArgs.DamageHandler">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.Player.DiedEventArgs.DamageHandler" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DiedEventArgs.Attacker">
            <summary>
            Gets the attacker.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs">
            <summary>
            Contains all information after a player drops ammo.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Enums.AmmoType,System.UInt16,System.Collections.Generic.List{InventorySystem.Items.Firearms.Ammo.AmmoPickup})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.Player" />
            </param>
            <param name="ammoType">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.AmmoType" />
            </param>
            <param name="amount">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.Amount" />
            </param>
            <param name="ammoPickups">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.AmmoPickups" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.AmmoType">
            <summary>
            Gets the type of dropped ammo.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.Amount">
            <summary>
            Gets the amount of dropped ammo.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.AmmoPickups">
            <summary>
            Gets the dropped ammo pickups.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs.Player">
            <summary>
            Gets the player who dropped the ammo.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DroppedItemEventArgs">
            <summary>
            Contains all information after a player drops an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DroppedItemEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Pickups.Pickup,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DroppedItemEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppedItemEventArgs.Player" />
            </param>
            <param name="pickup">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppedItemEventArgs.Pickup" />
            </param>
            <param name="wasThrown">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppedItemEventArgs.WasThrown" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppedItemEventArgs.WasThrown">
            <summary>
            Gets or sets a value indicating whether or not the pickup was thrown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppedItemEventArgs.Pickup">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppedItemEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs">
            <summary>
            Contains all information before a player drops ammo.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Enums.AmmoType,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs.Player" />
            </param>
            <param name="ammoType">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs.AmmoType" />
            </param>
            <param name="amount">
            <inheritdoc cref="T:System.Int32" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs.AmmoType">
            <summary>
            Gets the type of ammo being dropped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs.Amount">
            <summary>
            Gets or sets the amount of ammo being dropped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the ammo can be dropped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs.Player">
            <summary>
            Gets the player who's dropping the ammo.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DroppingItemEventArgs">
            <summary>
            Contains all information before a player drops an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ItemBase,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DroppingItemEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.Player" />
            </param>
            <param name="item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.Item" />
            </param>
            <param name="isThrown">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.IsThrown" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.IsThrown">
            <summary>
            Gets or sets a value indicating whether or not the item was thrown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the item can be dropped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.Item">
            <summary>
            Gets the item to be dropped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingItemEventArgs.Player">
            <summary>
            Gets the player who's dropping the item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DroppingNothingEventArgs">
            <summary>
            Contains all information before a player drops a null item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DroppingNothingEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DroppingNothingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DroppingNothingEventArgs.Player" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DroppingNothingEventArgs.Player">
            <summary>
            Gets the player who's dropping the null item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs">
            <summary>
            Contains all information before a player's weapon is dryfired.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Items.Firearm,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs.Player" />
            </param>
            <param name="firearm">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs.Firearm" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the weapon can be dryfired.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs.Firearm">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Firearm" /> being dryfired.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs.Player">
            <summary>
            Gets the player who's dryfiring the weapon.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.DyingEventArgs">
            <summary>
            Contains all information before a player dies.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.DyingEventArgs.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.DyingEventArgs" /> class.
            </summary>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DyingEventArgs.Player" />
            </param>
            <param name="damageHandler">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.DyingEventArgs.DamageHandler" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DyingEventArgs.ItemsToDrop">
            <summary>
            Gets or sets the list of items to be dropped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DyingEventArgs.Player">
            <summary>
            Gets the dying player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DyingEventArgs.DamageHandler">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.DamageHandlers.CustomDamageHandler" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DyingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be killed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.DyingEventArgs.Attacker">
            <summary>
            Gets the killing player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs">
            <summary>
            Contains all information before a player earns an achievement.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs.#ctor(Exiled.API.Features.Player,Achievements.AchievementName,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs"/> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs.Player" />
            </param>
            <param name="achievementName">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs.AchievementName" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs.AchievementName">
            <summary>
            Gets the achievement that will be earned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the achievement will be awarded to the player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs.Player">
            <summary>
            Gets the player who earned the achievement.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs">
            <summary>
            Contains all information before a player enters in an environmental hazard.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs.#ctor(Exiled.API.Features.Player,Hazards.EnvironmentalHazard,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs.Player"/></param>
            <param name="environmentalHazard"><inheritdoc cref="T:Hazards.EnvironmentalHazard"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs.Player">
            <summary>
            Gets the player who's entering the environmental hazard.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs.Hazard">
            <inheritdoc cref="T:Hazards.EnvironmentalHazard"/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player should be affected by the environmental hazard.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs">
            <summary>
            Contains all information before a player enters killer collision.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs.Player">
            <summary>
            Gets the player who's currently entering killer collision.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player is killed by killer collision.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs">
            <summary>
            Contains all information before a player enters the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs.Player" />
            </param>
            <param name="scp106">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs.Scp106" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs.Scp106">
            <summary>
            Gets the SCP-106 who sent the player to the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can enter the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's entering the pocket dimension.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.EscapingEventArgs">
            <summary>
            Contains all information before a player escapes.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.EscapingEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.RoleTypeId,Exiled.API.Enums.EscapeScenario)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.EscapingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.Player" />
            </param>
            <param name="newRole">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.NewRole" />
            </param>
            <param name="escapeScenario">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.EscapeScenario" />
            </param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.EscapingEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.RoleTypeId,Exiled.API.Enums.EscapeScenario,System.Collections.Generic.KeyValuePair{Respawning.SpawnableTeamType,System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.EscapingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.Player" />
            </param>
            <param name="newRole">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.NewRole" />
            </param>
            <param name="escapeScenario">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.EscapeScenario" />
            </param>
            <param name="respawnTickets">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.RespawnTickets"/>
            </param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.EscapingEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.RoleTypeId,Exiled.API.Enums.EscapeScenario,Respawning.SpawnableTeamType,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.EscapingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.Player" />
            </param>
            <param name="newRole">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.NewRole" />
            </param>
            <param name="escapeScenario">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.EscapeScenario" />
            </param>
            <param name="teamToGrantTickets">
            A <see cref="T:Respawning.SpawnableTeamType"/> that <see cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.RespawnTickets"/> will be initialized with.
            </param>
            <param name="ticketsToGrant">
            A <see langword="float"/> that <see cref="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.RespawnTickets"/> will be initialized with.
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.Player">
            <summary>
            Gets the player who's escaping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.NewRole">
            <summary>
            Gets or sets the role that will be assigned when the player escapes.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.EscapeScenario">
            <summary>
            Gets or sets the EscapeScenario that will represent for this player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.RespawnTickets">
            <summary>
            Gets or sets the RespawnTickets that will represent the amount of tickets granted to a specific <see cref="T:Respawning.SpawnableTeamType"/> after the player escapes.
            </summary>
            <seealso cref="T:Respawning.RespawnTokensManager"/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EscapingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can escape.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs">
            <summary>
            Contains all information before a player escapes the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs.Player" />
            </param>
            <param name="position">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs.TeleportPosition" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's escaping the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs.TeleportPosition">
            <summary>
            Gets or sets the position in which the player is going to be teleported to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can successfully escape the pocket dimension.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs">
            <summary>
            Contains all information before a player exits an environmental hazard.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs.#ctor(Exiled.API.Features.Player,Hazards.EnvironmentalHazard,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs.Player"/></param>
            <param name="environmentalHazard"><inheritdoc cref="T:Hazards.EnvironmentalHazard"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs.Player">
            <summary>
            Gets the player who's exiting from the environmental hazard.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs.Hazard">
            <inheritdoc cref="T:Hazards.EnvironmentalHazard"/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player should be affected by the environmental hazard.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs">
            <summary>
            Contains all information before a player dies from walking through an incorrect exit in the pocket dimension.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs.#ctor(Exiled.API.Features.Player,PocketDimensionTeleport,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs.Player" />
            </param>
            <param name="teleporter">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs.Teleporter" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs.Teleporter">
            <summary>
            Gets the PocketDimensionTeleport the player walked into.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player dies by failing the pocket dimension escape.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs.Player">
            <summary>
            Gets the player who's escaping the pocket dimension.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs">
            <summary>
            Contains all information before a player flips a coin.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Coin.Coin,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs.Player" />
            </param>
            <param name="coin">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs.Item" />
            </param>
            <param name="isTails">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs.IsTails" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs.Player">
            <summary>
            Gets the player who's flipping the coin.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs.IsTails">
            <summary>
            Gets or sets a value indicating whether or not the coin is landing on tails.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the coin can be flipped.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.HandcuffingEventArgs">
            <summary>
            Contains all information before handcuffing a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.HandcuffingEventArgs" /> class.
            </summary>
            <param name="cuffer">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.Player" />
            </param>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.Target" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.Target">
            <summary>
            Gets the player who is getting cuffed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be handcuffed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HandcuffingEventArgs.Player">
            <summary>
            Gets the cuffer player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.HurtEventArgs">
            <summary>
            Contains all information before a player gets damaged.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.HurtEventArgs.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase,PlayerStatsSystem.DamageHandlerBase.HandlerOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.HurtEventArgs" /> class.
            </summary>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.HurtEventArgs.Player" />
            </param>
            <param name="damageHandler">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.HurtEventArgs.DamageHandler" />
            </param>
            <param name="handlerOutput">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.HurtEventArgs.HandlerOutput" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtEventArgs.Attacker">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtEventArgs.Amount">
            <summary>
            Gets the amount of inflicted damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtEventArgs.HandlerOutput">
            <summary>
            Gets or sets the action than will be made on the player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtEventArgs.DamageHandler">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.HurtingEventArgs">
            <summary>
            Contains all information before a player gets damaged.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.HurtingEventArgs.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.HurtingEventArgs" /> class.
            </summary>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.HurtingEventArgs.Player" />
            </param>
            <param name="damageHandler">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.HurtingEventArgs.DamageHandler" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtingEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtingEventArgs.Attacker">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtingEventArgs.Amount">
            <summary>
            Gets or sets the amount of inflicted damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtingEventArgs.DamageHandler">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.HurtingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.InteractedEventArgs">
            <summary>
            Contains all information after a player has interacted with an interactable.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.InteractedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.InteractedEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractedEventArgs.Player" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractedEventArgs.Player">
            <summary>
            Gets the player who interacted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs">
            <summary>
            Contains all information before a player interacts with a door.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.#ctor(Exiled.API.Features.Player,Interactables.Interobjects.DoorUtils.DoorVariant,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.Player" />
            </param>
            <param name="door">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.Door" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with the door.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.Door">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Doors.Door" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.Player">
            <summary>
            Gets the player who's interacting with the door.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs">
            <summary>
            Contains all information before a player interacts with an elevator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.#ctor(Exiled.API.Features.Player,Interactables.Interobjects.ElevatorChamber,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.Player" />
            </param>
            <param name="elevator">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.Elevator" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.Elevator">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.Elevator" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.Lift">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.Lift" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with the elevator.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs.Player">
            <summary>
            Gets the player who's interacting with the elevator.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs">
            <summary>
            Contains all information before a player interacts with a locker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Locker,MapGeneration.Distributors.LockerChamber,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.Player" />
            </param>
            <param name="locker">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.Locker" />
            </param>
            <param name="lockerChamber">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.Chamber" />
            </param>
            <param name="chamberId">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.ChamberId" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.Locker">
            <summary>
            Gets the <see cref="T:MapGeneration.Distributors.Locker" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.Chamber">
            <summary>
            Gets the interacting chamber.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.ChamberId">
            <summary>
            Gets the chamber id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with the locker.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs.Player">
            <summary>
            Gets the player who's interacting with the locker.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs">
            <summary>
            Contains all information before a player interacts with a shooting target.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.#ctor(Exiled.API.Features.Player,AdminToys.ShootingTarget,Exiled.API.Enums.ShootingTargetButton,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.Player" />
            </param>
            <param name="shootingTarget">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.ShootingTarget" />
            </param>
            <param name="targetButton">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.TargetButton" />
            </param>
            <param name="maxHp">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.NewMaxHp" />
            </param>
            <param name="autoResetTime">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.NewAutoResetTime" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.ShootingTarget">
            <summary>
            Gets the shooting target being interacted with.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.TargetButton">
            <summary>
            Gets the button the player interacted with.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.NewMaxHp">
            <summary>
            Gets or sets the new max HP of the target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.NewAutoResetTime">
            <summary>
            Gets or sets the new auto reset time of the target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the interaction is allowed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs.Player">
            <summary>
            Gets the player interacting with the shooting target.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs">
            <summary>
            Contains all information before a <see cref="T:Exiled.API.Features.Player"/> is interacting with snowpile.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Snowpile,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs.Player"/></param>
            <param name="snowpile"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs.Snowpile"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs.Snowpile">
            <summary>
            Gets a snowpile with which player is interacting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs.ShouldCheck">
            <summary>
            Gets or sets a value indicating whether or not should be checked if player already has a snowball.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs">
            <summary>
            Contains all information before a player speaks to the intercom.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs.Player">
            <summary>
            Gets the player who's going to speak on the intercom.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can speak on the intercom.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs">
            <summary>
            Contains all information before muting a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs.Player" />
            </param>
            <param name="isIntercom">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs.IsIntercom" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs.Player">
            <summary>
            Gets the player who's being muted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs.IsIntercom">
            <summary>
            Gets or sets a value indicating whether the player is being intercom muted or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be muted.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ItemAddedEventArgs">
            <summary>
            Contains all information after adding an item to a player's inventory.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ItemAddedEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ItemBase,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ItemAddedEventArgs"/> class.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/> the item was added to.</param>
            <param name="itemBase">The added <see cref="T:InventorySystem.Items.ItemBase"/>.</param>
            <param name="pickupBase">The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> the <see cref="T:InventorySystem.Items.ItemBase"/> originated from, or <see langword="null"/> if the item was not picked up.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ItemAddedEventArgs.Player">
            <summary>
            Gets the player that had the item added.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ItemAddedEventArgs.Item">
            <summary>
            Gets the item that was added.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ItemAddedEventArgs.Pickup">
            <summary>
            Gets the pickup that the item originated from or <see langword="null"/> if the item was not picked up.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ItemRemovedEventArgs">
            <summary>
            Contains all information after removing an item from a player's inventory.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ItemRemovedEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ItemBase,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ItemRemovedEventArgs"/> class.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/> the item was removed to.</param>
            <param name="itemBase">The removed <see cref="T:InventorySystem.Items.ItemBase"/>.</param>
            <param name="pickupBase">The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> the <see cref="T:InventorySystem.Items.ItemBase"/> originated from, or <see langword="null"/> if the item was not picked up.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ItemRemovedEventArgs.Player">
            <summary>
            Gets the player that had the item removed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ItemRemovedEventArgs.Item">
            <summary>
            Gets the item that was removed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ItemRemovedEventArgs.Pickup">
            <summary>
            Gets the pickup that the item originated from or <see langword="null"/> if the item was not picked up.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.JoinedEventArgs">
            <summary>
            Contains all information after a player joins the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.JoinedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.JoinedEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.JoinedEventArgs.Player" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.JoinedEventArgs.Player">
            <summary>
            Gets the joined player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.JumpingEventArgs">
            <summary>
            Contains all information before a player jumps.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.JumpingEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.JumpingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.JumpingEventArgs.Player" />
            </param>
            <param name="direction">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.JumpingEventArgs.Direction" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.JumpingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.JumpingEventArgs.Player">
            <summary>
            Gets the player who's jumping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.JumpingEventArgs.Direction">
            <summary>
            Gets or sets the jump direction.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.JumpingEventArgs.Speed">
            <summary>
            Gets or sets the jump speed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.JumpingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the client data can be synchronized with the server.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.KickedEventArgs">
            <summary>
            Contains all information after kicking a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.KickedEventArgs.#ctor(Exiled.API.Features.Player,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.KickedEventArgs" /> class.
            </summary>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.KickedEventArgs.Player" />
            </param>
            <param name="reason">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.KickedEventArgs.Reason" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KickedEventArgs.Reason">
            <summary>
            Gets the kick reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KickedEventArgs.Player">
            <summary>
            Gets the kicked player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.KickingEventArgs">
            <summary>
            Contains all information before kicking a player from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.KickingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.KickingEventArgs" /> class.
            </summary>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.KickingEventArgs.Target" />
            </param>
            <param name="issuer">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.KickingEventArgs.Player" />
            </param>
            <param name="reason">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.KickingEventArgs.Reason" />
            </param>
            <param name="fullMessage">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.KickingEventArgs.FullMessage" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.KickingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KickingEventArgs.Target">
            <summary>
            Gets or sets the ban target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KickingEventArgs.Reason">
            <summary>
            Gets or sets the kick reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KickingEventArgs.FullMessage">
            <summary>
            Gets or sets the full kick message.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KickingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not action is taken against the target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KickingEventArgs.Player">
            <summary>
            Gets or sets the ban issuer.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.KickingEventArgs.LogBanChange(System.String,System.String)">
            <summary>
            Logs the kick, anti-backdoor protection from malicious plugins.
            </summary>
            <param name="assemblyName">The name of the calling assembly.</param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.KillingPlayerEventArgs">
            <summary>
            Contains all information before player data to kill player is sent.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.KillingPlayerEventArgs.#ctor(Exiled.API.Features.Player,PlayerStatsSystem.DamageHandlerBase@)">
            <summary>
             Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.KillingPlayerEventArgs"/> class.
            </summary>
            <param name="player"> Current player. </param>
            <param name="handler"> DamageHandler instance. </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KillingPlayerEventArgs.Player">
            <summary>
            Gets or sets current player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.KillingPlayerEventArgs.Handler">
            <summary>
            Gets or sets current Damage Handler.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.LandingEventArgs">
            <summary>
            Contains all the information after a <see cref="T:Exiled.API.Features.Player" /> lands on the ground.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.LandingEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.LandingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.LandingEventArgs.Player" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.LandingEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player" /> who's landing.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.LeftEventArgs">
            <summary>
            Contains all information after a <see cref="T:Exiled.API.Features.Player"/> disconnects from the server.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.LeftEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.LeftEventArgs"/> class.
            </summary>
            <param name="player">The player who left the server.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.LocalReportingEventArgs">
            <summary>
            Contains information before a report is sent to local administrators.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.LocalReportingEventArgs" /> class.
            </summary>
            <param name="issuer">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.Player" />
            </param>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.Target" />
            </param>
            <param name="reason">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.Reason" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.Target">
            <summary>
            Gets the reported player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.Reason">
            <summary>
            Gets or sets the report reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the report can be processed or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.LocalReportingEventArgs.Player">
            <summary>
            Gets the reporter.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs">
            <summary>
            Contains all information before a player makes noise.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs.#ctor(Exiled.API.Features.Player,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs" /> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs.Player"/></param>
            <param name="distance"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs.Distance"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs.Player">
            <summary>
            Gets the player who's making noise.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs.Distance">
            <summary>
            Gets or sets the footsteps distance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs">
            <summary>
            Contains all information before a player opens a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs.Player" />
            </param>
            <param name="generator">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs.Generator" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the generator can be opened.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs.Generator">
            <summary>
            Gets the generator that is opening.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs.Player">
            <summary>
            Gets the player who's opening the generator.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs">
            <summary>
            Contains all information before a player picks up an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs.Player" />
            </param>
            <param name="pickup">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs.Pickup" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the item can be picked up.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs.Pickup">
            <summary>
            Gets the pickup that's being picked up.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs.Player">
            <summary>
            Gets the player who's picking up an item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs">
            <summary>
            Contains all information before pre-authenticating a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.#ctor(System.String,System.String,System.Int64,CentralAuthPreauthFlags,System.String,System.Byte[],LiteNetLib.ConnectionRequest,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs"/> class.
            </summary>
            <param name="userId"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.UserId"/></param>
            <param name="ipAddress"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.IpAddress"/></param>
            <param name="expiration"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Expiration"/></param>
            <param name="flags"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Flags"/></param>
            <param name="country"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Country"/></param>
            <param name="signature"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Signature"/></param>
            <param name="request"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Request"/></param>
            <param name="readerStartPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.ReaderStartPosition"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.UserId">
            <summary>
            Gets the player's user id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.IpAddress">
            <summary>
            Gets the player's IP address.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Expiration">
            <summary>
            Gets the request's expiration.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Country">
            <summary>
            Gets the player's country.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Signature">
            <summary>
            Gets the request's signature.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.ReaderStartPosition">
            <summary>
            Gets the reader starting position for reading the preauth.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Request">
            <summary>
            Gets the connection request.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.IsAllowed">
            <summary>
            Gets a value indicating whether the player can be authenticated or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.CachedPreauthData">
            <summary>
            Gets or sets the cached <see cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.CachedPreauthData"/> that is returned back to the NwPluginAPI.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Delay(System.Byte,System.Boolean)">
            <summary>
            Delays a pre-authentincating player.
            </summary>
            <param name="seconds">The seconds of delay.</param>
            <param name="isForced">Indicates whether the delay is forced or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Redirect(System.UInt16,System.Boolean)">
            <summary>
            Redirects a pre-authentincating player.
            </summary>
            <param name="port">The redirection port.</param>
            <param name="isForced">Indicates whether the redirection is forced or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.RejectBanned(System.String,System.DateTime,System.Boolean)">
            <summary>
            Rejects a pre-authentincating banned player.
            </summary>
            <param name="banReason">The ban reason.</param>>
            <param name="expiration">The ban <see cref="T:System.DateTime"/> expiration.</param>
            <param name="isForced">Indicates whether the rejection is forced or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.RejectBanned(System.String,System.Int64,System.Boolean)">
            <summary>
            Rejects a pre-authentincating banned player.
            </summary>
            <param name="banReason">The ban reason.</param>
            <param name="expiration">The ban expiration.</param>
            <param name="isForced">Indicates whether the rejection is forced or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Reject(System.String,System.Boolean)">
            <summary>
            Rejects a pre-authentincating player.
            </summary>
            <param name="customReason">The rejection custom reason.</param>
            <param name="isForced">Indicates whether the rejection is forced or not.</param>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Reject(RejectionReason,System.Boolean)">
            <summary>
            Rejects a pre-authentincating player.
            </summary>
            <param name="reason">The <see cref="T:RejectionReason"/>.</param>
            <param name="isForced">Indicates whether the rejection is forced or not.</param>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs">
            <summary>
            Contains all information before a player receives a <see cref="T:CustomPlayerEffects.StatusEffectBase" />.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.#ctor(Exiled.API.Features.Player,CustomPlayerEffects.StatusEffectBase,System.Byte,System.Byte,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs" /> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.Player"/></param>
            <param name="effect"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.Effect"/></param>
            <param name="intensity">The intensity the effect is being changed to.</param>
            <param name="currentIntensity"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.CurrentIntensity"/></param>
            <param name="duration"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.Duration"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.Player" /> receiving the effect.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.Effect">
            <summary>
            Gets the <see cref="T:CustomPlayerEffects.StatusEffectBase" /> being received.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.Duration">
            <summary>
            Gets or sets a value indicating how long the effect will last. If its value is 0, then it doesn't always reflect the real effect duration.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.Intensity">
            <summary>
            Gets or sets the value of the new intensity of the effect. Setting this to <c>0</c> is the same as setting IsAllowed to
            <see langword="false" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.CurrentIntensity">
            <summary>
            Gets the value of the intensity of this effect on the player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the effect will be applied.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs">
            <summary>
            Contains all information before a player's weapon is reloaded.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Items.Firearm,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs.Player" />
            </param>
            <param name="firearm">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs.Firearm" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the weapon can be reloaded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs.Firearm">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Firearm" /> being reloaded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs.Player">
            <summary>
            Gets the player who's reloading the weapon.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.RemovingHandcuffsEventArgs">
            <summary>
            Contains all information before freeing a handcuffed player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.RemovingHandcuffsEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.RemovingHandcuffsEventArgs" /> class.
            </summary>
            <param name="cuffer">The cuffer player.</param>
            <param name="target">The target player to be uncuffed.</param>
            <param name="isAllowed">Indicates whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.RemovingHandcuffsEventArgs.Target">
            <summary>
            Gets the target player to be cuffed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.RemovingHandcuffsEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be handcuffed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.RemovingHandcuffsEventArgs.Player">
            <summary>
            Gets the cuffer player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs">
            <summary>
            Contains all information when checking if a player has a reserved slot.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs" /> class.
            </summary>
            <param name="userId">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs.UserId" />
            </param>
            <param name="hasReservedSlot">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs.HasReservedSlot" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs.UserId">
            <summary>
            Gets the UserID of the player that is being checked.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs.HasReservedSlot">
            <summary>
            Gets a value indicating whether the player has a reserved slot in the base game system.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs.Result">
            <summary>
            Gets or sets the event result.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.RevokingMuteEventArgs">
            <summary>
            Contains all information before unmuting a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.RevokingMuteEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.RevokingMuteEventArgs" /> class.
            </summary>
            <param name="player">
               The player who's being unmuted.
            </param>
            <param name="isIntercom">
               Indicates whether the player is being intercom unmuted or not.
            </param>
            <param name="isAllowed">
               Indicates whether or not the player can be unmuted.
            </param>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs">
            <summary>
            Contains all information before a player searches a Pickup.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Pickups.ItemPickupBase,InventorySystem.Searching.SearchSession,InventorySystem.Searching.SearchCompletor,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.Player" />
            </param>
            <param name="pickup">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.Pickup" />
            </param>
            <param name="searchSession">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.SearchSession" />
            </param>
            <param name="searchCompletor">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.SearchCompletor" />
            </param>
            <param name="searchTime">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.SearchTime" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.SearchSession">
            <summary>
            Gets or sets the SearchSession.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.SearchCompletor">
            <summary>
            Gets or sets the SearchCompletor.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.SearchTime">
            <summary>
            Gets or sets the Pickup search duration.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the Pickup can be searched.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.Pickup">
            <summary>
            Gets the Pickup that is being searched.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs.Player">
            <summary>
            Gets the Player who's searching the Pickup.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs">
            <summary>
            Contains all information before a player sends a message in AdminChat.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs.#ctor(Exiled.API.Features.Player,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs.Player" />
            </param>
            <param name="message">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs.Message" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the pickup can be searched.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs.Message">
            <summary>
            Gets or sets the message which is being sent.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs.Player">
            <summary>
            Gets the player who's sending the message.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ShootingEventArgs">
            <summary>
            Contains all information before a player fires a weapon.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ShootingEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Firearms.Firearm,InventorySystem.Items.Firearms.BasicMessages.ShotMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ShootingEventArgs" /> class.
            </summary>
            <param name="shooter">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.Player" />
            </param>
            <param name="firearm">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.Firearm" />
            </param>
            <param name="msg">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.ShotMessage" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.Player">
            <summary>
            Gets the player who's shooting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.Firearm">
            <summary>
            Gets the target <see cref="T:Exiled.API.Features.Items.Firearm" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.ShotMessage">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.ShotMessage" /> for the event.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.ShotPosition">
            <summary>
            Gets or sets the position of the shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.TargetNetId">
            <summary>
            Gets or sets the netId of the target of the shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShootingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the shot can be fired.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ShotEventArgs">
            <summary>
            Contains all information after a player has fired a weapon.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ShotEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Items.Firearm,UnityEngine.RaycastHit,IDestructible,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ShotEventArgs" /> class.
            </summary>
            <param name="shooter">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Player" />
            </param>
            <param name="firearm">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Firearm"/>
            </param>
            <param name="destructible">The <see cref="T:IDestructible" /> hit.</param>
            <param name="hit">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Distance" />
            </param>
            <param name="damage">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Damage" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Player">
            <summary>
            Gets the player who shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Firearm">
            <summary>
            Gets the firearm used to shoot.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Hitbox">
            <summary>
            Gets the hitbox type of the shot. Can be <see langword="null" />!.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Damage">
            <summary>
            Gets or sets the inflicted damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Distance">
            <summary>
            Gets the shot distance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Position">
            <summary>
            Gets the shot position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.RaycastHit">
            <summary>
            Gets the raycast result.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.Target">
            <summary>
            Gets the target of the shot. Can be <see langword="null" />!.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ShotEventArgs.CanHurt">
            <summary>
            Gets or sets a value indicating whether or not the shot can hurt the target.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.SpawnedEventArgs">
            <summary>
            Contains all information after spawning a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.SpawnedEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.PlayerRoleBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.SpawnedEventArgs" /> class.
            </summary>
            <param name="player">the spawned player.</param>
            <param name="oldRole">the spawned player's old <see cref="T:PlayerRoles.PlayerRoleBase">role</see>.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedEventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player" /> who spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedEventArgs.OldRole">
            <summary>
            Gets the player's old <see cref="T:PlayerRoles.PlayerRoleBase">role</see>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedEventArgs.Reason">
            <summary>
            Gets the reason for their class change.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedEventArgs.SpawnFlags">
            <summary>
            Gets the spawn flags for their class change.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs">
            <summary>
            Contains all information after spawning a player ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Ragdoll,PlayerRoles.Ragdolls.RagdollData,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Player" />
            </param>
            <param name="ragdoll">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Ragdoll" />
            </param>
            <param name="info">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Info" />
            </param>
            <param name="damageHandlerBase">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.DamageHandlerBase" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Position">
            <summary>
            Gets the ragdoll's position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Rotation">
            <summary>
            Gets the ragdoll's rotation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Role">
            <summary>
            Gets the ragdoll's <see cref="T:PlayerRoles.RoleTypeId" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.CreationTime">
            <summary>
            Gets the ragdoll's creation time.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Nickname">
            <summary>
            Gets the ragdoll's nickname.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Info">
            <summary>
            Gets the ragdoll's <see cref="T:PlayerRoles.Ragdolls.RagdollData" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.DamageHandlerBase">
            <summary>
            Gets the ragdoll's <see cref="T:PlayerStatsSystem.DamageHandlerBase" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Ragdoll">
            <summary>
            Gets the spawned <see cref="T:Exiled.API.Features.Ragdoll"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs.Player">Owner</see> of the ragdoll.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.SpawningEventArgs">
            <summary>
            Contains all information before spawning a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.SpawningEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Single,PlayerRoles.PlayerRoleBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.SpawningEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.Player" />
            </param>
            <param name="position">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.Position" />
            </param>
            <param name="rotation">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.HorizontalRotation" />
            </param>
            <param name="oldRole">
            the spawned player's old <see cref="T:PlayerRoles.PlayerRoleBase">role</see>.
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.Player">
            <summary>
            Gets the spawning <see cref="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.Position">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.Player"/>'s spawning position.
            </summary>
            <remarks>
            Position will apply only for <see cref="T:Exiled.API.Features.Roles.FpcRole"/>.
            </remarks>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.HorizontalRotation">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.Player"/>'s spawning rotation.
            </summary>
            <remarks>
            Rotation will apply only for <see cref="T:Exiled.API.Features.Roles.FpcRole"/>.
            </remarks>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningEventArgs.OldRole">
            <summary>
            Gets the player's old <see cref="T:PlayerRoles.PlayerRoleBase">role</see>.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs">
            <summary>
            Contains all information before spawning a player ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.#ctor(PlayerRoles.Ragdolls.RagdollData,PlayerStatsSystem.DamageHandlerBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs" /> class.
            </summary>
            <param name="info">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Info" />
            </param>
            <param name="damageHandlerBase">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.DamageHandlerBase" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Position">
            <summary>
            Gets or sets the spawning position of the ragdoll.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Rotation">
            <summary>
            Gets or sets the ragdoll's rotation.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Scale">
            <summary>
            Gets or sets the ragdoll's scale.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Role">
            <summary>
            Gets or sets the ragdoll's <see cref="T:PlayerRoles.RoleTypeId" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.CreationTime">
            <summary>
            Gets the ragdoll's creation time.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Nickname">
            <summary>
            Gets or sets the ragdoll's nickname.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Info">
            <summary>
            Gets or sets the ragdoll's <see cref="T:PlayerRoles.Ragdolls.RagdollData" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.DamageHandlerBase">
            <summary>
            Gets or sets the ragdoll's <see cref="T:PlayerStatsSystem.DamageHandlerBase" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the ragdoll can be spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs.Player">Owner</see> of the ragdoll.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.StayingOnEnvironmentalHazardEventArgs">
            <summary>
            Contains all information when a player stays on an environmental hazard.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.StayingOnEnvironmentalHazardEventArgs.#ctor(Exiled.API.Features.Player,Hazards.EnvironmentalHazard)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.StayingOnEnvironmentalHazardEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.StayingOnEnvironmentalHazardEventArgs.Player"/></param>
            <param name="environmentalHazard"><inheritdoc cref="T:Hazards.EnvironmentalHazard"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.StayingOnEnvironmentalHazardEventArgs.Player">
            <summary>
            Gets the player who's staying on the environmental hazard.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.StayingOnEnvironmentalHazardEventArgs.Hazard">
            <inheritdoc cref="T:Hazards.EnvironmentalHazard"/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs">
            <summary>
            Contains all information before a player turns off a generator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs" /> class.
            </summary>
            <param name="player">The player who's flipping the switch.</param>
            <param name="generator">The <see cref="T:MapGeneration.Distributors.Scp079Generator" /> instance.</param>
            <param name="isAllowed">Indicates whether or not the switch of the generator can be flipped.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the switch can be flipped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs.Generator">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs.Generator" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs.Player">
            <summary>
            Gets the player who's filpping the switch of the generator.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs">
            <summary>
            Contains all information before receving a throwing request.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ThrowableProjectiles.ThrowableItem,InventorySystem.Items.ThrowableProjectiles.ThrowableNetworkHandler.RequestType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs.Throwable"/></param>
            <param name="request"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs.RequestType"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs.Player">
            <summary>
            Gets the player who's sending the request.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs.Throwable">
            <summary>
            Gets or sets the item being thrown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs.RequestType">
            <summary>
             Gets or sets the type of throw being requested.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs">
            <summary>
            Contains all information after a player throws a grenade.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.#ctor(InventorySystem.Items.ThrowableProjectiles.ThrownProjectile,Exiled.API.Features.Player,InventorySystem.Items.ThrowableProjectiles.ThrowableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.Player"/></param>
            <param name="item"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.Throwable"/></param>
            <param name="projectile"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.Projectile"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.Player">
            <summary>
            Gets the player who's thrown the grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.Throwable">
            <summary>
            Gets the item being thrown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.Projectile">
            <summary>
            Gets the thrown grenade.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs.Pickup">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs">
            <summary>
            Contains all information before a player toggles a flashlight.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.#ctor(ReferenceHub,InventorySystem.Items.ToggleableLights.ToggleableLightItemBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs" /> class.
            </summary>
            <param name="hub">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.Player" />
            </param>
            <param name="flashlight">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.Flashlight" />
            </param>
            <param name="newState">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.NewState" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.Flashlight">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Flashlight" /> being toggled.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.NewState">
            <summary>
            Gets or sets a value indicating whether or not the flashlight should be on.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can toggle the flashlight.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs.Player">
            <summary>
            Gets the player who's toggling the flashlight.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs">
            <summary>
            Contains all information before a player toggles noclip.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs.Player" />
            </param>
            <param name="newValue">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs.IsEnabled" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs.Player">
            <summary>
            Gets the player who's toggling noclip.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs.IsEnabled">
            <summary>
            Gets or sets a value indicating whether or not the noclip mode will be enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can toggle noclip.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs">
            <summary>
            Contains all information before a player toggles overwatch mode.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs.#ctor(Exiled.API.Features.Player,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs.Player"/></param>
            <param name="newValue"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs.IsEnabled"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs.Player">
            <summary>
            Gets the player that is toggling overwatch.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs.IsEnabled">
            <summary>
            Gets or sets a value indicating whether overwatch will be enabled or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event is allowed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs">
            <summary>
            Contains all information before toggling a radio.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Radio.RadioItem,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs" /> class.
            </summary>
            <param name="player">
                <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.Player" />
            </param>
            <param name="radio">
                <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.Radio" />
            </param>
            <param name="newState">
                <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.NewState" />
            </param>
            <param name="isAllowed">
                <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.Radio">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Radio" /> which is being used.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.NewState">
            <summary>
            Gets a value indicating whether the radio is being turned on or off.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the radio can be turned on or off.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs.Player">
            <summary>
            Gets the player who's using the radio.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs">
            <summary>
            Contains all information before a player toggles the weapon's flashlight.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Items.Firearm,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.Player" />
            </param>
            <param name="firearm">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.Firearm" />
            </param>
            <param name="newState">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.NewState" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.NewState">
            <summary>
            Gets or sets a value indicating whether the new weapon's flashlight state will be enabled.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the weapon's flashlight can be toggled.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.Firearm">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Firearm" /> being held.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs.Player">
            <summary>
            Gets the player who's toggling the weapon's flashlight.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.TransmittingEventArgs">
            <summary>
            Contains all information regarding the player using the radio.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.TransmittingEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.Voice.VoiceModuleBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.TransmittingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TransmittingEventArgs.Player" />
            </param>
            <param name="voiceModule">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TransmittingEventArgs.VoiceModule" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TransmittingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TransmittingEventArgs.Player">
            <summary>
            Gets the player who's transmitting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TransmittingEventArgs.VoiceModule">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.TransmittingEventArgs.Player"/>'s <see cref="T:PlayerRoles.Voice.VoiceModuleBase" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TransmittingEventArgs.IsTransmitting">
            <summary>
            Gets a value indicating whether or not the player is transmitting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TransmittingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can transmit.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs">
            <summary>
            Contains all information before triggering a tesla.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.TeslaGate)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.Player" />
            </param>
            <param name="teslaGate">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.Tesla" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.IsInHurtingRange">
            <summary>
            Gets or sets a value indicating whether or not the player is in hurting range.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.IsInIdleRange">
            <summary>
            Gets or sets a value indicating whether or not the player will cause the tesla going to be idle.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.IsTriggerable">
            <summary>
            Gets or sets a value indicating whether or not the player will cause the tesla going to be activated.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.Player">
            <summary>
            Gets the player who triggered the tesla.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.Tesla">
            <summary>
            Gets the Tesla.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player will be detected by the tesla.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs.DisableTesla">
            <summary>
            Gets or sets a value indicating whether or not the tesla will be deactivated.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs">
            <summary>
            Contains all information before a player's weapon is unloaded.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Items.Firearm,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs.Player" />
            </param>
            <param name="firearm">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs.Firearm" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the weapon can be unloaded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs.Firearm">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Firearm" /> being unloaded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs.Player">
            <summary>
            Gets the player who's unloading the weapon.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs">
            <summary>
            Contains all information before a generator is unlocked.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.Distributors.Scp079Generator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs.Player" />
            </param>
            <param name="generator">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs.Generator" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the generator can be unlocked.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs.Generator">
            <summary>
            Gets the generator that is going to be unlocked.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs.Player">
            <summary>
            Gets the player who's unlocking the generator.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.UsedItemEventArgs">
            <summary>
            Contains all information after a player used an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.UsedItemEventArgs.#ctor(ReferenceHub,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.UsedItemEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsedItemEventArgs.Player" />
            </param>
            <param name="item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsedItemEventArgs.Item" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsedItemEventArgs.Usable">
            <summary>
            Gets the item that the player used.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsedItemEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsedItemEventArgs.Player">
            <summary>
            Gets the player who used the item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.UsingItemCompletedEventArgs">
            <summary>
            Contains all information before a player uses an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.UsingItemCompletedEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.UsableItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.UsingItemCompletedEventArgs" /> class.
            </summary>
            <param name="player">The player who's going to use the item.</param>
            <param name="item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsedItemEventArgs.Item" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemCompletedEventArgs.Usable">
            <summary>
            Gets the item that the player using.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemCompletedEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemCompletedEventArgs.Player">
            <summary>
            Gets the player who using the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemCompletedEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can use the item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.UsingItemEventArgs">
            <summary>
            Contains all information before a player uses an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.UsingItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.UsableItem,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.UsingItemEventArgs" /> class.
            </summary>
            <param name="player">The player who's going to use the item.</param>
            <param name="cooldown">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingItemEventArgs.Cooldown" />
            </param>
            <param name="item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsedItemEventArgs.Item" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemEventArgs.Usable">
            <summary>
            Gets the item that the player using.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemEventArgs.Player">
            <summary>
            Gets the player who using the item.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemEventArgs.Cooldown">
            <summary>
            Gets or sets the item cooldown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can use the item.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs">
            <summary>
            Contains all information before MicroHID energy is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.MicroHID.MicroHIDItem,InventorySystem.Items.MicroHID.HidState,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.Player" />
            </param>
            <param name="microHIDitem">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.MicroHID" />
            </param>
            <param name="currentState">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.CurrentState" />
            </param>
            <param name="drain">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.Drain" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.MicroHID">
            <summary>
            Gets the MicroHID instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.CurrentState">
            <summary>
            Gets the current state of the MicroHID.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.Drain">
            <summary>
            Gets or sets the MicroHID energy drain.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the MicroHID energy can be changed or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs.Player">
            <summary>
            Gets the player who's using the MicroHID.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs">
            <summary>
            Contains all information before radio battery charge is changed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.#ctor(InventorySystem.Items.Radio.RadioItem,Exiled.API.Features.Player,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs" /> class.
            </summary>
            <param name="radio">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.Radio" />
            </param>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.Player" />
            </param>
            <param name="drain">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.Drain" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.Radio">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Items.Radio" /> which is being used.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.Item">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.Drain">
            <summary>
            Gets or sets the radio battery drain per second.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the radio battery charge can be changed or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs.Player">
            <summary>
            Gets the player who's using the radio.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.VerifiedEventArgs">
            <summary>
            Contains all information after the server verifies a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.VerifiedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.VerifiedEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.VerifiedEventArgs.Player" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.VerifiedEventArgs.Player">
            <summary>
            Gets the verified player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs">
            <summary>
            Contains all information after a player presses the voicechat key.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.#ctor(Exiled.API.Features.Player,VoiceChat.Networking.VoiceMessage,PlayerRoles.Voice.VoiceModuleBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.Player" />
            </param>
            <param name="voiceMessage">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.VoiceMessage" />
            </param>
            <param name="voiceModule">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.VoiceModule" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.Player">
            <summary>
            Gets the player who's voicechatting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.VoiceMessage">
            <summary>
            Gets or sets the <see cref="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.Player"/>'s <see cref="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.VoiceMessage" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.VoiceModule">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.Player"/>'s <see cref="T:PlayerRoles.Voice.VoiceModuleBase" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can voicechat.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs">
            <summary>
            Contains all information after zombie consumes RagDolls.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs"/> class.
            </summary>
            <param name="player"> <inheritdoc cref="P:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs.Player"/></param>
            <param name="ragDoll"> <inheritdoc cref="P:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs.Ragdoll"/> </param>
            <remarks> See <see cref="F:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility.ConsumedRagdolls"/> for all RagDolls consumed.</remarks>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-049-2.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs.Scp0492">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs.Ragdoll">
            <summary>
            Gets the RagDoll to be consumed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs.ConsumeHeal">
            <summary>
            Gets or sets a value about how mush heath the Zombie will get.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs">
            <summary>
            Contains all information before zombie consumes a ragdoll.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.#ctor(ReferenceHub,PlayerRoles.Ragdolls.BasicRagdoll,PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility.ConsumeError,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs"/> class.
            </summary>
            <param name="player"> <inheritdoc cref="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.Player"/></param>
            <param name="ragDoll"> <inheritdoc cref="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.Ragdoll"/> </param>
            <param name="error"> <inheritdoc cref="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.ErrorCode"/> </param>
            <param name="isAllowed"> <inheritdoc cref="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.IsAllowed"/> </param>
            <remarks> See <see cref="F:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility.ConsumedRagdolls"/> for all ragdolls consumed.</remarks>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-049-2.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.Scp0492">
            <inheritdoc />
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.Ragdoll">
            <summary>
            Gets the ragdoll to be consumed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.ErrorCode">
            <summary>
            Gets or sets error code to send back to client.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether 049-2 can consume a corpse.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs">
            <summary>
            Contains all information before a <see cref="T:Exiled.API.Features.Roles.Scp0492Role"/> enters Bloodlust.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs"/> class.
            </summary>
            <param name="player">The <see cref="T:Exiled.API.Features.Player"/> triggering the event.</param>
            <param name="scp0492">The <see cref="T:Exiled.API.Features.Player"/> who is SCP-049-2.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs.Target">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player"/> who is target by SCP-049-2.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs.Scp0492">
            <inheritdoc />
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs">
            <summary>
            Contains all information before SCP-049 good sense of the doctor is activated.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs"/> class with information before SCP-049 sense is activated.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.Player"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.Target"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.Scp049">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.Player">
            <summary>
            Gets the Player who is playing as SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.Target">
            <summary>
            Gets or sets the Player who the sense ability is affecting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.FailedCooldown">
            <summary>
            Gets or sets the cooldown of the ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.Cooldown">
            <summary>
            Gets or sets the cooldown of the ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.Duration">
            <summary>
            Gets or sets the duration of the Effect.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the server will send 049 information on the recall.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp049.AttackingEventArgs">
            <summary>
            Contains all information before SCP-049 attacks a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp049.AttackingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp049.AttackingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.AttackingEventArgs.Player"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.AttackingEventArgs.Target"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.AttackingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.AttackingEventArgs.Scp049">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.AttackingEventArgs.Player">
            <summary>
            Gets the player controlling SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.AttackingEventArgs.Target">
            <summary>
            Gets the target of attack.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.AttackingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not target can be attacked.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs">
            <summary>
            Contains all information before SCP-049 finishes reviving a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,PlayerRoles.Ragdolls.BasicRagdoll,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs" /> class.
            </summary>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.Target" />
            </param>
            <param name="scp049">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.Player" />
            </param>
            <param name="ragdoll">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.Ragdoll" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.Scp049">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.Target">
            <summary>
            Gets the player who's getting revived.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.Ragdoll">
            <summary>
            Gets the Ragdoll who's getting revived.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can be revived.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs.IsFlamingo">
            <summary>
            Gets or sets a value indicating whether or not revived player should become a zombie flamingo.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs">
            <summary>
            Contains all information before SCP-049 Call is activated.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs.Scp049">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs.Duration">
            <summary>
            Gets or sets the duration of the Call Ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the server will send 049 information on the call.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs">
            <summary>
            Contains all information before SCP-049 begins recalling a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Ragdoll,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.Player"/>
            </param>
            <param name="ragdoll">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.Ragdoll"/>
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.IsAllowed"/>
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.Target">
            <summary>
            Gets the player who's getting recalled.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the recall can begin.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-049.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.Scp049">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs.Ragdoll">
            <summary>
            Gets the Ragdoll who's getting recalled.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs">
            <summary>
            Contains all information before a SCP-079 changes the current camera.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.PlayableScps.Scp079.Cameras.Scp079Camera,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.Player" />
            </param>
            <param name="camera">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.Camera" />
            </param>
            <param name="auxiliaryPowerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.AuxiliaryPowerCost" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.Player">
            <summary>
            Gets the player who is SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power that will be required to switch cameras.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.Camera">
            <summary>
            Gets or sets the camera SCP-079 will be moved to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can switch cameras.
            <para>Defaults to a value describing whether or not SCP-079 has enough auxiliary power to switch.</para>
            <br>Can be set to <see langword="true" /> to allow a switch regardless of SCP-079's auxiliary power amount.</br>
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs">
            <summary>
            Contains all information before SCP-079 uses a speaker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs.Room">
            <summary>
            Gets the room that the speaker is located in.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether SCP-079 is able to speak to players.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs">
            <summary>
            Contains all information before SCP-079 changes rooms via elevator.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.RoomIdentifier,Interactables.Interobjects.ElevatorDoor,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Player" />
            </param>
            <param name="room">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Room" />
            </param>
            <param name="elevatorDoor">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Lift" />
            </param>
            <param name="auxiliaryPowerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.AuxiliaryPowerCost" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to teleport to an elevator camera.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Room">
            <summary>
            Gets <see cref="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Room" /> SCP-079 is in.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Lift">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.Lift" /> SCP-079 wants to move.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can teleport.
            Defaults to a <see cref="T:System.Boolean" /> describing whether or not SCP-079 has enough auxiliary power to teleport.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs">
            <summary>
            Contains all information before SCP-079 gains experience.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.PlayableScps.Scp079.Scp079HudTranslation,System.Int32,PlayerRoles.RoleTypeId,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.Player" />
            </param>
            <param name="gainType">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.GainType" />
            </param>
            <param name="roleType">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.RoleType" />
            </param>
            <param name="amount">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.Amount" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.RoleType">
            <summary>
            Gets or sets the role that was used to gain experience.
            <remark>The RoleType will be <see cref="F:PlayerRoles.RoleTypeId.None"/> when it's not an assisted experience.</remark>
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.GainType">
            <summary>
            Gets or sets the experience gain type.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.Amount">
            <summary>
            Gets or sets the amount of experience to be gained.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the experience is successfully granted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs">
            <summary>
            Contains all information before SCP-079 gains a level.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs.#ctor(Exiled.API.Features.Player,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs.Player" />
            </param>
            <param name="newLevel">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs.NewLevel" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs.NewLevel">
            <summary>
            Gets or sets SCP-079's new level.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the level is successfully granted.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs">
            <summary>
            Contains all information before SCP-079 triggers a tesla gate.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.#ctor(Exiled.API.Features.Player,TeslaGate,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.Player" />
            </param>
            <param name="teslaGate">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.Tesla" />
            </param>
            <param name="auxiliaryPowerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.AuxiliaryPowerCost" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.Tesla">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.TeslaGate" /> that SCP-079 is triggering.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to interact with a tesla gate through SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can interact with the tesla gate.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs">
            <summary>
            Contains all information before SCP-079 lockdowns a room.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.#ctor(Exiled.API.Features.Player,MapGeneration.RoomIdentifier,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.Player" />
            </param>
            <param name="roomIdentifier">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.Room" />
            </param>
            <param name="auxiliaryPowerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.AuxiliaryPowerCost" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.Room">
            <summary>
            Gets the <see cref="T:MapGeneration.RoomIdentifier" /> of the room that will be locked down.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to lockdown a room.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can lockdown a room.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.PingingEventArgs">
            <summary>
            Contains all information before SCP-079 pings a location.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.PingingEventArgs.#ctor(ReferenceHub,RelativePositioning.RelativePosition,System.Int32,System.Byte,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.PingingEventArgs" /> class.
            </summary>
            <param name="hub">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.Player" />
            </param>
            <param name="position">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.Position" />
            </param>
            <param name="proccesorindex">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.Type" />
            </param>
            <param name="powerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.AuxiliaryPowerCost" />
            </param>
            <param name="syncNormal">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.SyncNormal" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.SyncNormal">
            <summary>
            Gets a value indicating if the sync matches.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the event is allowed to continue.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required for SCP-079 to ping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.Type">
            <summary>
            Gets or sets a value indicating the type of ping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.Position">
            <summary>
            Gets or sets a value indicating the position of the ping.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.Room">
            <summary>
            Gets the room where the ping is located in.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.PingingEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.RecontainedEventArgs">
            <summary>
            Contains information after SCP-079 gets recontained.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.RecontainedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.RecontainedEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.RecontainedEventArgs.Player" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RecontainedEventArgs.Player">
            <summary>
            Gets the player that previously controlled SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RecontainedEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs">
            <summary>
            Contains all information before SCP-079 turns off the lights in a room.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.#ctor(ReferenceHub,MapGeneration.RoomIdentifier,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.Player" />
            </param>
            <param name="roomIdentifier">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.Room" />
            </param>
            <param name="blackoutduration">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.BlackoutDuration" />
            </param>
            <param name="auxiliaryPowerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.AuxiliaryPowerCost" />
            </param>
            <param name="cooldown">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.Cooldown" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.Room">
            <summary>
            Gets the room that will be locked down.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.BlackoutDuration">
            <summary>
            Gets or sets the duration of the blackout.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to black out the room.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.Cooldown">
            <summary>
            Gets or sets the blackout cooldown duration.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can black out the room.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs">
            <summary>
            Contains all information before SCP-079 uses a speaker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Room,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.Player" />
            </param>
            <param name="room">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.Room" />
            </param>
            <param name="auxiliaryPowerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.AuxiliaryPowerCost" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.Room">
            <summary>
            Gets the room that the speaker is located in.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to use a speaker through SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StartingSpeakerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can use the speaker.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs">
            <summary>
            Contains all information before SCP-079 finishes using a speaker.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Room,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs.Player" />
            </param>
            <param name="room">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs.Room" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs.Room">
            <summary>
            Gets the room that the speaker is located in.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.StoppingSpeakerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can stop using the speaker.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs">
            <summary>
            Contains all information before SCP-079 interacts with a door.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs.#ctor(Exiled.API.Features.Player,Interactables.Interobjects.DoorUtils.DoorVariant,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.Player" />
            </param>
            <param name="door">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs.Door" />
            </param>
            <param name="auxiliaryPowerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs.AuxiliaryPowerCost" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with the door.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs.Door">
            <summary>
            Gets or sets the <see cref="T:Exiled.API.Features.Doors.Door" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs.Player">
            <summary>
            Gets the player who's interacting with the door.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to trigger a door through SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs">
            <summary>
            Contains all information before SCP-079 lockdowns a room.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.#ctor(ReferenceHub,MapGeneration.FacilityZone,System.Single,System.Single,System.Single,PlayerRoles.PlayableScps.Scp079.Scp079HudTranslation)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Player" />
            </param>
            <param name="zone">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Zone" />
            </param>
            <param name="auxiliaryPowerCost">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.AuxiliaryPowerCost" />
            </param>
            <param name="blackoutduration">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.BlackoutDuration" />
            </param>
            <param name="cooldown">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Cooldown" />
            </param>
            <param name="scp079HudTranslation">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Scp079HudTranslation" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Zone">
            <summary>
            Gets the <see cref="T:MapGeneration.RoomIdentifier" /> of the room that will be locked down.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Scp079HudTranslation">
            <summary>
            Gets the <see cref="T:PlayerRoles.PlayableScps.Scp079.Scp079HudTranslation" /> send back to player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.AuxiliaryPowerCost">
            <summary>
            Gets or sets the amount of auxiliary power required to lockdown a room.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.BlackoutDuration">
            <summary>
            Gets or sets the time of the blackout.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Cooldown">
            <summary>
            Gets or sets the blackout cooldown duration.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-079 can lockdown a room.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs.Scp079">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs">
            <summary>
            Contains all information before adding a target to SCP-096.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs" /> class.
            </summary>
            <param name="scp096">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.Player" />
            </param>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.Target" />
            </param>
            <param name="isLooking">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.IsLooking" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.Player" /> that is controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.Scp096">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.Target">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.Player" /> being added as a target.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.IsLooking">
            <summary>
            Gets a value indicating whether or not the target was being target cause of looking it's face.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the target is allowed to be added.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs">
            <summary>
            Contains all information before SCP-096 calms down.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs" /> class.
            </summary>
            <param name="player">The player who's controlling SCP-096.</param>
            <param name="shouldClearEnragedTimeLeft"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs.ShouldClearEnragedTimeLeft"/></param>
            <param name="isAllowed">Indicates whether or not SCP-096 can calm down.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs.Scp096">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs.ShouldClearEnragedTimeLeft">
            <summary>
            Gets or sets a value indicating whether SCP-096 enrage time left should be cleared or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-096 can be enraged.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp096.ChargingEventArgs">
            <summary>
            Contains all information before SCP-096 charges.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp096.ChargingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp096.ChargingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.ChargingEventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.ChargingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.ChargingEventArgs.Scp096">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.ChargingEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.ChargingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-096 can charge.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp096.EnragingEventArgs">
            <summary>
            Contains all information before SCP-096 gets enraged.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp096.EnragingEventArgs.#ctor(Exiled.API.Features.Player,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp096.EnragingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.EnragingEventArgs.Player" />
            </param>
            <param name="initialDuration">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.EnragingEventArgs.InitialDuration" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.EnragingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.EnragingEventArgs.Scp096">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.EnragingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.EnragingEventArgs.InitialDuration">
            <summary>
            Gets or sets the SCP-096 rage initial duration.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.EnragingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-096 can be enraged.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs">
            <summary>
            Contains all information before SCP-096 begins prying a gate open.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.#ctor(Exiled.API.Features.Player,Interactables.Interobjects.PryableDoor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.Player" />
            </param>
            <param name="gate">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.Door" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.Scp096">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.IsAllowed">
            <summary>
            Gets or Sets a value indicating whether or not the gate can be pried open by SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.Door">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.Door" /> to be pried open.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.Gate">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.Gate" /> to be pried open.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs.Player">
            <summary>
            Gets the player that is controlling SCP-096.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs">
            <summary>
            Contains all information before SCP-096 tries not to cry.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs.Scp096">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs.Player">
            <summary>
            Gets the player who is controlling SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs.Door">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Doors.Door" /> to be cried on.
            <remarks>the value can be null</remarks>
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs.GameObject">
            <summary>
            Gets the <see cref="T:UnityEngine.GameObject" /> to be cried on.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-096 can try not to cry.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp106.AttackingEventArgs">
            <summary>
            Contains all information before SCP-106 attacks a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp106.AttackingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp106.AttackingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.AttackingEventArgs.Player"/></param>
            <param name="target"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.AttackingEventArgs.Target"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.AttackingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.AttackingEventArgs.Player">
            <summary>
            Gets the player controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.AttackingEventArgs.Scp106">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.AttackingEventArgs.Target">
            <summary>
            Gets the target of the attack.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.AttackingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not target can be attacked.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs">
            <summary>
            Contains all information before SCP-106 use the stalk ability.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs.Scp106">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 can stalk.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp106.StalkingEventArgs">
            <summary>
            Contains all information before SCP-106 uses the stalk ability.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp106.StalkingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.Scp106StalkAbility">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.Scp106StalkAbility"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.Vigor">
            <summary>
            Gets or sets the current vigor when SCP-106 starts to stalk.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.MinimumVigor">
            <summary>
            Gets or sets the required minimum vigor to stalk.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.Scp106">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.StalkingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 can stalk.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs">
            <summary>
            Contains all information before SCP-106 teleports using hunter atlas.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs.#ctor(Exiled.API.Features.Player,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs.Player" />
            </param>
            <param name="position">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs.Position" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs.Position">
            <summary>
            Gets or sets the teleporting position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-106 can teleport using a portal.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-106.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs.Scp106">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs">
            <summary>
            Contains all information before SCP-1507 attacks door.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Doors.Door,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs.Player"/></param>
            <param name="door"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs.Door"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs.Scp1507">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs.Door">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs">
            <summary>
            Contains all information before SCP-1507 screams.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs.Scp1507">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs">
            <summary>
            Contains all information before flamingos get spawned.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs"/> class.
            </summary>
            <param name="newAlpha"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs.Player">
            <summary>
            Gets or sets the player which is being spawned as a new alpha flamingo.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs.SpawnablePlayers">
            <summary>
            Gets or sets all enqueued spawnable players.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs.IsAllowed">
            <inheritdoc />
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs">
            <summary>
            Contains all information before a players blink near SCP-173.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.#ctor(Exiled.API.Features.Player,System.Collections.Generic.List{Exiled.API.Features.Player},UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.Player" />
            </param>
            <param name="targets">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.Targets" />
            </param>
            <param name="blinkPos">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.BlinkPosition" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.BlinkPosition">
            <summary>
            Gets or sets the location the player is blinking to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.BlinkCooldown">
            <summary>
            Gets or sets how long the blink cooldown will last.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.Targets">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of players who have triggered SCP-173.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player is allowed to blink.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.Player">
            <summary>
            Gets the player who controlling SCP-173.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs.Scp173">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs">
            <summary>
            Contains all information before server handle SCP-173 blink network message.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs.#ctor(Exiled.API.Features.Player,System.Collections.Generic.HashSet{Exiled.API.Features.Player})">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs.Player" />
            </param>
            <param name="targets">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs.Targets" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs.Targets">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> of players who have triggered SCP-173.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player is allowed to blink.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs.Player">
            <summary>
            Gets the player who controlling SCP-173.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs.Scp173">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs">
            <summary>
            Contains all information before the tantrum is placed.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.#ctor(Exiled.API.Features.Player,Hazards.TantrumEnvironmentalHazard,PlayerRoles.Subroutines.AbilityCooldown,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.Player" />
            </param>
            <param name="tantrumHazard">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.TantrumHazard" />
            </param>
            <param name="cooldown">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.Cooldown" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.Scp173">
            <summary>
            Gets the player's <see cref="T:Exiled.API.Features.Roles.Scp173Role" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.TantrumHazard">
            <summary>
            Gets the <see cref="T:Hazards.TantrumEnvironmentalHazard" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.Cooldown">
            <summary>
            Gets the tantrum <see cref="T:PlayerRoles.Subroutines.AbilityCooldown"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the tantrum can be placed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs.Player">
            <summary>
            Gets the player who's placing the tantrum.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs">
            <summary>
            Contains all information before an Scp-173 uses breakneck speeds.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can use breakneck speeds.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs.Player">
            <summary>
            Gets the player who's using breakneck speeds.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs.Scp173">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs">
            <summary>
            Contains all information before damage is dealt to a <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup" />.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs.#ctor(InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup,System.Single,PlayerStatsSystem.DamageHandlerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs" /> class.
            </summary>
            <param name="scp244">
            <inheritdoc cref="N:Exiled.Events.EventArgs.Scp244" />
            </param>
            <param name="damage">The damage being dealt.</param>
            <param name="handler">
            <inheritdoc cref="T:Exiled.API.Features.DamageHandlers.DamageHandler" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs.Pickup">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Pickups.Scp244Pickup"/> object that is damaged.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs.Handler">
            <summary>
            Gets the Damage handler for this event.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Exiled.API.Features.Pickups.Scp244Pickup"/> can be broken.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp244.OpeningScp244EventArgs">
            <summary>
            Contains all information before a player opens SCP-244.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp244.OpeningScp244EventArgs.#ctor(InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp244.OpeningScp244EventArgs" /> class.
            </summary>
            <param name="pickup">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp244.OpeningScp244EventArgs.Pickup" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp244.OpeningScp244EventArgs.Pickup">
            <summary>
            Gets a value representing the <see cref="T:Exiled.API.Features.Pickups.Scp244Pickup"/> being opened.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp244.OpeningScp244EventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can open SCP-244.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs">
            <summary>
            Contains all information before SCP-244 is used.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs.#ctor(InventorySystem.Items.Usables.Scp244.Scp244Item,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs" /> class.
            </summary>
            <param name="scp244">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs.Scp244" />
            </param>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs.Scp244">
            <summary>
            Gets the Scp244 instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the SCP-244 can be used.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs.Player">
            <summary>
            Gets the player who's using the SCP-244.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs">
            <summary>
            Contains all information before SCP-2536 chooses target for spawning.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs.#ctor(Exiled.API.Features.Player,Christmas.Scp2536.Scp2536Spawnpoint,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs.Player"/></param>
            <param name="spawnpoint"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs.Spawnpoint"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs.Player">
            <summary>
            Gets the player near whom SCP-2536 will spawn.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs.Spawnpoint">
            <summary>
            Gets or sets the spawn point where SCP will spawn.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs">
            <summary>
            Contains all information before player receives a gift from SCP-2536.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs.#ctor(Exiled.API.Features.Player,Christmas.Scp2536.Scp2536GiftBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs.Player"/></param>
            <param name="gift"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs.Gift"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs.Gift">
            <summary>
            Gets or sets a gift that will be granted to a <see cref="P:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs.Player"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs">
            <summary>
            Contains all information after SCP-3114 disguised.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Ragdoll)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs.Player" />
            </param>
            <param name="ragdoll">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs.Ragdoll" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs.Scp3114">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs.Ragdoll">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs">
            <summary>
            Contains all information before SCP-3114 disguises to a new role.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Ragdoll,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs.Player" />
            </param>
            <param name="ragdoll">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs.Ragdoll" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs.Scp3114">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs.Ragdoll">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs">
            <summary>
            Contains all information after SCP-3114 reveals.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs.Player" />
            </param>
            <param name="isManualReveal">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs.IsManualReveal" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs.Scp3114">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs.IsManualReveal">
            <summary>
            Gets a value indicating whether the reveal is manual or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs">
            <summary>
            Contains all information before SCP-3114 reveals.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs.Player" />
            </param>
            <param name="isManualReveal">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs.IsManualReveal" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs.Scp3114">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs.IsManualReveal">
            <summary>
            Gets a value indicating whether the reveal is manual or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs">
            <summary>
            Contains all information before SCP-3114 tries to use a body.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Ragdoll,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs.Player" />
            </param>
            <param name="ragdoll">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs.Ragdoll" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs.Ragdoll">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs.Scp3114">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs">
            <summary>
            Contains all information prior to sending voiceline SCP-3114.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs.#ctor(ReferenceHub,PlayerRoles.PlayableScps.Scp3114.Scp3114VoiceLines.VoiceLinesDefinition,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs.Player" />
            </param>
            <param name="voiceLine">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs.VoiceLine" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs.Scp3114">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs.VoiceLine">
            <summary>
            Gets or sets the <see cref="T:PlayerRoles.PlayableScps.Scp3114.Scp3114VoiceLines.VoiceLinesDefinition" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs">
            <summary>
            Contains all information before a player drops a SCP-330 candy.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.Scp330.Scp330Bag,InventorySystem.Items.Usables.Scp330.CandyKindID)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs.Player" />
            </param>
            <param name="scp330">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs.Scp330" />
            </param>
            <param name="candy">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs.Candy" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs.Scp330">
            <summary>
            Gets or sets a value representing the <see cref="T:Exiled.API.Features.Items.Item" /> being picked up.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs.Candy">
            <summary>
            Gets or sets a value indicating whether or not the type of candy drop.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can interact with SCP-330.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs.Player">
            <summary>
            Gets the player who's interacting with SCP-330.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs">
            <summary>
            Contains all information after a player has eaten SCP-330.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.Scp330.ICandy)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs" /> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs.Player" />.</param>
            <param name="candy"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs.Candy" />.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs.Candy">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp330.ICandy" /> that was eaten by the player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs.Player">
            <summary>
            Gets the player who has eaten SCP-330.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs">
            <summary>
            Contains all information before a player eats SCP-330.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.Usables.Scp330.ICandy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs" /> class.
            </summary>
            <param name="player"><see cref="P:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs.Player" />.</param>
            <param name="candy"><see cref="T:InventorySystem.Items.Usables.Scp330.ICandy" />.</param>
            <param name="isAllowed"><see cref="P:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs.IsAllowed" />.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs.Candy">
            <summary>
            Gets the <see cref="T:InventorySystem.Items.Usables.Scp330.ICandy" /> that is being eaten by the player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the player can eat SCP-330.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs.Player">
            <summary>
            Gets the player who's eating SCP-330.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs">
            <summary>
            Contains all information before a player interacts with SCP-330.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs.#ctor(Exiled.API.Features.Player,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs.Player" />
            </param>
            <param name="usage">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs.UsageCount" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs.UsageCount">
            <summary>
            Gets a value indicating how many times this player has interacted with SCP-330.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs.Candy">
            <summary>
            Gets or sets a value indicating the type of candy that will be received from this interaction.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs.ShouldSever">
            <summary>
            Gets or sets a value indicating whether the player's hands should get severed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the player is allowed to interact with SCP-330.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs.Player">
            <summary>
            Gets the <see cref="T:Exiled.API.Features.Player" /> triggering the event.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs">
            <summary>
            Contains all information before a player interacts with SCP-559.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs.#ctor(Exiled.API.Features.Scp559,Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs"/> class.
            </summary>
            <param name="scp559"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs.Scp559"/></param>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs.Player"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs.Scp559">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs.Player">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp559.SpawningEventArgs">
            <summary>
            Contains all information before SCP-559 spawns.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.#ctor(Exiled.API.Features.Scp559,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp559.SpawningEventArgs"/> class.
            </summary>
            <param name="scp559"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.Scp559"/></param>
            <param name="oldPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.PreviousPosition"/></param>
            <param name="newPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.NextPosition"/></param>
            <param name="isAllowed"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.IsAllowed"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.Scp559">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.NextPosition">
            <summary>
            Gets or sets the next spawn position.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp559.SpawningEventArgs.PreviousPosition">
            <summary>
            Gets the previous spawn position.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp914.ActivatingEventArgs">
            <summary>
            Contains all information before a player activates SCP-914.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp914.ActivatingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp914.ActivatingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.ActivatingEventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.ActivatingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.ActivatingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-914 can be activated.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.ActivatingEventArgs.Player">
            <summary>
            Gets the player who's activating SCP-914.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs">
            <summary>
            Contains all information before a player changes the SCP-914 knob setting.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs.#ctor(Exiled.API.Features.Player,Scp914.Scp914KnobSetting,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs.Player" />
            </param>
            <param name="knobSetting">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs.KnobSetting" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs.KnobSetting">
            <summary>
            Gets or sets the SCP-914 knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-914's knob setting can be changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs.Player">
            <summary>
            Gets the player who's changing the SCP-914 knob setting.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs">
            <summary>
            Contains all information before SCP-914 upgrades an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.#ctor(Exiled.API.Features.Player,InventorySystem.Items.ItemBase,Scp914.Scp914KnobSetting,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.Player" />
            </param>
            <param name="item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.Item" />
            </param>
            <param name="knobSetting">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.KnobSetting" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.Scp914">
            <summary>
            Gets the <see cref="T:Scp914.Scp914Controller" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.KnobSetting">
            <summary>
            Gets or sets SCP-914 working knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the upgrade is successful.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.Item">
            <summary>
            Gets a list of items to be upgraded inside SCP-914.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.Player">
            <summary>
            Gets the <see cref="P:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs.Player" /> who owns the item to be upgraded.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs">
            <summary>
            Contains all information before SCP-914 upgrades an item.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.#ctor(InventorySystem.Items.Pickups.ItemPickupBase,UnityEngine.Vector3,Scp914.Scp914KnobSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs" /> class.
            </summary>
            <param name="item">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.Pickup" />
            </param>
            <param name="newPos">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.OutputPosition" />
            </param>
            <param name="knobSetting">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.KnobSetting" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.Pickup">
            <summary>
            Gets a list of items to be upgraded inside SCP-914.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.Scp914">
            <summary>
            Gets the <see cref="T:Scp914.Scp914Controller" /> instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.OutputPosition">
            <summary>
            Gets or sets the position the item will be output to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.KnobSetting">
            <summary>
            Gets or sets SCP-914 working knob setting.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the upgrade is successful.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs">
            <summary>
            Contains all information before SCP-914 upgrades a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean,Scp914.Scp914KnobSetting,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs" /> class.
            </summary>
            <param name="player">The <see cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.Player" /> being upgraded.</param>
            <param name="heldOnly">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.HeldOnly" />
            </param>
            <param name="setting">The <see cref="T:Scp914.Scp914KnobSetting" /> being used.</param>
            <param name="upgradeItems">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.UpgradeItems" />
            </param>
            <param name="moveVector">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.OutputPosition" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.OutputPosition">
            <summary>
            Gets or sets the location the player will be teleported to.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.UpgradeItems">
            <summary>
            Gets or sets a value indicating whether or not items will be upgraded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.HeldOnly">
            <summary>
            Gets or sets a value indicating whether or not only held items are upgraded.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.KnobSetting">
            <summary>
            Gets or sets the <see cref="T:Scp914.Scp914KnobSetting" /> being used.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the event can continue.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs.Player">
            <summary>
            Gets the player that is being upgraded.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs">
            <summary>
            Contains all information before SCP-939 changes its target focus.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs.#ctor(ReferenceHub,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs.Player" />
            </param>
            <param name="state">
            The state of the focus.
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-939 can focus.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs.State">
            <summary>
            Gets a value indicating whether or not SCP-939 is currently focusing or un-focusing.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs.Scp939">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp939.ClawedEventArgs">
            <summary>
            Contains all information after SCP-939 attacks.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp939.ClawedEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp939.ClawedEventArgs"/> class.
            </summary>
            <param name="player"><inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.ClawedEventArgs.Player"/></param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ClawedEventArgs.Player">
            <summary>
            Gets the SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ClawedEventArgs.Scp939">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp939.LungingEventArgs">
            <summary>
            Contains all information before SCP-939 uses its lunge ability.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp939.LungingEventArgs.#ctor(Exiled.API.Features.Player)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp939.LungingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.LungingEventArgs.Player" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.LungingEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.LungingEventArgs.Scp939">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs">
            <summary>
            Contains all information before SCP-939 uses its amnestic cloud ability.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.Player" />
            </param>
            <param name="state">
            Whether or not SCP-939 is attempting to place an amnestic cloud.
            </param>
            <param name="isReady">
            Whether or not the cooldown is ready.
            </param>
            <param name="cooldown">
            SCP-939's amnestic cloud cooldown.
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-939 can place an amnestic cloud.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.State">
            <summary>
            Gets a value indicating whether or not SCP-939 is ready to place its amnestic cloud.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.IsReady">
            <summary>
            Gets or sets a value indicating whether or not SCP-939's amnestic cloud cooldown is ready.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.Cooldown">
            <summary>
            Gets or sets a value indicating SCP-939's amnestic cloud cooldown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs.Scp939">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs">
            <summary>
            Contains all information before SCP-939 plays a sound effect.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.#ctor(Exiled.API.Features.Player,PlayerRoles.PlayableScps.Scp939.Mimicry.EnvMimicrySequence,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.Player" />
            </param>
            <param name="sound">
            The sound that is being played.
            </param>
            <param name="isReady">
            Whether or not SCP-939's environmental mimicry cooldown is ready.
            </param>
            <param name="cooldown">
            The cooldown of the environmental mimicry.
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-939 can play the sound.
            </summary>
            <remarks>This will default to <see langword="false"/> if <see cref="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.IsReady"/> is <see langword="false"/>. In this case, setting it to <see langword="true"/> will override the cooldown.</remarks>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.Sound">
            <summary>
            Gets the sound being played.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.IsReady">
            <summary>
            Gets a value indicating whether or not SCP-939's environmental mimicry cooldown is ready.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.Cooldown">
            <summary>
            Gets or sets a value indicating SCP-939's environmental mimicry cooldown.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs.Scp939">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs">
            <summary>
            Contains all information before SCP-939 plays a stolen player's voice.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs.#ctor(ReferenceHub,ReferenceHub)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs.Player" />
            </param>
            <param name="stolen">
            The player who's voice was stolen.
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-939 can play the stolen voice.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs.Stolen">
            <summary>
            Gets the players who's voice was stolen.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs.Scp939">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs">
            <summary>
            Contains all information before SCP-939 plays a stolen player's voice.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs.Player" />
            </param>
            <param name="stolen">
            The player who's voice was stolen.
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not SCP-939 can play the stolen voice.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs.Stolen">
            <summary>
            Gets the players who's voice was stolen.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs.Player">
            <summary>
            Gets the player who's controlling SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs.Scp939">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs">
            <summary>
                Contains all information before SCP-939 sees the player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs.#ctor(ReferenceHub,ReferenceHub,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs" /> class.
            </summary>
            <param name="player">
                <inheritdoc cref="P:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs.Player" />
            </param>
            <param name="target">
                The target being shown to SCP-939.
            </param>
            <param name="isAllowed">
                Whether or not SCP-939 is allowed to view the player.
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs.Target">
            <summary>
                Gets the player who's being shown to SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs.Player">
            <summary>
                Gets the player who's controlling SCP-939.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs.Scp939">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs.IsAllowed">
            <summary>
               Gets or sets a value indicating whether visibility can be validated.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Server.AddingUnitNameEventArgs">
            <summary>
            Contains all information before adding a new unit name.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Server.AddingUnitNameEventArgs.#ctor(Respawning.NamingRules.UnitNamingRule,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Server.AddingUnitNameEventArgs"/> class.
            </summary>
            <param name="unitNamingRule">The generated unit name.</param>
            <param name="isAllowed">The value indicating whether or not the unit name can be added.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.AddingUnitNameEventArgs.UnitNamingRule">
            <summary>
            Gets the generated <see cref="P:Exiled.Events.EventArgs.Server.AddingUnitNameEventArgs.UnitNamingRule"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.AddingUnitNameEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the unit name can be added.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs">
            <summary>
            Contains all information before a spectator changes the spectated player.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs" /> class.
            </summary>
            <param name="teamRespawnQueue">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs.TeamRespawnQueue" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs.TeamRespawnQueue">
            <summary>
            Gets the TeamRespawnQueue.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can continue.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs.GetTeamRespawnQueue">
            <summary>
            Gets the TeamRespawnQueue in a string value.
            </summary>
            <returns>The actual modified TeamRespawnQueue.</returns>
        </member>
        <member name="T:Exiled.Events.EventArgs.Server.EndingRoundEventArgs">
            <summary>
            Contains all information before ending a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.#ctor(RoundSummary.LeadingTeam,RoundSummary.SumInfo_ClassList,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Server.EndingRoundEventArgs" /> class.
            </summary>
            <param name="classList">
            <inheritdoc cref="T:RoundSummary.SumInfo_ClassList" />
            </param>
            <param name="leadingTeam">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.LeadingTeam" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.IsRoundEnded" />
            </param>
            <param name="isForceEnded">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.IsForceEnded" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.ClassList">
            <summary>
            Gets or sets the round summary class list.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.LeadingTeam">
            <summary>
            Gets or sets the leading team.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.IsRoundEnded">
            <summary>
            Gets or sets a value indicating whether the round is going to finish or not.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.IsForceEnded">
            <summary>
            Gets or Sets a value indicating whether the round is ended by API call.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.EndingRoundEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether the event can be executed or not.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs">
            <summary>
            Contains all information before reporting a cheater.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.#ctor(Exiled.API.Features.Player,Exiled.API.Features.Player,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs" /> class.
            </summary>
            <param name="issuer">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.Player" />
            </param>
            <param name="target">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.Target" />
            </param>
            <param name="serverPort">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.ServerPort" />
            </param>
            <param name="reason">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.Reason" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.Target">
            <summary>
            Gets the targeted player.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.ServerPort">
            <summary>
            Gets the server id.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.Reason">
            <summary>
            Gets or sets the report reason.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the report will be sent.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs.Player">
            <summary>
            Gets the issuing player.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs">
            <summary>
            Contains all information before spawning a wave of <see cref="F:Respawning.SpawnableTeamType.NineTailedFox" /> or
            <see cref="F:Respawning.SpawnableTeamType.ChaosInsurgency" />.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.#ctor(System.Collections.Generic.List{Exiled.API.Features.Player},System.Int32,Respawning.SpawnableTeamType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs" /> class.
            </summary>
            <param name="players">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.Players" />
            </param>
            <param name="maxRespawn">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.MaximumRespawnAmount" />
            </param>
            <param name="nextKnownTeam">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.NextKnownTeam" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.Players">
            <summary>
            Gets the list of players that are going to be respawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.MaximumRespawnAmount">
            <summary>
            Gets or sets the maximum amount of respawnable players.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.NextKnownTeam">
            <summary>
            Gets or sets a value indicating what the next respawnable team is.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.SpawnableTeam">
            <summary>
            Gets the current spawnable team.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the spawn can occur.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs.SpawnQueue">
            <summary>
            Gets or sets the RoleTypeId spawn queue.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Server.RoundEndedEventArgs">
            <summary>
            Contains all information after the end of a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Server.RoundEndedEventArgs.#ctor(Exiled.API.Enums.LeadingTeam,RoundSummary.SumInfo_ClassList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Server.RoundEndedEventArgs" /> class.
            </summary>
            <param name="leadingTeam">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.RoundEndedEventArgs.LeadingTeam" />
            </param>
            <param name="classList">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.RoundEndedEventArgs.ClassList" />
            </param>
            <param name="timeToRestart">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Server.RoundEndedEventArgs.TimeToRestart" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RoundEndedEventArgs.LeadingTeam">
            <summary>
            Gets the leading team.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RoundEndedEventArgs.ClassList">
            <summary>
            Gets or sets the round summary class list.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.RoundEndedEventArgs.TimeToRestart">
            <summary>
            Gets or sets the time to restart the next round.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Server.SelectingRespawnTeamEventArgs">
            <summary>
            Contains all information before selecting the team to respawn next.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Server.SelectingRespawnTeamEventArgs.#ctor(Respawning.SpawnableTeamType)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Server.SelectingRespawnTeamEventArgs"/> class.
            </summary>
            <param name="type">The <see cref="T:Respawning.SpawnableTeamType"/> used as the starting value for this event.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Server.SelectingRespawnTeamEventArgs.Team">
            <summary>
            Gets or sets <see cref="T:Respawning.SpawnableTeamType"/> that represents the team chosen to spawn.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs">
            <summary>
            Contains all information before a player changes the warhead lever status.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs.Player" />
            </param>
            <param name="curState">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs.CurrentState" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs.CurrentState">
            <summary>
            Gets a value indicating whether the lever is enabled.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the lever status will change.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs.Player">
            <summary>
            Gets the player who's changing the warhead status.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Warhead.DetonatingEventArgs">
            <summary>
            Contains all information before detonating the warhead.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Warhead.DetonatingEventArgs.IsAllowed">
            <inheritdoc/>
        </member>
        <member name="T:Exiled.Events.EventArgs.Warhead.StartingEventArgs">
            <summary>
            Contains all information before starting the warhead.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Warhead.StartingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Warhead.StartingEventArgs" /> class.
            </summary>
            <param name="player">The player who's going to start the warhead.</param>
            <param name="isAuto">Indicating whether or not the nuke was set off automatically.</param>
            <param name="isAllowed">Indicating whether the event can be executed or not.</param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Warhead.StartingEventArgs.IsAuto">
            <summary>
            Gets or sets a value indicating whether or not the nuke was set off automatically.
            </summary>
        </member>
        <member name="T:Exiled.Events.EventArgs.Warhead.StoppingEventArgs">
            <summary>
            Contains all information before stopping the warhead.
            </summary>
        </member>
        <member name="M:Exiled.Events.EventArgs.Warhead.StoppingEventArgs.#ctor(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.EventArgs.Warhead.StoppingEventArgs" /> class.
            </summary>
            <param name="player">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Warhead.StoppingEventArgs.Player" />
            </param>
            <param name="isAllowed">
            <inheritdoc cref="P:Exiled.Events.EventArgs.Warhead.StoppingEventArgs.IsAllowed" />
            </param>
        </member>
        <member name="P:Exiled.Events.EventArgs.Warhead.StoppingEventArgs.IsAllowed">
            <summary>
            Gets or sets a value indicating whether or not the warhead can be stopped.
            </summary>
        </member>
        <member name="P:Exiled.Events.EventArgs.Warhead.StoppingEventArgs.Player">
            <summary>
            Gets the player who's going to stop the warhead.
            </summary>
        </member>
        <member name="T:Exiled.Events.Events">
            <summary>
            Patch and unpatch events into the game.
            </summary>
        </member>
        <member name="P:Exiled.Events.Events.Instance">
            <summary>
            Gets the plugin instance.
            </summary>
        </member>
        <member name="P:Exiled.Events.Events.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Exiled.Events.Events.Patcher">
            <summary>
            Gets the <see cref="T:Exiled.Events.Features.Patcher"/> used to employ all patches.
            </summary>
        </member>
        <member name="M:Exiled.Events.Events.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Events.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="M:Exiled.Events.Events.Patch">
            <summary>
            Patches all events.
            </summary>
        </member>
        <member name="M:Exiled.Events.Events.Unpatch">
            <summary>
            Unpatches all events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Features.CustomEventHandler">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate, with empty parameters.
            </summary>
        </member>
        <member name="T:Exiled.Events.Features.CustomAsyncEventHandler">
            <summary>
            THe custom <see cref="T:System.EventHandler"/> delegate, with empty parameters. Holds async events with <see cref="N:MEC"/>.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/> of <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="T:Exiled.Events.Features.Event">
            <summary>
            An implementation of <see cref="T:Exiled.Events.EventArgs.Interfaces.IExiledEvent"/> that encapsulates a no-argument event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Features.Event.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Features.Event"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Features.Event.List">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:Exiled.Events.Features.Event`1"/> which contains all the <see cref="T:Exiled.Events.Features.Event`1"/> instances.
            </summary>
        </member>
        <member name="M:Exiled.Events.Features.Event.op_Addition(Exiled.Events.Features.Event,Exiled.Events.Features.CustomEventHandler)">
            <summary>
            Subscribes a <see cref="T:Exiled.Events.Features.CustomEventHandler"/> to the inner event, and checks patches if dynamic patching is enabled.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.Features.Event"/> to subscribe the <see cref="T:Exiled.Events.Features.CustomEventHandler"/> to.</param>
            <param name="handler">The <see cref="T:Exiled.Events.Features.CustomEventHandler"/> to subscribe to the <see cref="T:Exiled.Events.Features.Event"/>.</param>
            <returns>The <see cref="T:Exiled.Events.Features.Event"/> with the handler added to it.</returns>
        </member>
        <member name="M:Exiled.Events.Features.Event.op_Addition(Exiled.Events.Features.Event,Exiled.Events.Features.CustomAsyncEventHandler)">
            <summary>
            Subscribes a <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> to the inner event, and checks patches if dynamic patching is enabled.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.Features.Event"/> to subscribe the <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> to.</param>
            <param name="asyncEventHandler">The <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> to subscribe to the <see cref="T:Exiled.Events.Features.Event"/>.</param>
            <returns>The <see cref="T:Exiled.Events.Features.Event"/> with the handler added to it.</returns>
        </member>
        <member name="M:Exiled.Events.Features.Event.op_Subtraction(Exiled.Events.Features.Event,Exiled.Events.Features.CustomEventHandler)">
            <summary>
            Unsubscribes a target <see cref="T:Exiled.Events.Features.CustomEventHandler"/> from the inner event, and checks if unpatching is possible, if dynamic patching is enabled.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.Features.Event"/> the <see cref="T:Exiled.Events.Features.CustomEventHandler"/> will be unsubscribed from.</param>
            <param name="handler">The <see cref="T:Exiled.Events.Features.CustomEventHandler"/> that will be unsubscribed from the <see cref="T:Exiled.Events.Features.Event"/>.</param>
            <returns>The <see cref="T:Exiled.Events.Features.Event"/> with the handler unsubscribed from it.</returns>
        </member>
        <member name="M:Exiled.Events.Features.Event.op_Subtraction(Exiled.Events.Features.Event,Exiled.Events.Features.CustomAsyncEventHandler)">
            <summary>
            Unsubscribes a target <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> from the inner event, and checks if unpatching is possible, if dynamic patching is enabled.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.Features.Event"/> the <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> will be unsubscribed from.</param>
            <param name="asyncEventHandler">The <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> that will be unsubscribed from the <see cref="T:Exiled.Events.Features.Event"/>.</param>
            <returns>The <see cref="T:Exiled.Events.Features.Event"/> with the handler unsubscribed from it.</returns>
        </member>
        <member name="M:Exiled.Events.Features.Event.Subscribe(Exiled.Events.Features.CustomEventHandler)">
            <summary>
            Subscribes a target <see cref="T:Exiled.Events.Features.CustomEventHandler"/> to the inner event if the conditional is true.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Exiled.Events.Features.Event.Subscribe(Exiled.Events.Features.CustomAsyncEventHandler)">
            <summary>
            Subscribes a target <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> to the inner event if the conditional is true.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Exiled.Events.Features.Event.Unsubscribe(Exiled.Events.Features.CustomEventHandler)">
            <summary>
            Unsubscribes a target <see cref="T:Exiled.Events.Features.CustomEventHandler"/> from the inner event if the conditional is true.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Exiled.Events.Features.Event.Unsubscribe(Exiled.Events.Features.CustomAsyncEventHandler)">
            <summary>
            Unsubscribes a target <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> from the inner event if the conditional is true.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Exiled.Events.Features.Event.InvokeSafely">
            <summary>
            Executes all <see cref="T:Exiled.Events.Features.CustomEventHandler"/> listeners safely.
            </summary>
        </member>
        <member name="M:Exiled.Events.Features.Event.InvokeNormal">
            <inheritdoc cref="M:Exiled.Events.Features.Event.InvokeSafely"/>
        </member>
        <member name="M:Exiled.Events.Features.Event.InvokeAsync">
            <inheritdoc cref="M:Exiled.Events.Features.Event.InvokeSafely"/>
        </member>
        <member name="T:Exiled.Events.Features.CustomEventHandler`1">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate.
            </summary>
            <typeparam name="TEventArgs">The <see cref="T:System.EventHandler`1"/> type.</typeparam>
            <param name="ev">The <see cref="T:System.EventHandler`1"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Features.CustomAsyncEventHandler`1">
            <summary>
            The custom <see cref="T:System.EventHandler"/> delegate.
            </summary>
            <typeparam name="TEventArgs">The <see cref="T:System.EventHandler`1"/> type.</typeparam>
            <param name="ev">The <see cref="T:System.EventHandler`1"/> instance.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/> of <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="T:Exiled.Events.Features.Event`1">
            <summary>
            An implementation of the <see cref="T:Exiled.Events.EventArgs.Interfaces.IExiledEvent"/> interface that encapsulates an event with arguments.
            </summary>
            <typeparam name="T">The specified <see cref="T:System.EventArgs"/> that the event will use.</typeparam>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Features.Event`1"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Features.Event`1.Dictionary">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> of <see cref="T:Exiled.Events.Features.Event`1"/> which contains all the <see cref="T:Exiled.Events.Features.Event`1"/> instances.
            </summary>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.op_Addition(Exiled.Events.Features.Event{`0},Exiled.Events.Features.CustomEventHandler{`0})">
            <summary>
            Subscribes a target <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> to the inner event and checks if patching is possible, if dynamic patching is enabled.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.Features.Event`1"/> the <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> will be subscribed to.</param>
            <param name="handler">The <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> that will be subscribed to the <see cref="T:Exiled.Events.Features.Event`1"/>.</param>
            <returns>The <see cref="T:Exiled.Events.Features.Event`1"/> with the handler subscribed to it.</returns>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.op_Addition(Exiled.Events.Features.Event{`0},Exiled.Events.Features.CustomAsyncEventHandler{`0})">
            <summary>
            Subscribes a <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler"/> to the inner event, and checks patches if dynamic patching is enabled.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.Features.Event`1"/> to subscribe the <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler`1"/> to.</param>
            <param name="asyncEventHandler">The <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler`1"/> to subscribe to the <see cref="T:Exiled.Events.Features.Event`1"/>.</param>
            <returns>The <see cref="T:Exiled.Events.Features.Event`1"/> with the handler added to it.</returns>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.op_Subtraction(Exiled.Events.Features.Event{`0},Exiled.Events.Features.CustomEventHandler{`0})">
            <summary>
            Unsubscribes a target <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> from the inner event and checks if unpatching is possible, if dynamic patching is enabled.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.Features.Event`1"/> the <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> will be unsubscribed from.</param>
            <param name="handler">The <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> that will be unsubscribed from the <see cref="T:Exiled.Events.Features.Event`1"/>.</param>
            <returns>The <see cref="T:Exiled.Events.Features.Event`1"/> with the handler unsubscribed from it.</returns>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.op_Subtraction(Exiled.Events.Features.Event{`0},Exiled.Events.Features.CustomAsyncEventHandler{`0})">
            <summary>
            Unsubscribes a target <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler`1"/> from the inner event, and checks if unpatching is possible, if dynamic patching is enabled.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.Features.Event"/> the <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler`1"/> will be unsubscribed from.</param>
            <param name="asyncEventHandler">The <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler`1"/> that will be unsubscribed from the <see cref="T:Exiled.Events.Features.Event`1"/>.</param>
            <returns>The <see cref="T:Exiled.Events.Features.Event`1"/> with the handler unsubscribed from it.</returns>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.Subscribe(Exiled.Events.Features.CustomEventHandler{`0})">
            <summary>
            Subscribes a target <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> to the inner event if the conditional is true.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.Subscribe(Exiled.Events.Features.CustomAsyncEventHandler{`0})">
            <summary>
            Subscribes a target <see cref="T:Exiled.Events.Features.CustomAsyncEventHandler`1"/> to the inner event if the conditional is true.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.Unsubscribe(Exiled.Events.Features.CustomEventHandler{`0})">
            <summary>
            Unsubscribes a target <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> from the inner event if the conditional is true.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.Unsubscribe(Exiled.Events.Features.CustomAsyncEventHandler{`0})">
            <summary>
            Unsubscribes a target <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> from the inner event if the conditional is true.
            </summary>
            <param name="handler">The handler to add.</param>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.InvokeSafely(`0)">
            <summary>
            Executes all <see cref="T:Exiled.Events.Features.CustomEventHandler`1"/> listeners safely.
            </summary>
            <param name="arg">The event argument.</param>
            <exception cref="T:System.ArgumentNullException">Event or its arg is <see langword="null"/>.</exception>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.InvokeNormal(`0)">
            <inheritdoc cref="M:Exiled.Events.Features.Event`1.InvokeSafely(`0)"/>
        </member>
        <member name="M:Exiled.Events.Features.Event`1.InvokeAsync(`0)">
            <inheritdoc cref="M:Exiled.Events.Features.Event`1.InvokeSafely(`0)"/>
        </member>
        <member name="T:Exiled.Events.Features.Patcher">
            <summary>
            A tool for patching.
            </summary>
        </member>
        <member name="F:Exiled.Events.Features.Patcher.patchesCounter">
            <summary>
            The below variable is used to increment the name of the harmony instance, otherwise harmony will not work upon a plugin reload.
            </summary>
        </member>
        <member name="M:Exiled.Events.Features.Patcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Exiled.Events.Features.Patcher"/> class.
            </summary>
        </member>
        <member name="P:Exiled.Events.Features.Patcher.UnpatchedTypes">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.HashSet`1"/> that contains all patch types that haven't been patched.
            </summary>
        </member>
        <member name="P:Exiled.Events.Features.Patcher.DisabledPatchesHashSet">
            <summary>
            Gets a set of types and methods for which EXILED patches should not be run.
            </summary>
        </member>
        <member name="P:Exiled.Events.Features.Patcher.Harmony">
            <summary>
            Gets the <see cref="T:HarmonyLib.Harmony"/> instance.
            </summary>
        </member>
        <member name="M:Exiled.Events.Features.Patcher.Patch(Exiled.Events.EventArgs.Interfaces.IExiledEvent)">
            <summary>
            Patches all events that target a specific <see cref="T:Exiled.Events.EventArgs.Interfaces.IExiledEvent"/>.
            </summary>
            <param name="event">The <see cref="T:Exiled.Events.EventArgs.Interfaces.IExiledEvent"/> all matching patches should target.</param>
        </member>
        <member name="M:Exiled.Events.Features.Patcher.PatchAll(System.Boolean,System.Int32@)">
            <summary>
            Patches all events.
            </summary>
            <param name="includeEvents">Whether to patch events as well as all required patches.</param>
            <param name="failedPatch">the number of failed patch returned.</param>
        </member>
        <member name="M:Exiled.Events.Features.Patcher.ReloadDisabledPatches">
            <summary>
            Checks the <see cref="P:Exiled.Events.Features.Patcher.DisabledPatchesHashSet"/> list and un-patches any methods that have been defined there. Once un-patching has been done, they can be patched by plugins, but will not be re-patchable by Exiled until a server reboot.
            </summary>
        </member>
        <member name="M:Exiled.Events.Features.Patcher.UnpatchAll">
            <summary>
            Unpatches all events.
            </summary>
        </member>
        <member name="M:Exiled.Events.Features.Patcher.GetAllPatchTypes">
            <summary>
            Gets all types that have a <see cref="T:HarmonyLib.HarmonyPatch"/> attributed to them.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1"/> of all patch types.</returns>
        </member>
        <member name="T:Exiled.Events.Handlers.Cassie">
            <summary>
            Cassie related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Cassie.SendingCassieMessage">
            <summary>
            Invoked before sending a cassie message.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Cassie.OnSendingCassieMessage(Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs)">
            <summary>
            Called before sending a cassie message.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Cassie.SendingCassieMessageEventArgs" /> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.ExplodingGrenade">
            <summary>
            Handles <see cref="P:Exiled.Events.Handlers.Map.ChangedIntoGrenade"/> event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.ExplodingGrenade.OnChangedIntoGrenade(Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Map.OnChangedIntoGrenade(Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs)" />
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.MapGenerated">
            <summary>
            Handles <see cref="P:Exiled.Events.Handlers.Map.Generated"/> event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.MapGenerated.OnMapGenerated">
            <summary>
            Called once the map is generated.
            </summary>
            <remarks>
            This fixes an issue where
            all those extensions that
            require calling the central
            property of the Map class in
            the API were corrupted due to
            a missed call, such as before
            getting the elevator type.
            </remarks>
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.PickupEvent">
            <summary>
            Handles adding and removing from <see cref="F:Exiled.API.Features.Pickups.Pickup.BaseToPickup"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.PickupEvent.OnSpawnedPickup(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Called after a pickup is spawned. Hooked to <see cref="E:InventorySystem.Items.Pickups.ItemPickupBase.OnPickupAdded"/>.
            </summary>
            <param name="itemPickupBase">The spawned Pickup.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.PickupEvent.OnRemovedPickup(InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Called before a pickup is destroyed. Hooked to <see cref="E:InventorySystem.Items.Pickups.ItemPickupBase.OnPickupDestroyed"/>.
            </summary>
            <param name="itemPickupBase">The destroyed Pickup.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.RagdollList">
            <summary>
            Handles adding and removing from <see cref="F:Exiled.API.Features.Ragdoll.BasicRagdollToRagdoll"/>.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.RagdollList.OnSpawnedRagdoll(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Called after a ragdoll is spawned. Hooked to <see cref="E:PlayerRoles.Ragdolls.RagdollManager.OnRagdollSpawned"/>.
            </summary>
            <param name="ragdoll">The spawned ragdoll.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.RagdollList.OnRemovedRagdoll(PlayerRoles.Ragdolls.BasicRagdoll)">
            <summary>
            Called before a ragdoll is destroyed. Hooked to <see cref="E:PlayerRoles.Ragdolls.RagdollManager.OnRagdollRemoved"/>.
            </summary>
            <param name="ragdoll">The destroyed ragdoll.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.Round">
            <summary>
            Handles some round clean-up events and some others related to players.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnWaitingForPlayers">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnWaitingForPlayers" />
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnRestartingRound">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnRestartingRound" />
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnRoundStarted">
            <inheritdoc cref="M:Exiled.Events.Handlers.Server.OnRoundStarted" />
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnChangingRole(Exiled.Events.EventArgs.Player.ChangingRoleEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnChangingRole(Exiled.Events.EventArgs.Player.ChangingRoleEventArgs)" />
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnActivatingSense(Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Scp049.OnActivatingSense(Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs)" />
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.Round.OnVerified(Exiled.Events.EventArgs.Player.VerifiedEventArgs)">
            <inheritdoc cref="M:Exiled.Events.Handlers.Player.OnVerified(Exiled.Events.EventArgs.Player.VerifiedEventArgs)" />
        </member>
        <member name="T:Exiled.Events.Handlers.Internal.SceneUnloaded">
            <summary>
            Handles scene unload event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Internal.SceneUnloaded.OnSceneUnloaded(UnityEngine.SceneManagement.Scene)">
            <summary>
            Called once when the server changes the scene.
            </summary>
            <remarks>
            This fixes the main issue with ghost mode,
            when it spams with a NRE error.
            Before that, we were clearing the cache
            on WaitForPlayers event, but
            sometimes (ordinally on silent rount restart)
            the server accepts players' tokens before
            WaitForPlayers event is called.
            </remarks>
        </member>
        <member name="T:Exiled.Events.Handlers.Item">
            <summary>
            Item related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Item.ChangingAmmo">
            <summary>
            Invoked before the ammo of an firearm are changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Item.ChangingAttachments">
            <summary>
            Invoked before item attachments are changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Item.ReceivingPreference">
            <summary>
            Invoked before receiving a preference.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Item.KeycardInteracting">
            <summary>
            Invoked before a keycard interacts with a door.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Item.Swinging">
            <summary>
            Invoked before a melee item is swung.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Item.ChargingJailbird">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Items.Jailbird"/> is charged.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Item.UsingRadioPickupBattery">
            <summary>
            Invoked before a radio pickup is draining battery.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnChangingAmmo(Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs)">
            <summary>
            Called before the ammo of an firearm is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Item.ChangingAmmoEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnChangingAttachments(Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs)">
            <summary>
            Called before item attachments are changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Item.ChangingAttachmentsEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnReceivingPreference(Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs)">
            <summary>
            Called before receiving a preference.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Item.ReceivingPreferenceEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnKeycardInteracting(Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs)">
            <summary>
            Called before keycard interacts with a door.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Item.KeycardInteractingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnSwinging(Exiled.Events.EventArgs.Item.SwingingEventArgs)">
            <summary>
            Called before a melee item is swung.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Item.SwingingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnChargingJailbird(Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Items.Jailbird"/> is charged.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Item.ChargingJailbirdEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Item.OnUsingRadioPickupBattery(Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs)">
            <summary>
            Called before radio pickup is draining battery.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Item.UsingRadioPickupBatteryEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Map">
            <summary>
            Map related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.PlacingBulletHole">
            <summary>
            Invoked before placing bullet holes.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.PlacingBlood">
            <summary>
            Invoked before placing blood.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.AnnouncingDecontamination">
            <summary>
            Invoked before announcing the light containment zone decontamination.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.AnnouncingScpTermination">
            <summary>
            Invoked before announcing an SCP termination.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.AnnouncingNtfEntrance">
            <summary>
            Invoked before announcing the NTF entrance.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.GeneratorActivating">
            <summary>
            Invoked before a <see cref="T:MapGeneration.Distributors.Scp079Generator"/> has been activated.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.Decontaminating">
            <summary>
            Invoked before decontaminating the light containment zone.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.ExplodingGrenade">
            <summary>
            Invoked before a grenade explodes.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.SpawningItem">
            <summary>
            Invoked before an item is spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.FillingLocker">
            <summary>
            Invoked before an item is spawned in locker.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.Generated">
            <summary>
            Invoked after the map is generated.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.ChangingIntoGrenade">
            <summary>
            Invoked before the server changes a pickup into a grenade, when triggered by an explosion.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.ChangedIntoGrenade">
            <summary>
            Invoked after the server changes a pickup into a grenade, when triggered by an explosion.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.TurningOffLights">
            <summary>
            Invoked before turning off lights.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.PickupAdded">
            <summary>
            Invoked after an pickup is spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.PickupDestroyed">
            <summary>
            Invoked after an pickup is destroyed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Map.SpawningTeamVehicle">
            <summary>
            Invoked before a team vehicle is spawned.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnPlacingBulletHole(Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs)">
            <summary>
            Called before placing a decal.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.PlacingBulletHoleEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnPlacingBlood(Exiled.Events.EventArgs.Map.PlacingBloodEventArgs)">
            <summary>
            Called before placing bloods.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.PlacingBloodEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingDecontamination(Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs)">
            <summary>
            Called before announcing the light containment zone decontamination.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.AnnouncingDecontaminationEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingScpTermination(Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs)">
            <summary>
            Called before announcing an SCP termination.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.AnnouncingScpTerminationEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnAnnouncingNtfEntrance(Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs)">
            <summary>
            Called before announcing the NTF entrance.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.AnnouncingNtfEntranceEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnGeneratorActivating(Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs)">
            <summary>
            Called before a <see cref="T:MapGeneration.Distributors.Scp079Generator"/> has been activated.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.GeneratorActivatingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnDecontaminating(Exiled.Events.EventArgs.Map.DecontaminatingEventArgs)">
            <summary>
            Called before decontaminating the light containment zone.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.DecontaminatingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnExplodingGrenade(Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs)">
            <summary>
            Called before a grenade explodes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnSpawningItem(Exiled.Events.EventArgs.Map.SpawningItemEventArgs)">
            <summary>
            Called before an item is spawned.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.SpawningItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnFillingLocker(Exiled.Events.EventArgs.Map.FillingLockerEventArgs)">
            <summary>
            Called before an item is spawned in locker.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.SpawningItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnGenerated">
            <summary>
            Called after the map is generated.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnChangingIntoGrenade(Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs)">
            <summary>
            Called before the server changes a <see cref="T:Exiled.API.Features.Pickups.Pickup"/> into a live Grenade when hit by an explosion.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnChangedIntoGrenade(Exiled.Events.EventArgs.Map.ChangedIntoGrenadeEventArgs)">
            <summary>
            Called after the server changes a <see cref="T:Exiled.API.Features.Pickups.Pickup"/> into a live Grenade when hit by an explosion.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.ChangingIntoGrenadeEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnTurningOffLights(Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs)">
            <summary>
            Called before turning off lights.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.TurningOffLightsEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnPickupAdded(Exiled.Events.EventArgs.Map.PickupAddedEventArgs)">
            <summary>
            Called after an pickup is spawned.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.PickupAddedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnPickupDestroyed(Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs)">
            <summary>
            Called after an pickup is destroyed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.PickupDestroyedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Map.OnSpawningTeamVehicle(Exiled.Events.EventArgs.Map.SpawningTeamVehicleEventArgs)">
            <summary>
            Invoked before a team vehicle is spawned.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Map.SpawningTeamVehicleEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Player">
            <summary>
            Player related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.PreAuthenticating">
            <summary>
            Invoked before authenticating a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ReservedSlot">
            <summary>
            Invoked before reserved slot is finalized for a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Kicking">
            <summary>
            Invoked before kicking a <see cref="T:Exiled.API.Features.Player"/> from the server.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Kicked">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> has been kicked from the server.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Banning">
            <summary>
            Invoked before banning a <see cref="T:Exiled.API.Features.Player"/> from the server.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Banned">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> has been banned from the server.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.EarningAchievement">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> earns an achievement.
            </summary>
            <remarks>
            Will not fire for certain client-side achievements.
            </remarks>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.UsingItem">
            <summary>
            Invoked before using an <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.UsingItemCompleted">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> uses an <see cref="T:Exiled.API.Features.Items.Usable"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.UsedItem">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> uses an <see cref="T:Exiled.API.Features.Items.Usable"/>.
            </summary>
            <remarks>
            Invoked after <see cref="P:Exiled.Events.Handlers.Player.UsingItem"/>, if a player's class has
            changed during their health increase, won't fire.
            </remarks>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.CancellingItemUse">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> has stopped the use of a <see cref="T:Exiled.API.Features.Items.Usable"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.CancelledItemUse">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> has stopped the use of a <see cref="T:Exiled.API.Features.Items.Usable"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Interacted">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> interacted with something.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.SpawningRagdoll">
            <summary>
            Invoked before spawning a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:Exiled.API.Features.Ragdoll"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.SpawnedRagdoll">
            <summary>
            Invoked after spawning a <see cref="T:Exiled.API.Features.Player"/> <see cref="T:Exiled.API.Features.Ragdoll"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ActivatingWarheadPanel">
            <summary>
            Invoked before activating the warhead panel.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ActivatingWorkstation">
            <summary>
            Invoked before activating a workstation.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DeactivatingWorkstation">
            <summary>
            Invoked before deactivating a workstation.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Joined">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> has joined the server.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Verified">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> has been verified.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Left">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> has left the server.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Destroying">
            <summary>
            Invoked before destroying a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Hurting">
            <summary>
            Invoked before hurting a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Hurt">
            <summary>
            Invoked after hurting a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Dying">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> dies.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Died">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> died.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangingRole">
            <summary>
            Invoked before changing a <see cref="T:Exiled.API.Features.Player"/> role.
            </summary>
            <remarks>If <see cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.IsAllowed"/> is set to <see langword="false"/> when Escape is <see langword="true"/>, tickets will still be given to the escapee's team even though they will 'fail' to escape. Use <see cref="P:Exiled.Events.Handlers.Player.Escaping"/> to block escapes instead.</remarks>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ThrownProjectile">
            <summary>
            Invoked afer throwing an <see cref="T:Exiled.API.Features.Items.Throwable"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ThrowingRequest">
            <summary>
            Invoked before receving a throwing request an <see cref="T:Exiled.API.Features.Items.Throwable"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DroppingItem">
            <summary>
            Invoked before dropping an <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DroppedItem">
            <summary>
            Invoked after dropping an <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DroppingNothing">
            <summary>
            Invoked before dropping a null <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.PickingUpItem">
            <summary>
            Invoked before picking up an <see cref="T:Exiled.API.Features.Items.Item"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Handcuffing">
            <summary>
            Invoked before handcuffing a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.RemovingHandcuffs">
            <summary>
            Invoked before freeing a handcuffed <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Escaping">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> escapes.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.IntercomSpeaking">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> begins speaking to the intercom.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Shot">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> gets shot.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Shooting">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> shoots a weapon.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.EnteringPocketDimension">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> enters the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.EscapingPocketDimension">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> escapes the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.FailingEscapePocketDimension">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> fails to escape the pocket dimension.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.EnteringKillerCollision">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> enters killer collision.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ReloadingWeapon">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> reloads a weapon.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Spawning">
            <summary>
            Invoked before spawning a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Spawned">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> has spawned.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangedItem">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> held <see cref="T:Exiled.API.Features.Items.Item"/> changes.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangingItem">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> held <see cref="T:Exiled.API.Features.Items.Item"/> changes.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangingGroup">
            <summary>
            Invoked before changing a <see cref="T:Exiled.API.Features.Player"/> group.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.InteractingDoor">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> interacts with a door.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.InteractingElevator">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> interacts with an elevator.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.InteractingLocker">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> interacts with a locker.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.TriggeringTesla">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> triggers a tesla gate.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.UnlockingGenerator">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> unlocks a generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.OpeningGenerator">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> opens a generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ClosingGenerator">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> closes a generator.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ActivatingGenerator">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> turns on the generator by switching lever.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.StoppingGenerator">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> turns off the generator by switching lever.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ReceivingEffect">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> receives a status effect.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.IssuingMute">
            <summary>
            Invoked before muting a user.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.RevokingMute">
            <summary>
            Invoked before unmuting a user.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.UsingRadioBattery">
            <summary>
            Invoked before a user's radio battery charge is changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangingRadioPreset">
            <summary>
            Invoked before a user's radio preset is changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangingMicroHIDState">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> MicroHID state is changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.UsingMicroHIDEnergy">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> MicroHID energy is changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DroppingAmmo">
            <summary>
            Invoked before dropping ammo.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DroppedAmmo">
            <summary>
            Invoked after dropping ammo.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.InteractingShootingTarget">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> interacts with a shooting target.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DamagingShootingTarget">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> damages a shooting target.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.FlippingCoin">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> flips a coin.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.TogglingFlashlight">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> toggles the flashlight.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.UnloadingWeapon">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> unloads a weapon.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.AimingDownSight">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> triggers an aim action.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.TogglingWeaponFlashlight">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> toggles the weapon's flashlight.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DryfiringWeapon">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> dryfires a weapon.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.VoiceChatting">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> presses the voicechat key.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.MakingNoise">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> makes noise.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Jumping">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> jumps.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Landing">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> lands.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.Transmitting">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> presses the transmission key.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangingMoveState">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> changes move state.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangingSpectatedPlayer">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> changed spectated player.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.TogglingNoClip">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> toggles the NoClip mode.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.TogglingOverwatch">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> toggles overwatch.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.TogglingRadio">
            <summary>
            Invoked before turning the <see cref="T:Exiled.API.Features.Items.Radio" /> on/off.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.SearchingPickup">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> searches a Pickup.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.SendingAdminChatMessage">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> send a message in AdminChat.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.PlayerDamageWindow">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> damage a Window.
            </summary> // TODO: DamagingWindow instead of PlayerDamageWindow
        </member>
        <member name="P:Exiled.Events.Handlers.Player.DamagingDoor">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> damage a Door.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ItemAdded">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player" /> has an item added to their inventory.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ItemRemoved">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player" /> has an item removed from their inventory.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.KillingPlayer">
            <summary>
            Invoked before KillPlayer is called.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.EnteringEnvironmentalHazard">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> enters in an environmental hazard.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.StayingOnEnvironmentalHazard">
            <summary>
            Invoked when a <see cref="T:Exiled.API.Features.Player"/> stays on an environmental hazard.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ExitingEnvironmentalHazard">
            <summary>
            Invoked when a <see cref="T:Exiled.API.Features.Player"/> exists from an environmental hazard.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.ChangingNickname">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/>'s nickname is changed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Player.InteractingSnowpile">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player"/> is interacting with snowpile.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnReservedSlot(Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs)">
            <summary>
            Called before reserved slot is resolved for a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ReservedSlotsCheckEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnKicking(Exiled.Events.EventArgs.Player.KickingEventArgs)">
            <summary>
            Called before kicking a <see cref="T:Exiled.API.Features.Player"/> from the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.KickingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnKicked(Exiled.Events.EventArgs.Player.KickedEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> has been kicked from the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.KickedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnBanning(Exiled.Events.EventArgs.Player.BanningEventArgs)">
            <summary>
            Called before banning a <see cref="T:Exiled.API.Features.Player"/> from the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.BanningEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnBanned(Exiled.Events.EventArgs.Player.BannedEventArgs)">
            <summary>
            Called after a player has been banned from the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.BannedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEarningAchievement(Exiled.Events.EventArgs.Player.EarningAchievementEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/>  earns an achievement.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.EarningAchievementEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsingItem(Exiled.Events.EventArgs.Player.UsingItemEventArgs)">
            <summary>
            Called before using a usable item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.UsingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsingItemCompleted(Exiled.Events.EventArgs.Player.UsingItemCompletedEventArgs)">
            <summary>
            Called before completed using of a usable item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.UsingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsedItem(Exiled.Events.EventArgs.Player.UsedItemEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> used a <see cref="T:Exiled.API.Features.Items.Usable"/> item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.UsedItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnCancellingItemUse(Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> has stopped the use of a <see cref="T:Exiled.API.Features.Items.Usable"/> item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.CancellingItemUseEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnCancelledItemUse(Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> has stopped the use of a <see cref="T:Exiled.API.Features.Items.Usable"/> item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.CancelledItemUseEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteracted(Exiled.Events.EventArgs.Player.InteractedEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> interacted with something.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.InteractedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSpawningRagdoll(Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs)">
            <summary>
            Called before spawning a <see cref="T:Exiled.API.Features.Player"/> ragdoll.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.SpawningRagdollEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSpawnedRagdoll(Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs)">
            <summary>
            Called after spawning a <see cref="T:Exiled.API.Features.Player"/> ragdoll.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.SpawnedRagdollEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnActivatingWarheadPanel(Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs)">
            <summary>
            Called before activating the warhead panel.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ActivatingWarheadPanelEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnActivatingWorkstation(Exiled.Events.EventArgs.Player.ActivatingWorkstationEventArgs)">
            <summary>
            Called before activating a workstation.
            </summary>
            <param name="ev">The <see cref="P:Exiled.Events.Handlers.Player.ActivatingWorkstation"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDeactivatingWorkstation(Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs)">
            <summary>
            Called before deactivating a workstation.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DeactivatingWorkstationEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnLeft(Exiled.Events.EventArgs.Player.LeftEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> has left the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.LeftEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDied(Exiled.Events.EventArgs.Player.DiedEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> died.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DiedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingRole(Exiled.Events.EventArgs.Player.ChangingRoleEventArgs)">
            <summary>
            Called before changing a <see cref="T:Exiled.API.Features.Player"/> role.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs"/> instance.</param>
            <remarks>If <see cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.IsAllowed"/> is set to <see langword="false"/> when Escape is <see langword="true"/>, tickets will still be given to the escapee's team even though they will 'fail' to escape. Use <see cref="P:Exiled.Events.Handlers.Player.Escaping"/> to block escapes instead.</remarks>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnThrowingProjectile(Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs)">
            <summary>
            Called before throwing a grenade.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ThrownProjectileEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnThrowingRequest(Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs)">
            <summary>
            Called before receving a throwing request.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ThrowingRequestEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDroppingItem(Exiled.Events.EventArgs.Player.DroppingItemEventArgs)">
            <summary>
            Called before dropping an item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DroppingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDroppedItem(Exiled.Events.EventArgs.Player.DroppedItemEventArgs)">
            <summary>
            Called after dropping an item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DroppedItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDroppingNothing(Exiled.Events.EventArgs.Player.DroppingNothingEventArgs)">
            <summary>
            Called before dropping a null item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DroppingNothingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPickingUpItem(Exiled.Events.EventArgs.Player.PickingUpItemEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> picks up an item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.PickingUpItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnHandcuffing(Exiled.Events.EventArgs.Player.HandcuffingEventArgs)">
            <summary>
            Called before handcuffing a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.HandcuffingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnRemovingHandcuffs(Exiled.Events.EventArgs.Player.RemovingHandcuffsEventArgs)">
            <summary>
            Called before freeing a handcuffed <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.RemovingHandcuffsEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEscaping(Exiled.Events.EventArgs.Player.EscapingEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> escapes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.EscapingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnIntercomSpeaking(Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> begins speaking to the intercom.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.IntercomSpeakingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnShot(Exiled.Events.EventArgs.Player.ShotEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> shoots a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ShotEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnShooting(Exiled.Events.EventArgs.Player.ShootingEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> shoots a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ShootingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEnteringPocketDimension(Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> enters the pocket dimension.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.EnteringPocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEscapingPocketDimension(Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> escapes the pocket dimension.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.EscapingPocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnFailingEscapePocketDimension(Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> fails to escape the pocket dimension.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.FailingEscapePocketDimensionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEnteringKillerCollision(Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> enters killer collision.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.EnteringKillerCollisionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnReloadingWeapon(Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> reloads a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ReloadingWeaponEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSpawning(Exiled.Events.EventArgs.Player.SpawningEventArgs)">
            <summary>
            Called before spawning a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.SpawningEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSpawned(Exiled.Events.EventArgs.Player.SpawnedEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> has spawned.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.SpawnedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangedItem(Exiled.Events.EventArgs.Player.ChangedItemEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> held item changes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangedItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingItem(Exiled.Events.EventArgs.Player.ChangingItemEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> held item changes.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingItemEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingGroup(Exiled.Events.EventArgs.Player.ChangingGroupEventArgs)">
            <summary>
            Called before changing a <see cref="T:Exiled.API.Features.Player"/> group.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingGroupEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingElevator(Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> interacts with an elevator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.InteractingElevatorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingLocker(Exiled.Events.EventArgs.Player.InteractingLockerEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> interacts with a locker.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.InteractingLockerEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTriggeringTesla(Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> triggers a tesla.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.TriggeringTeslaEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnReceivingEffect(Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> receives a status effect.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ReceivingEffectEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsingRadioBattery(Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs)">
            <summary>
            Called before a user's radio battery charge is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.UsingRadioBatteryEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingMicroHIDState(Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> MicroHID state is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingMicroHIDStateEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUsingMicroHIDEnergy(Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> MicroHID energy is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.UsingMicroHIDEnergyEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingShootingTarget(Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> interacts with a shooting target.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.InteractingShootingTargetEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDamagingShootingTarget(Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> damages a shooting target.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DamagingShootingTargetEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnFlippingCoin(Exiled.Events.EventArgs.Player.FlippingCoinEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> flips a coin.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.FlippingCoinEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTogglingFlashlight(Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> toggles the flashlight.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.TogglingFlashlightEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUnloadingWeapon(Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> unloads a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.UnloadingWeaponEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnAimingDownSight(Exiled.Events.EventArgs.Player.AimingDownSightEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> triggers an aim action.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.AimingDownSightEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTogglingWeaponFlashlight(Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> toggles the weapon's flashlight.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.TogglingWeaponFlashlightEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDryfiringWeapon(Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> dryfires a weapon.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DryfiringWeaponEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnVoiceChatting(Exiled.Events.EventArgs.Player.VoiceChattingEventArgs)">
            <summary>
            Invoked after a <see cref="T:Exiled.API.Features.Player"/> presses the voicechat key.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.VoiceChattingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnMakingNoise(Exiled.Events.EventArgs.Player.MakingNoiseEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> makes noise.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.MakingNoiseEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnJumping(Exiled.Events.EventArgs.Player.JumpingEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> jumps.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.JumpingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnLanding(Exiled.Events.EventArgs.Player.LandingEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> lands.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.LandingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTransmitting(Exiled.Events.EventArgs.Player.TransmittingEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> presses the transmission key.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.TransmittingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingMoveState(Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> changes move state.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingMoveStateEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingSpectatedPlayer(Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> changes spectated player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingSpectatedPlayerEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTogglingNoClip(Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> toggles the NoClip mode.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.TogglingNoClipEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTogglingOverwatch(Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> toggles overwatch.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.TogglingOverwatchEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnTogglingRadio(Exiled.Events.EventArgs.Player.TogglingRadioEventArgs)">
            <summary>
            Called before turning the radio on/off.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.TogglingRadioEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSearchPickupRequest(Exiled.Events.EventArgs.Player.SearchingPickupEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> searches a Pickup.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.SearchingPickupEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnSendingAdminChatMessage(Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> searches a Pickup.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.SendingAdminChatMessageEventsArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnKillPlayer(Exiled.Events.EventArgs.Player.KillingPlayerEventArgs)">
            <summary>
             Called before KillPlayer is called.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.KillingPlayerEventArgs"/> event handler. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnItemAdded(ReferenceHub,InventorySystem.Items.ItemBase,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player" /> has an item added to their inventory.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/> the item was added to.</param>
            <param name="itemBase">The added <see cref="T:InventorySystem.Items.ItemBase"/>.</param>
            <param name="pickupBase">The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> the <see cref="T:InventorySystem.Items.ItemBase"/> originated from, or <see langword="null"/> if the item was not picked up.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnItemRemoved(ReferenceHub,InventorySystem.Items.ItemBase,InventorySystem.Items.Pickups.ItemPickupBase)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player" /> has an item removed from their inventory.
            </summary>
            <param name="referenceHub">The <see cref="T:ReferenceHub"/> the item was removed from.</param>
            <param name="itemBase">The removed <see cref="T:InventorySystem.Items.ItemBase"/>.</param>
            <param name="pickupBase">The <see cref="T:InventorySystem.Items.Pickups.ItemPickupBase"/> the <see cref="T:InventorySystem.Items.ItemBase"/> originated from, or <see langword="null"/> if the item was not picked up.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnEnteringEnvironmentalHazard(Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> enters in an environmental hazard.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.EnteringEnvironmentalHazardEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnStayingOnEnvironmentalHazard(Exiled.Events.EventArgs.Player.StayingOnEnvironmentalHazardEventArgs)">
            <summary>
            Called when a <see cref="T:Exiled.API.Features.Player"/> stays on an environmental hazard.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.StayingOnEnvironmentalHazardEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnExitingEnvironmentalHazard(Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> exits from an environmental hazard.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ExitingEnvironmentalHazardEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPlayerDamageWindow(Exiled.Events.EventArgs.Player.DamagingWindowEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> damage a window.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DamagingWindowEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDamagingDoor(Exiled.Events.EventArgs.Player.DamagingDoorEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> damage a window.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DamagingDoorEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnUnlockingGenerator(Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> unlocks a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.UnlockingGeneratorEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnOpeningGenerator(Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> opens a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.OpeningGeneratorEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnClosingGenerator(Exiled.Events.EventArgs.Player.ClosingGeneratorEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> closes a generator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ClosingGeneratorEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnActivatingGenerator(Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> turns on the generator by switching lever.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ActivatingGeneratorEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnStoppingGenerator(Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> turns off the generator by switching lever.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.StoppingGeneratorEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingDoor(Exiled.Events.EventArgs.Player.InteractingDoorEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> interacts with a door.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.InteractingDoorEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDroppingAmmo(Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs)">
            <summary>
            Called before dropping ammo.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DroppingAmmoEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDroppedAmmo(Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs)">
            <summary>
            Called after dropping ammo.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DroppedAmmoEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnIssuingMute(Exiled.Events.EventArgs.Player.IssuingMuteEventArgs)">
            <summary>
            Called before muting a user.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.IssuingMuteEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnRevokingMute(Exiled.Events.EventArgs.Player.RevokingMuteEventArgs)">
            <summary>
            Called before unmuting a user.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.RevokingMuteEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingRadioPreset(Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs)">
            <summary>
            Called before a user's radio preset is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingRadioPresetEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnHurting(Exiled.Events.EventArgs.Player.HurtingEventArgs)">
            <summary>
            Called before hurting a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.HurtingEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnHurt(Exiled.Events.EventArgs.Player.HurtEventArgs)">
            <summary>
            Called ater a <see cref="T:Exiled.API.Features.Player"/> being hurt.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.HurtingEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDying(Exiled.Events.EventArgs.Player.DyingEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> dies.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DyingEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnJoined(Exiled.Events.EventArgs.Player.JoinedEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> has joined the server.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.JoinedEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnVerified(Exiled.Events.EventArgs.Player.VerifiedEventArgs)">
            <summary>
            Called after a <see cref="T:Exiled.API.Features.Player"/> has been verified.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.VerifiedEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnDestroying(Exiled.Events.EventArgs.Player.DestroyingEventArgs)">
            <summary>
            Called before destroying a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.DestroyingEventArgs"/> instance. </param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnChangingNickname(Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.Events.Handlers.Player"/>'s custom display name is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.ChangingNicknameEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnInteractingSnowpile(Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player"/> is interacting with snowpile.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.InteractingSnowpileEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Player.OnPreAuthenticating(System.String,System.String,System.Int64,CentralAuthPreauthFlags,System.String,System.Byte[],LiteNetLib.ConnectionRequest,System.Int32)">
            <summary>
            Called before pre-authenticating a <see cref="T:Exiled.API.Features.Player"/>.
            </summary>
            <param name="userId"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.UserId"/></param>
            <param name="ipAddress"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.IpAddress"/></param>
            <param name="expiration"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Expiration"/></param>
            <param name="flags"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Flags"/></param>
            <param name="country"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Country"/></param>
            <param name="signature"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Signature"/></param>
            <param name="request"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.Request"/></param>
            <param name="readerStartPosition"><inheritdoc cref="P:Exiled.Events.EventArgs.Player.PreAuthenticatingEventArgs.ReaderStartPosition"/></param>
            <returns>Returns the <see cref="T:PluginAPI.Events.PreauthCancellationData"/> instance.</returns>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp049">
            <summary>
            SCP-049 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp049.FinishingRecall">
            <summary>
            Invoked before SCP-049 finishes reviving a player.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp049.StartingRecall">
            <summary>
            Invoked before SCP-049 begins reviving a player.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp049.ActivatingSense">
            <summary>
            Invoked before SCP-049 uses the good sense of the doctor ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp049.SendingCall">
            <summary>
            Invoked before SCP-049 uses the call ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp049.Attacking">
            <summary>
            Invoked before SCP-049 attacks player.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnFinishingRecall(Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs)">
            <summary>
            Called before SCP-049 finishes reviving a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp049.FinishingRecallEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnStartingRecall(Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs)">
            <summary>
            Called before SCP-049 starts to revive a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp049.StartingRecallEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnActivatingSense(Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs)">
            <summary>
            Called before SCP-049 starts the good sense of the doctor ability.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp049.ActivatingSenseEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnSendingCall(Exiled.Events.EventArgs.Scp049.SendingCallEventArgs)">
            <summary>
            Called before SCP-049 starts the call ability.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp049.SendingCallEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp049.OnAttacking(Exiled.Events.EventArgs.Scp049.AttackingEventArgs)">
            <summary>
            Called before SCP-049 attacks player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp049.AttackingEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp0492">
            <summary>
            <see cref="T:Exiled.API.Features.Roles.Scp0492Role"/> related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp0492.TriggeringBloodlust">
            <summary>
            Invoked before a player triggers the bloodlust effect for 049-2.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp0492.ConsumedCorpse">
            <summary>
            Called after 049-2 gets his benefits from consumed ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp0492.ConsumingCorpse">
            <summary>
            Called before 049-2 gets his benefits from consuming ability.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp0492.OnTriggeringBloodlust(Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs)">
            <summary>
            Called before a player triggers the bloodlust effect for 049-2.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp0492.TriggeringBloodlustEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp0492.OnConsumedCorpse(Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs)">
            <summary>
            Invokes after 049-2 gets his benefits from consumed ability.
            </summary>
            <param name="ev"><inheritdoc cref="T:Exiled.Events.EventArgs.Scp0492.ConsumedCorpseEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp0492.OnConsumingCorpse(Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs)">
            <summary>
            Invokes before 049-2 gets his benefits from consuming ability.
            </summary>
            <param name="ev"><inheritdoc cref="T:Exiled.Events.EventArgs.Scp0492.ConsumingCorpseEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp079">
            <summary>
            SCP-079 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.ChangingCamera">
            <summary>
            Invoked before SCP-079 switches cameras.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.GainingExperience">
            <summary>
            Invoked before gaining experience with SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.GainingLevel">
            <summary>
            Invoked before gaining levels with SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.InteractingTesla">
            <summary>
            Invoked before triggering a tesla with SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.TriggeringDoor">
            <summary>
            Invoked before triggering a door with SCP-079.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.ElevatorTeleporting">
            <summary>
            Invoked before SCP-079 teleports using an elevator.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.LockingDown">
            <summary>
            Invoked before SCP-079 lockdowns a room.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.ChangingSpeakerStatus">
            <summary>
            Invoked before SCP-079 changes a speaker status.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.Recontained">
            <summary>
            Invoked after SCP-079 recontainment.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.Pinging">
            <summary>
            Invoked before SCP-079 sends a ping.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.RoomBlackout">
            <summary>
            Invoked before SCP-079 turns off the lights in a room.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp079.ZoneBlackout">
            <summary>
            Invoked before SCP-079 turns off the lights in a zone.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnChangingCamera(Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs)">
            <summary>
            Called before SCP-079 switches cameras.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.ChangingCameraEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnGainingExperience(Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs)">
            <summary>
            Called before gaining experience with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.GainingExperienceEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnGainingLevel(Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs)">
            <summary>
            Called before gaining levels with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.GainingLevelEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnInteractingTesla(Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs)">
            <summary>
            Called before triggering a tesla with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.InteractingTeslaEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnTriggeringDoor(Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs)">
            <summary>
            Called before interacting with a door with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.TriggeringDoorEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnElevatorTeleporting(Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs)">
            <summary>
            Called before SCP-079 teleports using an elevator.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.ElevatorTeleportingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnLockingDown(Exiled.Events.EventArgs.Scp079.LockingDownEventArgs)">
            <summary>
            Called before SCP-079 lockdowns a room.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.LockingDownEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnChangingSpeakerStatus(Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs)">
            <summary>
            Called while interacting with a speaker with SCP-079.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.ChangingSpeakerStatusEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnRecontained(Exiled.Events.EventArgs.Scp079.RecontainedEventArgs)">
            <summary>
            Called after SCP-079 is recontained.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.RecontainedEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnPinging(Exiled.Events.EventArgs.Scp079.PingingEventArgs)">
            <summary>
            Called before SCP-079 sends a ping.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.PingingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnRoomBlackout(Exiled.Events.EventArgs.Scp079.RoomBlackoutEventArgs)">
            <summary>
            Called before SCP-079 turns off the lights in a room.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.PingingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp079.OnZoneBlackout(Exiled.Events.EventArgs.Scp079.ZoneBlackoutEventArgs)">
            <summary>
            Called before SCP-079 turns off the lights in a zone.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp079.PingingEventArgs" /> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp096">
            <summary>
            SCP-096 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp096.Enraging">
            <summary>
            Invoked before SCP-096 is enraged.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp096.CalmingDown">
            <summary>
            Invoked before SCP-096 calms down.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp096.AddingTarget">
            <summary>
            Invoked before adding a target to SCP-096.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp096.StartPryingGate">
            <summary>
            Invoked before SCP-096 begins prying open a gate.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp096.Charging">
            <summary>
            Invoked before SCP-096 begins charging.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp096.TryingNotToCry">
            <summary>
            Invoked before SCP-096 tries not to cry.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnEnraging(Exiled.Events.EventArgs.Scp096.EnragingEventArgs)">
            <summary>
            Called before SCP-096 is enraged.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp096.EnragingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnCalmingDown(Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs)">
            <summary>
            Called before SCP-096 calms down.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp096.CalmingDownEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnAddingTarget(Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs)">
            <summary>
            Called before adding a target to SCP-096.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp096.AddingTargetEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnStartPryingGate(Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs)">
            <summary>
            Called before SCP-096 begins prying open a gate.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp096.StartPryingGateEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnCharging(Exiled.Events.EventArgs.Scp096.ChargingEventArgs)">
            <summary>
            Called before SCP-096 begins charging.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp096.ChargingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp096.OnTryingNotToCry(Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs)">
            <summary>
            Called before SCP-096 starts trying not to cry.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp096.TryingNotToCryEventArgs" /> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp106">
            <summary>
            SCP-106 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp106.Attacking">
            <summary>
            Invoked before SCP-106 attacks player.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp106.Teleporting">
            <summary>
            Invoked before SCP-106 teleports using the hunter atlas.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp106.Stalking">
            <summary>
            Invoked before SCP-106 use the stalk ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp106.ExitStalking">
            <summary>
            Invoked before SCP-106 exit the stalk ability.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnAttacking(Exiled.Events.EventArgs.Scp106.AttackingEventArgs)">
            <summary>
            Called before SCP-106 attacks player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp106.AttackingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnTeleporting(Exiled.Events.EventArgs.Scp106.TeleportingEventArgs)">
            <summary>
            Called before SCP-106 teleports using the hunter atlas.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp106.TeleportingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnStalking(Exiled.Events.EventArgs.Scp106.StalkingEventArgs)">
            <summary>
            Called before SCP-106 use the stalk ability.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp106.StalkingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp106.OnExitStalking(Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs)">
            <summary>
            Called before SCP-106 exit the stalk ability.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp106.ExitStalkingEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp1507">
            <summary>
            SCP-1507 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp1507.AttackingDoor">
            <summary>
            Invokes before SCP-1507 attacks door.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp1507.Screaming">
            <summary>
            Invoked before SCP-1507 screams.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp1507.SpawningFlamingos">
            <summary>
            Invoked before flamingos get spawned.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp1507.OnAttackingDoor(Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs)">
            <summary>
            Called before SCP-1507 attacks door.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp1507.AttackingDoorEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp1507.OnScreaming(Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs)">
            <summary>
            Called before SCP-1507 screams.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp1507.ScreamingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp1507.OnSpawningFlamingos(Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs)">
            <summary>
            Called before flamingos get spawned.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp1507.SpawningFlamingosEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp173">
            <summary>
            SCP-173 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp173.Blinking">
            <summary>
            Invoked before players near SCP-173 blink.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp173.BlinkingRequest">
            <summary>
            Invoked before server handle SCP-173 blink network message.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp173.PlacingTantrum">
            <summary>
            Invoked before a tantrum is placed.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp173.UsingBreakneckSpeeds">
            <summary>
            Invoked before using breakneck speeds.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp173.OnBlinking(Exiled.Events.EventArgs.Scp173.BlinkingEventArgs)">
            <summary>
            Called before players near SCP-173 blink.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp173.BlinkingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp173.OnBlinkingRequest(Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs)">
            <summary>
            Called before server handle SCP-173 blink network message.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp173.BlinkingRequestEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp173.OnPlacingTantrum(Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs)">
            <summary>
            Called before a tantrum is placed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp173.PlacingTantrumEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp173.OnUsingBreakneckSpeeds(Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs)">
            <summary>
            Called before a using breakneck speeds.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp173.UsingBreakneckSpeedsEventArgs" /> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp244">
            <summary>
            Scp244 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp244.UsingScp244">
            <summary>
            Invoked before using an <see cref="T:Exiled.API.Features.Items.Item" />.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp244.DamagingScp244">
            <summary>
            Invoked before an Scp244 take damage.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp244.OpeningScp244">
            <summary>
            Invoked before an Scp244 open because the angle was too low.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp244.OnUsingScp244(Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs)">
            <summary>
            Called before using a usable item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp244.UsingScp244EventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp244.OnDamagingScp244(Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs)">
            <summary>
            Called before an Scp244 take damage.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp244.OnOpeningScp244(Exiled.Events.EventArgs.Scp244.OpeningScp244EventArgs)">
            <summary>
            Called before Scp244 open because the angle was too low.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp244.DamagingScp244EventArgs" /> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp2536">
            <summary>
            SCP-2536 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp2536.FindingPosition">
            <summary>
            Invoked before SCP-2536 chooses target to spawn.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp2536.GrantingGift">
            <summary>
            Invoked before SCP-2536 gives a gift to a player.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp2536.OnFindingPosition(Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs)">
            <summary>
            Called before SCP-2536 chooses a target.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp2536.FindingPositionEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp2536.OnGrantingGift(Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs)">
            <summary>
            Called before SCP-2536 gives a gift to a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp2536.GrantingGiftEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp3114">
            <summary>
            Scp3114 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp3114.Disguising">
            <summary>
            Invoked before disguising.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp3114.Disguised">
            <summary>
            Invoked when disguised.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp3114.TryUseBody">
            <summary>
            Invoked before trying to use a body.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp3114.Revealed">
            <summary>
            Invoked when reveals.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp3114.Revealing">
            <summary>
            Invoked before reveals.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp3114.VoiceLines">
            <summary>
            Invoked before sending any SCP-3114 voicelines.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp3114.OnDisguising(Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs)">
            <summary>
            Called before diguising.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp3114.DisguisingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp3114.OnDisguised(Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs)">
            <summary>
            Called after diguising.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp3114.DisguisedEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp3114.OnTryUseBody(Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs)">
            <summary>
            Called before trying to use a body.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp3114.TryUseBodyEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp3114.OnRevealed(Exiled.Events.EventArgs.Scp3114.RevealedEventArgs)">
            <summary>
            Called after reveals.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp3114.RevealedEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp3114.OnRevealing(Exiled.Events.EventArgs.Scp3114.RevealingEventArgs)">
            <summary>
            Called before revealing.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp3114.RevealingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp3114.OnVoiceLines(Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs)">
            <summary>
               Called before sending any SCP-3114 voicelines.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp3114.VoiceLinesEventArgs" /> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp330">
            <summary>
            Scp330 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp330.InteractingScp330">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player" /> interacts with SCP-330.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp330.DroppingScp330">
            <summary>
            Invoked before a <see cref="T:Exiled.API.Features.Player" /> drop a SCP-330 candy.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp330.EatingScp330">
            <summary>
            Invoked before a player eats a candy from SCP-330.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp330.EatenScp330">
            <summary>
            Invoked after the player has eaten a candy from SCP-330.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp330.OnEatingScp330(Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs)">
            <summary>
            Called before a player eats a candy from SCP-330.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp330.EatingScp330EventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp330.OnEatenScp330(Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs)">
            <summary>
            Called after the player has eaten a candy from SCP-330.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp330.EatenScp330EventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp330.OnInteractingScp330(Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player" /> interacts with SCP-330.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp330.InteractingScp330EventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp330.OnDroppingScp330(Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.API.Features.Player" /> searches a Pickup.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp330.DroppingScp330EventArgs" /> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp559">
            <summary>
            All SCP-559 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp559.Spawning">
            <summary>
            Invoked before SCP-559 spawns.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp559.Interacting">
            <summary>
            Invoked before player interacts with SCP-559.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp559.OnSpawning(Exiled.Events.EventArgs.Scp559.SpawningEventArgs)">
            <summary>
            Called before SCP-559 spawns.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp559.SpawningEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp559.OnInteracting(Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs)">
            <summary>
            Called before player interacts with SCP-559.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp559.InteractingScp559EventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp914">
            <summary>
            Handles SCP-914 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp914.UpgradingPickup">
            <summary>
            Invoked before SCP-914 upgrades a Pickup.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp914.UpgradingInventoryItem">
            <summary>
            Invoked before SCP-914 upgrades an item in a player's inventory.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp914.UpgradingPlayer">
            <summary>
            Invoked before SCP-914 upgrades a player.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp914.Activating">
            <summary>
            Invoked before activating the SCP-914 machine.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp914.ChangingKnobSetting">
            <summary>
            Invoked before changing the SCP-914 machine knob setting.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnUpgradingPickup(Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs)">
            <summary>
            Called before SCP-914 upgrades a item.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp914.UpgradingPickupEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnUpgradingInventoryItem(Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs)">
            <summary>
            Called before SCP-914 upgrades an item in a player's inventory.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp914.UpgradingInventoryItemEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnUpgradingPlayer(Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs)">
            <summary>
            Called before SCP-914 upgrades a player.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp914.UpgradingPlayerEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnActivating(Exiled.Events.EventArgs.Scp914.ActivatingEventArgs)">
            <summary>
            Called before activating the SCP-914 machine.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp914.ActivatingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp914.OnChangingKnobSetting(Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs)">
            <summary>
            Called before changing the SCP-914 machine knob setting.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp914.ChangingKnobSettingEventArgs" /> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Scp939">
            <summary>
            Handles SCP-939 related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp939.ChangingFocus">
            <summary>
            Invoked before SCP-939 changes its target focus.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp939.Lunging">
            <summary>
            Invoked before SCP-939 uses its lunge ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp939.PlacingAmnesticCloud">
            <summary>
            Invoked before SCP-939 uses its amnestic cloud ability.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp939.PlayingVoice">
            <summary>
            Invoked before SCP-939 plays a stolen voice.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp939.SavingVoice">
            <summary>
            Invoked before SCP-939 will save Human voice.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp939.PlayingSound">
            <summary>
            Invoked before SCP-939 plays a sound effect.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp939.Clawed">
            <summary>
            Invoked after SCP-939 attack.
            </summary>
            <remarks>This event is calling only when attack doesn't have target.</remarks>
        </member>
        <member name="P:Exiled.Events.Handlers.Scp939.ValidatingVisibility">
            <summary>
            Invoked before validating visibility.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp939.OnChangingFocus(Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs)">
            <summary>
            Called before SCP-939 changes its target focus.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp939.ChangingFocusEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp939.OnLunging(Exiled.Events.EventArgs.Scp939.LungingEventArgs)">
            <summary>
            Called before SCP-939 uses its lunge ability.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp939.LungingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp939.OnPlacingAmnesticCloud(Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs)">
            <summary>
            Called before SCP-939 uses its amnestic cloud ability.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp939.OnPlayingVoice(Exiled.Events.EventArgs.Scp939.PlayingVoiceEventArgs)">
            <summary>
            Called before SCP-939 plays a stolen voice.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp939.OnSavingVoice(Exiled.Events.EventArgs.Scp939.SavingVoiceEventArgs)">
            <summary>
            Called before SCP-939 plays a stolen voice.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp939.PlacingAmnesticCloudEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp939.OnPlayingSound(Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs)">
            <summary>
            Called before SCP-939 plays a sound.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp939.PlayingSoundEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp939.OnClawed(Exiled.Events.EventArgs.Scp939.ClawedEventArgs)">
            <summary>
            Called after SCP-939 attacks.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp939.ClawedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Scp939.OnValidatingVisibility(Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs)">
            <summary>
            Called before validating visibility.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Scp939.ValidatingVisibilityEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Server">
            <summary>
            Server related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.WaitingForPlayers">
            <summary>
            Invoked before waiting for players.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.RoundStarted">
            <summary>
            Invoked after the start of a new round.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.EndingRound">
            <summary>
            Invoked before ending a round.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.RoundEnded">
            <summary>
            Invoked after the end of a round.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.RestartingRound">
            <summary>
            Invoked before the restart of a round.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.ReportingCheater">
            <summary>
            Invoked when a player reports a cheater.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.RespawningTeam">
            <summary>
            Invoked before respawning a wave of Chaos Insurgency or NTF.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.AddingUnitName">
            <summary>
            Invoked before adding an unit name.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.LocalReporting">
            <summary>
            Invoked when sending a complaint about a player to the local server administrators.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.ChoosingStartTeamQueue">
            <summary>
            Invoked before choosing the Team than player will get.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.SelectingRespawnTeam">
            <summary>
            Invoked before selecting the team that will respawn.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.ReloadedConfigs">
            <summary>
            Invoked after the "reload configs" command is ran.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.ReloadedTranslations">
            <summary>
            Invoked after the "reload translations" command is ran.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.ReloadedGameplay">
            <summary>
            Invoked after the "reload gameplay" command is ran.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.ReloadedRA">
            <summary>
            Invoked after the "reload remoteadminconfigs" command is ran.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.ReloadedPlugins">
            <summary>
            Invoked after the "reload plugins" command is ran.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Server.ReloadedPermissions">
            <summary>
            Invoked after the "reload permissions" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnWaitingForPlayers">
            <summary>
            Called before waiting for players.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRoundStarted">
            <summary>
            Called after the start of a new round.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnEndingRound(Exiled.Events.EventArgs.Server.EndingRoundEventArgs)">
            <summary>
            Called before ending a round.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Server.EndingRoundEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRoundEnded(Exiled.Events.EventArgs.Server.RoundEndedEventArgs)">
            <summary>
            Called after the end of a round.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Server.RoundEndedEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRestartingRound">
            <summary>
            Called before restarting a round.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReportingCheater(Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs)">
            <summary>
            Called when a player reports a cheater.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Server.ReportingCheaterEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnRespawningTeam(Exiled.Events.EventArgs.Server.RespawningTeamEventArgs)">
            <summary>
            Called before respawning a wave of Chaos Insurgency or NTF.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Server.RespawningTeamEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnAddingUnitName(Exiled.Events.EventArgs.Server.AddingUnitNameEventArgs)">
            <summary>
            Called before adding an unit name.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Server.AddingUnitNameEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnLocalReporting(Exiled.Events.EventArgs.Player.LocalReportingEventArgs)">
            <summary>
            Called when sending a complaint about a player to the local server administrators.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Player.LocalReportingEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnChoosingStartTeam(Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs)">
            <summary>
            Called before a <see cref="T:Exiled.Events.Handlers.Player"/>'s custom display name is changed.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Server.ChoosingStartTeamQueueEventArgs"/> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedConfigs">
            <summary>
            Called after the "reload configs" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedTranslations">
            <summary>
            Called after the "reload translations" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedGameplay">
            <summary>
            Called after the "reload gameplay" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedRA">
            <summary>
            Called after the "reload remoteadminconfigs" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedPlugins">
            <summary>
            Called after the "reload plugins" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnReloadedPermissions">
            <summary>
            Called after the "reload permissions" command is ran.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Server.OnSelectingRespawnTeam(Exiled.Events.EventArgs.Server.SelectingRespawnTeamEventArgs)">
            <summary>
            Called before selecting the team that will respawn next.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Server.SelectingRespawnTeamEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Handlers.Warhead">
            <summary>
            Handles warhead related events.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Warhead.Stopping">
            <summary>
            Invoked before stopping the warhead.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Warhead.Starting">
            <summary>
            Invoked before starting the warhead.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Warhead.ChangingLeverStatus">
            <summary>
            Invoked before changing the warhead lever status.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Warhead.Detonated">
            <summary>
            Invoked after the warhead has been detonated.
            </summary>
        </member>
        <member name="P:Exiled.Events.Handlers.Warhead.Detonating">
            <summary>
            Invoked before detonating the warhead.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnStopping(Exiled.Events.EventArgs.Warhead.StoppingEventArgs)">
            <summary>
            Called before stopping the warhead.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Warhead.StoppingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnStarting(Exiled.Events.EventArgs.Warhead.StartingEventArgs)">
            <summary>
            Called before starting the warhead.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Warhead.StartingEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnChangingLeverStatus(Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs)">
            <summary>
            Called before changing the warhead lever status.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Warhead.ChangingLeverStatusEventArgs" /> instance.</param>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnDetonated">
            <summary>
            Called after the warhead has been detonated.
            </summary>
        </member>
        <member name="M:Exiled.Events.Handlers.Warhead.OnDetonating(Exiled.Events.EventArgs.Warhead.DetonatingEventArgs)">
            <summary>
            Called before detonating the warhead.
            </summary>
            <param name="ev">The <see cref="T:Exiled.Events.EventArgs.Warhead.DetonatingEventArgs"/> instance.</param>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Cassie.SendingCassieMessage">
            <summary>
            Patches <see cref="M:Respawning.RespawnEffectsController.PlayCassieAnnouncement(System.String,System.Boolean,System.Boolean,System.Boolean)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Cassie.SendingCassieMessage" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Item.ChangingAmmo">
            <summary>
            Patches <see cref="P:InventorySystem.Items.Firearms.Firearm.Status" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Item.ChangingAmmo" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Item.ChangingAttachments">
            <summary>
            Patches
            <see cref="M:InventorySystem.Items.Firearms.Attachments.AttachmentsServerHandler.ServerReceiveChangeRequest(Mirror.NetworkConnection,InventorySystem.Items.Firearms.Attachments.AttachmentsChangeRequest)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Item.ChangingAttachments" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Item.JailbirdPatch">
            <summary>
            Patches
            <see cref="M:InventorySystem.Items.Jailbird.JailbirdItem.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Item.Swinging" /> event and <see cref="P:Exiled.Events.Handlers.Item.ChargingJailbird" />.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Events.Item.JailbirdPatch.HandleJailbird(InventorySystem.Items.Jailbird.JailbirdItem,InventorySystem.Items.Jailbird.JailbirdMessageType)">
            <summary>
            Processes Jailbird statuses.
            </summary>
            <param name="instance"> <see cref="T:InventorySystem.Items.Jailbird.JailbirdItem"/> instance. </param>
            <param name="messageType"> <see cref="T:InventorySystem.Items.Jailbird.JailbirdMessageType"/> type. </param>
            <returns> <see cref="T:System.Boolean"/>. </returns>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Item.KeycardInteracting">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Keycards.KeycardPickup.ProcessCollision(UnityEngine.Collision)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.InteractingDoor"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Item.ReceivingPreference">
            <summary>
            Patches
            <see cref="M:InventorySystem.Items.Firearms.Attachments.AttachmentsServerHandler.ServerReceivePreference(Mirror.NetworkConnection,InventorySystem.Items.Firearms.Attachments.AttachmentsSetupPreference)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Item.ReceivingPreference" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Item.UsingRadioPickupBattery">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Radio.RadioPickup.LateUpdate"/>
            to add <see cref="P:Exiled.Events.Handlers.Item.UsingRadioPickupBattery"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingDecontamination">
            <summary>
            Patches <see cref="M:LightContainmentZoneDecontamination.DecontaminationController.UpdateSpeaker(System.Boolean)" />.
            Adds the <see cref="T:Exiled.Events.Patches.Events.Map.AnnouncingDecontamination" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingNtfEntrance">
            <summary>
            Patch the <see cref="M:Respawning.NamingRules.NineTailedFoxNamingRule.PlayEntranceAnnouncement(System.String)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.AnnouncingNtfEntrance" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.AnnouncingScpTermination">
            <summary>
            Patches
            <see cref="M:NineTailedFoxAnnouncer.AnnounceScpTermination(ReferenceHub,PlayerStatsSystem.DamageHandlerBase)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.AnnouncingScpTermination" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.BreakingScp2176">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.Scp2176Projectile.ServerShatter" />.
            Supplements the <see cref="P:Exiled.Events.Handlers.Map.ExplodingGrenade" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.ChangingIntoGrenade">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.TimedGrenadePickup.Update" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.ChangingIntoGrenade" /> and <see cref="P:Exiled.Events.Handlers.Map.ChangedIntoGrenade" /> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.Decontaminating">
            <summary>
            Patches <see cref="M:LightContainmentZoneDecontamination.DecontaminationController.FinishDecontamination" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.Decontaminating" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.ExplodingFlashGrenade">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.FlashbangGrenade.ServerFuseEnd"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.ExplodingGrenade"/> event and <see cref="P:Exiled.Events.Config.CanFlashbangsAffectThrower"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.ExplodingFragGrenade">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade.Explode(Footprinting.Footprint,UnityEngine.Vector3,InventorySystem.Items.ThrowableProjectiles.ExplosionGrenade)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.ExplodingGrenade"/> event.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Events.Map.ExplodingFragGrenade.TrimColliders(Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs,UnityEngine.Collider[])">
            <summary>
            Trims colliders from the given array.
            </summary>
            <param name="ev"><inheritdoc cref="T:Exiled.Events.EventArgs.Map.ExplodingGrenadeEventArgs"/></param>
            <param name="colliderArray">The list of colliders to trim from.</param>
            <returns>An array of colliders.</returns>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.FillingLocker">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.LockerChamber.SpawnItem(ItemType,System.Int32)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.FillingLocker" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.GeneratorActivating">
            <summary>
            Patches <see cref="P:MapGeneration.Distributors.Scp079Generator.Engaged" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.GeneratorActivating" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.PlacingBlood">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Modules.StandardHitregBase.PlaceBloodDecal(UnityEngine.Ray,UnityEngine.RaycastHit,IDestructible)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.PlacingBlood"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.PlacingBulletHole">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Modules.StandardHitregBase.PlaceBulletholeDecal(UnityEngine.Ray,UnityEngine.RaycastHit)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.PlacingBulletHole" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.SpawningItem">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.ItemDistributor.SpawnPickup(InventorySystem.Items.Pickups.ItemPickupBase)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.SpawningItem" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.SpawningTeamVehicle">
            <summary>
            Patches <see cref="M:Respawning.RespawnEffectsController.ExecuteAllEffects(Respawning.RespawnEffectsController.EffectType,Respawning.SpawnableTeamType)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.SpawningTeamVehicle"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Map.TurningOffLights">
            <summary>
            Patches <see cref="M:RoomLightController.ServerFlickerLights(System.Single)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Map.TurningOffLights"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ActivatingWarheadPanel">
            <summary>
            Patch the <see cref="M:PlayerInteract.UserCode_CmdSwitchAWButton" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ActivatingWarheadPanel" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ActivatingWorkstation">
            <summary>
            Patch the <see cref="M:InventorySystem.Items.Firearms.Attachments.WorkstationController.ServerInteract(ReferenceHub,System.Byte)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ActivatingWorkstation" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Banned">
            <summary>
            Patches <see cref="M:BanHandler.IssueBan(BanDetails,BanHandler.BanType,System.Boolean)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Banned" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Banning">
            <summary>
            Patches <see cref="M:BanPlayer.BanUser(Footprinting.Footprint,CommandSystem.ICommandSender,System.String,System.Int64)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Banning" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangedItem">
            <summary>
            Patches <see cref="P:InventorySystem.Inventory.CurInstance" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ChangedItem" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingGroup">
            <summary>
            Patches <see cref="M:ServerRoles.SetGroup(UserGroup,System.Boolean,System.Boolean)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ChangingGroup" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingItem">
            <summary>
            Patches <see cref="P:InventorySystem.Inventory.CurInstance" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ChangingItem" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingMicroHIDState">
            <summary>
            Patches <see cref="M:InventorySystem.Items.MicroHID.MicroHIDItem.ServerSendStatus(InventorySystem.Items.MicroHID.HidStatusMessageType,System.Byte)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ChangingMicroHIDState"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingMoveState">
            <summary>
            Patches <see cref="P:PlayerRoles.FirstPersonControl.FirstPersonMovementModule.SyncMovementState" /> setter.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ChangingMoveState" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingNickname">
            <summary>
            Patches <see cref="M:NicknameSync.set_Network_displayName(System.String)"/> to add the <see cref="P:Exiled.Events.Handlers.Player.ChangingNickname"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingRadioPreset">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Radio.RadioItem.ServerProcessCmd(InventorySystem.Items.Radio.RadioMessages.RadioCommand)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ChangingRadioPreset" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingRoleAndSpawned">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayerRoleManager.InitializeNewRole(PlayerRoles.RoleTypeId,PlayerRoles.RoleChangeReason,PlayerRoles.RoleSpawnFlags,Mirror.NetworkReader)" />
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ChangingRole" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ChangingSpectatedPlayerPatch">
            <summary>
            Patches <see cref="P:PlayerRoles.Spectating.SpectatorRole.SyncedSpectatedNetId" /> setter.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ChangingSpectatedPlayer" />.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DamagingDoor">
            <summary>
            Patch the <see cref="M:Interactables.Interobjects.BreakableDoor.ServerDamage(System.Single,Interactables.Interobjects.DoorUtils.DoorDamageType)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.DamagingDoor" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DamagingShootingTarget">
            <summary>
            Patches <see cref="M:AdminToys.ShootingTarget.Damage(System.Single,PlayerStatsSystem.DamageHandlerBase,UnityEngine.Vector3)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.DamagingShootingTarget" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DamagingWindow">
            <summary>
            Patch the <see cref="M:BreakableWindow.Damage(System.Single,PlayerStatsSystem.DamageHandlerBase,UnityEngine.Vector3)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.PlayerDamageWindow" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DeactivatingWorkstation">
            <summary>
            Patch the <see cref="P:InventorySystem.Items.Firearms.Attachments.WorkstationController.NetworkStatus" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.DeactivatingWorkstation" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Destroying">
            <summary>
            Patch the <see cref="M:ReferenceHub.OnDestroy" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Destroying" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DroppingAmmo">
            <summary>
            Patches <see cref="M:InventorySystem.Inventory.UserCode_CmdDropAmmo__Byte__UInt16(System.Byte,System.UInt16)" />.
            <br>Adds the <see cref="P:Exiled.Events.Handlers.Player.DroppingAmmo" /> and <see cref="P:Exiled.Events.Handlers.Player.DroppedAmmo" /> events.</br>
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DroppingItem">
            <summary>
            Patches <see cref="M:InventorySystem.Inventory.UserCode_CmdDropItem__UInt16__Boolean(System.UInt16,System.Boolean)" />.
            <br>Adds the <see cref="P:Exiled.Events.Handlers.Player.DroppingItem" />, <see cref="P:Exiled.Events.Handlers.Player.DroppingNothing" /> and <see cref="P:Exiled.Events.Handlers.Player.DroppedItem"/> events.</br>
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.DyingAndDied">
            <summary>
            Patches <see cref="M:PlayerStatsSystem.PlayerStats.KillPlayer(PlayerStatsSystem.DamageHandlerBase)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Dying" /> and <see cref="P:Exiled.Events.Handlers.Player.Died" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EarningAchievement">
            <summary>
            Patch the <see cref="M:Achievements.AchievementHandlerBase.ServerAchieve(Mirror.NetworkConnection,Achievements.AchievementName)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.EarningAchievement"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EnteringKillerCollision">
            <summary>
            Patches <see cref="M:CheckpointKiller.OnTriggerEnter(UnityEngine.Collider)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.EnteringKillerCollision"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EnteringPocketDimension">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106Attack.ServerShoot" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.EnteringPocketDimension" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EnteringSinkholeEnvironmentalHazard">
            <summary>
            Patches <see cref="M:Hazards.SinkholeEnvironmentalHazard.OnEnter(ReferenceHub)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.EnteringEnvironmentalHazard"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EnteringTantrumEnvironmentalHazard">
            <summary>
            Patches <see cref="M:Hazards.TantrumEnvironmentalHazard.OnEnter(ReferenceHub)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.EnteringEnvironmentalHazard"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Escaping">
            <summary>
            Patches <see cref="M:Escape.ServerHandlePlayer(ReferenceHub)"/> for <see cref="P:Exiled.Events.Handlers.Player.Escaping" />.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.GetScenario">
            <summary>
            Patches <see cref="M:Escape.ServerGetScenario(ReferenceHub)"/> for <see cref="P:Exiled.Events.Handlers.Player.Escaping"/>.
            Replaces last returned <see cref="F:Exiled.API.Enums.EscapeScenario.None"/> to <see cref="F:Exiled.API.Enums.EscapeScenario.CustomEscape"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.EscapingPocketDimension">
            <summary>
            Patches the <see cref="M:PocketDimensionTeleport.OnTriggerEnter(UnityEngine.Collider)"/> method.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.EscapingPocketDimension"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ExitingSinkholeEnvironmentalHazard">
            <summary>
            Patches <see cref="M:Hazards.SinkholeEnvironmentalHazard.OnExit(ReferenceHub)"/> with <see cref="T:Hazards.SinkholeEnvironmentalHazard"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ExitingEnvironmentalHazard"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ExitingTantrumEnvironmentalHazard">
            <summary>
            Patches <see cref="M:Hazards.TantrumEnvironmentalHazard.OnExit(ReferenceHub)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ExitingEnvironmentalHazard"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.FailingEscapePocketDimension">
            <summary>
            Patches <see cref="M:PocketDimensionTeleport.OnTriggerEnter(UnityEngine.Collider)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.FailingEscapePocketDimension" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.FirearmRequestReceived">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.BasicMessages.FirearmBasicMessagesHandler.ServerRequestReceived(Mirror.NetworkConnection,InventorySystem.Items.Firearms.BasicMessages.RequestMessage)" />.
            Adds <see cref="P:Exiled.Events.Handlers.Player.ReloadingWeapon" />, <see cref="P:Exiled.Events.Handlers.Player.UnloadingWeapon" />,
            <see cref="P:Exiled.Events.Handlers.Player.DryfiringWeapon" />, <see cref="P:Exiled.Events.Handlers.Player.AimingDownSight" /> and
            <see cref="P:Exiled.Events.Handlers.Player.TogglingWeaponFlashlight" /> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.FlippingCoin">
            <summary>
            Patches
            <see cref="M:InventorySystem.Items.Coin.Coin.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.FlippingCoin" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Hurting">
            <summary>
            Patches <see cref="M:PlayerStatsSystem.PlayerStats.DealDamage(PlayerStatsSystem.DamageHandlerBase)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Hurting" /> event and <see cref="P:Exiled.Events.Handlers.Player.Hurt" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Interacted">
            <summary>
            Patches <see cref="M:PlayerInteract.OnInteract" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Interacted" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingDoor">
            <summary>
            Patches <see cref="M:Interactables.Interobjects.DoorUtils.DoorVariant.ServerInteract(ReferenceHub,System.Byte)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.InteractingDoor" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingElevator">
            <summary>
            Patches <see cref="M:Interactables.Interobjects.ElevatorManager.ServerReceiveMessage(Mirror.NetworkConnection,Interactables.Interobjects.ElevatorManager.ElevatorSyncMsg)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.InteractingElevator" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingGenerator">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.Scp079Generator.ServerInteract(ReferenceHub,System.Byte)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ActivatingGenerator"/>, <see cref="P:Exiled.Events.Handlers.Player.ClosingGenerator"/>, <see cref="P:Exiled.Events.Handlers.Player.OpeningGenerator"/>, <see cref="P:Exiled.Events.Handlers.Player.UnlockingGenerator"/> and <see cref="P:Exiled.Events.Handlers.Player.StoppingGenerator"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingLocker">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.Locker.ServerInteract(ReferenceHub,System.Byte)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.InteractingLocker" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingShootingTarget">
            <summary>
            Patches <see cref="M:AdminToys.ShootingTarget.ServerInteract(ReferenceHub,System.Byte)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.InteractingShootingTarget" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.InteractingSnowpile">
            <summary>
            Patches <see cref="M:Snowpile.ServerInteract(ReferenceHub,System.Byte)"/>
            to add <see cref="P:Exiled.Events.Handlers.Player.InteractingSnowpile"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.IntercomSpeaking">
            <summary>
            Patches <see cref="M:PlayerRoles.Voice.Intercom.Update" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.IntercomSpeaking" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.IssuingMute">
            <summary>
            Patch the <see cref="M:VoiceChat.VoiceChatMutes.IssueLocalMute(System.String,System.Boolean)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.IssuingMute" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Joined">
            <summary>
            Patches <see cref="M:ReferenceHub.Start" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Joined" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Jumping">
            <summary>
            Patches <see cref="M:PlayerRoles.FirstPersonControl.FpcMotor.UpdateGrounded(System.Boolean@,System.Single)" />
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Jumping" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Kicked">
            <summary>
            Patches <see cref="M:ServerConsole.Disconnect(UnityEngine.GameObject,System.String)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Kicked" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Kicking">
            <summary>
            Patches <see cref="M:BanPlayer.KickUser(ReferenceHub,CommandSystem.ICommandSender,System.String)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Kicking" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Landing">
            <summary>
            Patches <see cref="M:PlayerRoles.FirstPersonControl.Thirdperson.AnimatedCharacterModel.OnGrounded" />
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Landing" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Left">
            <summary>
            Patches <see cref="M:CustomNetworkManager.OnServerDisconnect(Mirror.NetworkConnectionToClient)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Left" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.MakingNoise">
            <summary>
            Patches <see cref="M:PlayerRoles.FirstPersonControl.Thirdperson.AnimatedCharacterModel.PlayFootstep"/>
            to add <see cref="P:Exiled.Events.Handlers.Player.MakingNoise"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUp330">
            <summary>
            Patches the <see cref="M:InventorySystem.Items.Usables.Scp330.Scp330Bag.ServerProcessPickup(ReferenceHub,InventorySystem.Items.Usables.Scp330.Scp330Pickup,InventorySystem.Items.Usables.Scp330.Scp330Bag@)" /> method to add the
            <see cref="P:Exiled.Events.Handlers.Player.PickingUpItem" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUpAmmo">
            <summary>
            Patches <see cref="M:InventorySystem.Searching.AmmoSearchCompletor.Complete" /> for the <see cref="P:Exiled.Events.Handlers.Player.PickingUpItem" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUpArmor">
            <summary>
            Patches the <see cref="M:InventorySystem.Searching.ArmorSearchCompletor.Complete" /> method to add the
            <see cref="P:Exiled.Events.Handlers.Player.PickingUpItem" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUpItem">
            <summary>
            Patches <see cref="M:InventorySystem.Searching.ItemSearchCompletor.Complete" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.PickingUpItem" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.PickingUpScp244">
            <summary>
            Patches <see cref="T:InventorySystem.Searching.Scp244SearchCompletor" /> to add missing event handler to the
            <see cref="P:Exiled.Events.Handlers.Player.PickingUpItem" />.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ProcessDisarmMessage">
            <summary>
            Patches <see cref="M:InventorySystem.Disarming.DisarmingHandlers.ServerProcessDisarmMessage(Mirror.NetworkConnection,InventorySystem.Disarming.DisarmMessage)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Handcuffing" /> and <see cref="P:Exiled.Events.Handlers.Player.RemovingHandcuffs" /> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ReceivingStatusEffect">
            <summary>
            Patches the <see cref="P:CustomPlayerEffects.StatusEffectBase.Intensity"/> method.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ReceivingEffect"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ReservedSlotPatch">
            <summary>
            Patches <see cref="M:ReservedSlot.HasReservedSlot(System.String,System.Boolean@)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ReservedSlot" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.RevokingMute">
            <summary>
            Patch the <see cref="M:VoiceChat.VoiceChatMutes.RevokeLocalMute(System.String,System.Boolean)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.RevokingMute" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.SearchingPickupEvent">
            <summary>
            Patches <see cref="M:InventorySystem.Searching.SearchCoordinator.ReceiveRequestUnsafe(System.Nullable{InventorySystem.Searching.SearchSession}@,InventorySystem.Searching.SearchCompletor@)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.SearchingPickup" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.SendingAdminChatMessage">
            <summary>
            Patches <see cref="M:RemoteAdmin.CommandProcessor.ProcessAdminChat(System.String,CommandSender)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.SendingAdminChatMessage" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Shooting">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.BasicMessages.FirearmBasicMessagesHandler.ServerShotReceived(Mirror.NetworkConnection,InventorySystem.Items.Firearms.BasicMessages.ShotMessage)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Shooting" /> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Shot">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Modules.SingleBulletHitreg.ServerProcessRaycastHit(UnityEngine.Ray,UnityEngine.RaycastHit)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Shot" /> events.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Events.Player.Shot.ProcessShot(ReferenceHub,InventorySystem.Items.Firearms.Firearm,UnityEngine.RaycastHit,IDestructible,System.Single@)">
            <summary>
            Process shot.
            </summary>
            <param name="player">The player.</param>
            <param name="firearm">The firearm.</param>
            <param name="hit">The raycast hit.</param>
            <param name="destructible">The destructible.</param>
            <param name="damage">The damage.</param>
            <returns>If the shot is allowed.</returns>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ShotBuckshot">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Modules.BuckshotHitreg.ShootPellet(UnityEngine.Vector2,UnityEngine.Ray,UnityEngine.Vector2)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Shot" /> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ShotDisruptor">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Modules.DisruptorHitreg.ServerPerformShot(UnityEngine.Ray)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Shot" /> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Spawning">
            <summary>
            Patches <see cref="M:PlayerRoles.FirstPersonControl.Spawnpoints.RoleSpawnpointManager.Init"/> delegate.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Spawning"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.SpawningRagdoll">
            <summary>
            Patches <see cref="M:PlayerRoles.Ragdolls.RagdollManager.ServerSpawnRagdoll(ReferenceHub,PlayerStatsSystem.DamageHandlerBase)" />.
            <br>Adds the <see cref="P:Exiled.Events.Handlers.Player.SpawningRagdoll" /> and <see cref="P:Exiled.Events.Handlers.Player.SpawnedRagdoll"/> events.</br>
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.StayingOnEnvironmentalHazard">
            <summary>
            Patches <see cref="M:Hazards.EnvironmentalHazard.OnStay(ReferenceHub)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.StayingOnEnvironmentalHazard"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.StayingOnSinkholeEnvironmentalHazard">
            <summary>
            Patches <see cref="T:Hazards.SinkholeEnvironmentalHazard"/>.
            <br>Adds the <see cref="P:Exiled.Events.Handlers.Player.StayingOnEnvironmentalHazard"/> event.</br>
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.StayingOnTantrumEnvironmentalHazard">
            <summary>
            Patches <see cref="T:Hazards.TantrumEnvironmentalHazard"/>.
            <br>Adds the <see cref="P:Exiled.Events.Handlers.Player.StayingOnEnvironmentalHazard"/> event.</br>
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ThrowingRequest">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.ThrowableNetworkHandler.ServerProcessRequest(Mirror.NetworkConnection,InventorySystem.Items.ThrowableProjectiles.ThrowableNetworkHandler.ThrowableItemRequestMessage)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ThrowingRequest" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.ThrownProjectile">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.ThrowableItem.ServerThrow(System.Single,System.Single,UnityEngine.Vector3,UnityEngine.Vector3)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.ThrownProjectile"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.TogglingFlashlight">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ToggleableLights.FlashlightNetworkHandler.ServerProcessMessage(Mirror.NetworkConnection,InventorySystem.Items.ToggleableLights.FlashlightNetworkHandler.FlashlightMessage)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.TogglingFlashlight" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.TogglingNoClip">
            <summary>
            patches <see cref="P:PlayerRoles.FirstPersonControl.FpcNoclip.IsActive" /> to add the
            <see cref="P:Exiled.Events.Handlers.Player.TogglingNoClip" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.TogglingOverwatch">
            <summary>
            patches <see cref="M:CommandSystem.Commands.RemoteAdmin.OverwatchCommand.SetOverwatchStatus(ServerRoles,System.Byte)"/> to add the <see cref="P:Exiled.Events.Handlers.Player.TogglingOverwatch"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.TogglingRadio">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Radio.RadioItem.ServerProcessCmd(InventorySystem.Items.Radio.RadioMessages.RadioCommand)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.TogglingRadio" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.TriggeringTesla">
            <summary>
            Patches <see cref="M:TeslaGateController.FixedUpdate" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.TriggeringTesla" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsingAndCancellingItemUse">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.UsableItemsController.ServerReceivedStatus(Mirror.NetworkConnection,InventorySystem.Items.Usables.StatusMessage)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.UsingItem" /> event,
            <see cref="P:Exiled.Events.Handlers.Player.CancellingItemUse" /> event and
            <see cref="P:Exiled.Events.Handlers.Player.CancelledItemUse" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsingItemCompleted">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.UsableItemsController.Update" />
            Adds the <see cref="P:Exiled.Events.Handlers.Player.UsedItem" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsingMicroHIDEnergy">
            <summary>
            Patches <see cref="M:InventorySystem.Items.MicroHID.MicroHIDItem.ExecuteServerside" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.UsingMicroHIDEnergy" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.UsingRadioBattery">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Radio.RadioItem.Update" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.UsingRadioBattery" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.Verified">
            <summary>
            Patches <see cref="M:CentralAuth.PlayerAuthenticationManager.FinalizeAuthentication" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Verified" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.VoiceChatting">
            <summary>
            Patches <see cref="M:VoiceChat.Networking.VoiceTransceiver.ServerReceiveMessage(Mirror.NetworkConnection,VoiceChat.Networking.VoiceMessage)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.VoiceChatting"/> event.
            Adds the <see cref="P:Exiled.Events.Handlers.Player.Transmitting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Player.HurtingFix">
            <summary>
            Patches <see cref="M:CustomNetworkManager.OnServerDisconnect(Mirror.NetworkConnectionToClient)" />.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp0492.Consumed">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieConsumeAbility.ServerComplete"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp0492.ConsumedCorpse" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp0492.Consuming">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.RagdollAbilityBase`1.ServerProcessCmd(Mirror.NetworkReader)"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp0492.ConsumingCorpse" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp0492.TriggeringBloodlustEvent">
            <summary>
            Patches the <see cref="M:PlayerRoles.PlayableScps.Scp049.Zombies.ZombieBloodlustAbility.AnyTargets(ReferenceHub,UnityEngine.Transform)"/> method to add the <see cref="P:Exiled.Events.Handlers.Scp0492.TriggeringBloodlust"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp049.ActivatingSense">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp049.ActivatingSense" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp049.Attacking">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049AttackAbility.ServerProcessCmd(Mirror.NetworkReader)"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp049.Attacking"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp049.FinishingRecall">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049ResurrectAbility.ServerComplete" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp049.FinishingRecall" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp049.SendingCall">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049CallAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp049.SendingCall" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp049.StartingRecall">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049ResurrectAbility.ServerValidateBegin(PlayerRoles.Ragdolls.BasicRagdoll)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp049.StartingRecall" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.ChangingCamera">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Cameras.Scp079CurrentCameraSync.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.ChangingCamera" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.ChangingSpeakerStatusAndVoiceChatting">
            <summary>
            Patches Scp079VoiceModule.ServerIsSending />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.ChangingSpeakerStatus" /> and the <see cref="P:Exiled.Events.Handlers.Player.VoiceChatting"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.ElevatorTeleporting">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079ElevatorStateChanger.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.ElevatorTeleporting" /> event for SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.GainingExperience">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079TierManager.ServerGrantExperience(System.Int32,PlayerRoles.PlayableScps.Scp079.Scp079HudTranslation,PlayerRoles.RoleTypeId)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.GainingExperience" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.GainingLevel">
            <summary>
            Patches <see cref="P:PlayerRoles.PlayableScps.Scp079.Scp079TierManager.AccessTierIndex" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.GainingLevel" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.InteractingTesla">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079TeslaAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.InteractingTesla" /> event for SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.LockingDown">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079LockdownRoomAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.LockingDown" /> event for SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.Pinging">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Pinging.Scp079PingAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.Pinging" /> event for  SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.RoomBlackout">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079BlackoutRoomAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.RoomBlackout" /> event for SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.TriggeringDoor">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079DoorStateChanger.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.TriggeringDoor" /> event for  SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp079.ZoneBlackout">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079BlackoutZoneAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp079.ZoneBlackout" /> event for  SCP-079.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.AddingTarget">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp096.Scp096TargetsTracker.AddTarget(ReferenceHub,System.Boolean)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp096.AddingTarget" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.CalmingDown">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp096.Scp096RageManager.ServerEndEnrage(System.Boolean)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp096.CalmingDown" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.Charging">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp096.Scp096ChargeAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp096.Charging" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.Enraging">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp096.Scp096RageManager.ServerEnrage(System.Single)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp096.Enraging" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.StartPryingGate">
            <summary>
            Patches the <see cref="M:PlayerRoles.PlayableScps.Scp096.Scp096PrygateAbility.ServerProcessCmd(Mirror.NetworkReader)" /> method.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp096.StartPryingGate" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp096.TryingNotToCry">
            <summary>
            Patches the <see cref="M:PlayerRoles.PlayableScps.Scp096.Scp096TryNotToCryAbility.ServerProcessCmd(Mirror.NetworkReader)" /> method.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp096.TryingNotToCry" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.Attacking">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106Attack.ServerShoot"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp106.Attacking"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.ExitStalking">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106StalkAbility.ServerProcessCmd(Mirror.NetworkReader)"/>.
            To add the <see cref="P:Exiled.Events.Handlers.Scp106.ExitStalking"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.Stalking">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106StalkAbility.ServerProcessCmd(Mirror.NetworkReader)"/>.
            To add the <see cref="P:Exiled.Events.Handlers.Scp106.Stalking"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp106.Teleporting">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106HuntersAtlasAbility.GetSafePosition" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp106.Teleporting" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp1507.AttackingDoor">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp1507.Scp1507AttackAbility.TryAttackDoor"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp1507.AttackingDoor"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp1507.Scream">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp1507.Scp1507VocalizeAbility.ServerProcessCmd(Mirror.NetworkReader)"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp1507.Screaming"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp1507.SpawningFlamingos">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp1507.Scp1507Spawner.Spawn"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp1507.SpawningFlamingos"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp173.Blinking">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp173.Scp173BlinkTimer.ServerBlink(UnityEngine.Vector3)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp173.Blinking" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp173.BlinkingRequest">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp173.Scp173TeleportAbility.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp173.BlinkingRequest" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp173.PlacingTantrum">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp173.Scp173TantrumAbility.ServerProcessCmd(Mirror.NetworkReader)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp173.PlacingTantrum"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp173.UsingBreakneckSpeeds">
            <summary>
            Patches <see cref="P:PlayerRoles.PlayableScps.Scp173.Scp173BreakneckSpeedsAbility.IsActive" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp173.UsingBreakneckSpeeds" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp244.DamagingScp244">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup.Damage(System.Single,PlayerStatsSystem.DamageHandlerBase,UnityEngine.Vector3)" /> to add missing logic to the
            <see cref="P:Exiled.Events.Handlers.Scp244.DamagingScp244" />.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp244.UpdateScp244">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.Scp244.Scp244DeployablePickup.UpdateRange" /> to add missing event handler to the
            <see cref="P:Exiled.Events.Handlers.Scp244.OpeningScp244" />.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp244.UsingScp244">
            <summary>
            Patches <see cref="T:InventorySystem.Items.Usables.Scp244.Scp244Item" /> to add missing event handler to the
            <see cref="P:Exiled.Events.Handlers.Scp244.UsingScp244" />.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp2536.FindingPosition">
            <summary>
            Patches <see cref="M:Christmas.Scp2536.Scp2536Controller.CanFindPosition(ReferenceHub,Christmas.Scp2536.Scp2536Spawnpoint@)"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp2536.FindingPosition"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp2536.GrantingGift">
            <summary>
            Patches <see cref="M:Christmas.Scp2536.Scp2536GiftController.GrantGift(Christmas.Scp2536.Scp2536GiftBase,ReferenceHub)"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp2536.GrantingGift"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp3114.Disguising">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp3114.Scp3114Disguise.ServerComplete" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp3114.Disguising" /> and <see cref="P:Exiled.Events.Handlers.Scp3114.Disguised" /> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp3114.Revealing">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp3114.Scp3114Identity.Update" /> setter.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp3114.Revealed" /> and <see cref="P:Exiled.Events.Handlers.Scp3114.Revealing" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp3114.RevealingKey">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp3114.Scp3114Reveal.ServerProcessCmd(Mirror.NetworkReader)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp3114.Revealed" /> and <see cref="P:Exiled.Events.Handlers.Scp3114.Revealing" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp3114.TryUseBody">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp3114.Scp3114Disguise.OnProgressSet" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp3114.TryUseBody" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp3114.VoiceLines">
            <summary>
                Patches <see cref="M:PlayerRoles.PlayableScps.Scp3114.Scp3114VoiceLines.ServerPlayConditionally(PlayerRoles.PlayableScps.Scp3114.Scp3114VoiceLines.VoiceLinesName)" />.
                Adds the <see cref="P:Exiled.Events.Handlers.Scp3114.VoiceLines" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp330.DroppingCandy">
            <summary>
            Patches the <see cref="M:InventorySystem.Items.Usables.Scp330.Scp330NetworkHandler.ServerSelectMessageReceived(Mirror.NetworkConnection,InventorySystem.Items.Usables.Scp330.SelectScp330Message)" /> method to add the
            <see cref="P:Exiled.Events.Handlers.Scp330.DroppingScp330" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp330.EatingScp330">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Usables.Scp330.Scp330Bag.ServerOnUsingCompleted" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp330.EatingScp330" /> and <see cref="P:Exiled.Events.Handlers.Scp330.EatenScp330" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp330.InteractingScp330">
            <summary>
            Patches the <see cref="M:Interactables.Interobjects.Scp330Interobject.ServerInteract(ReferenceHub,System.Byte)" /> method to add the
            <see cref="P:Exiled.Events.Handlers.Scp330.InteractingScp330" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp559.Interacting">
            <summary>
            Patches <see cref="M:Scp559Cake.ServerInteract(ReferenceHub,System.Byte)"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp559.Interacting"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp559.Spawning">
            <summary>
            Patches <see cref="M:Scp559Cake.SetPosition(UnityEngine.Vector3,UnityEngine.Vector3)"/>
            to add <see cref="P:Exiled.Events.Handlers.Scp559.Spawning"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.InteractingEvents">
            <summary>
            Patches <see cref="M:Scp914.Scp914Controller.ServerInteract(ReferenceHub,System.Byte)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp914.Activating" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.UpgradingItem">
            <summary>
            Patches <see cref="M:Scp914.Scp914Upgrader.ProcessPickup(InventorySystem.Items.Pickups.ItemPickupBase,System.Boolean,UnityEngine.Vector3,Scp914.Scp914KnobSetting)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Scp914.UpgradingPickup" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp914.UpgradingPlayer">
            <summary>
            Patches <see cref="M:Scp914.Scp914Upgrader.ProcessPlayer(ReferenceHub,System.Boolean,System.Boolean,UnityEngine.Vector3,Scp914.Scp914KnobSetting)" />
            to add the <see cref="P:Exiled.Events.Handlers.Scp914.UpgradingPlayer" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp939.Clawed">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp939.Scp939ClawAbility.ServerProcessCmd(Mirror.NetworkReader)"/>
            to add <see cref="T:Exiled.Events.Patches.Events.Scp939.Clawed"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp939.Focus">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp939.Scp939FocusKeySync.ServerProcessCmd(Mirror.NetworkReader)" />
            to add the <see cref="P:Exiled.Events.Handlers.Scp939.ChangingFocus" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp939.Lunge">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp939.Scp939LungeAbility.ServerProcessCmd(Mirror.NetworkReader)" />
            to add the <see cref="P:Exiled.Events.Handlers.Scp939.Lunging" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp939.PlacingAmnesticCloud">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudAbility.ServerProcessCmd(Mirror.NetworkReader)" />
            to add the <see cref="P:Exiled.Events.Handlers.Scp939.PlacingAmnesticCloud" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp939.PlayingSound">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp939.Scp939AmnesticCloudAbility.ServerProcessCmd(Mirror.NetworkReader)" />
            to add the <see cref="P:Exiled.Events.Handlers.Scp939.PlayingSound" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp939.PlayingVoice">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp939.Mimicry.MimicryRecorder.ServerProcessCmd(Mirror.NetworkReader)" />
            to add the <see cref="P:Exiled.Events.Handlers.Scp939.PlayingVoice" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp939.SavingVoice">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp939.Mimicry.MimicryRecorder.OnAnyPlayerKilled(ReferenceHub,PlayerStatsSystem.DamageHandlerBase)" />
            to add the <see cref="P:Exiled.Events.Handlers.Scp939.SavingVoice" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Scp939.ValidatingVisibility">
            <summary>
                Patches <see cref="M:PlayerRoles.PlayableScps.Scp939.Scp939VisibilityController.ValidateVisibility(ReferenceHub)" />
                to add the <see cref="T:Exiled.Events.Patches.Events.Scp939.ValidatingVisibility" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.AddingUnitName">
            <summary>
            Patches <see cref="M:Respawning.NamingRules.UnitNameMessageHandler.SendNew(Respawning.SpawnableTeamType,Respawning.NamingRules.UnitNamingRule)"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Server.AddingUnitName"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.ChoosingStartTeamQueue">
            <summary>
            Patches <see cref="M:PlayerRoles.RoleAssign.RoleAssigner.OnRoundStarted" /> setter.
            Adds the <see cref="P:Exiled.Events.Handlers.Server.ChoosingStartTeamQueue" />.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.Reporting">
            <summary>
            Patches CheaterReport.UserCode_CmdReport__UInt32__String__Byte\u005B\u005D__Boolean(uint, string, byte[], bool) />.
            Adds the <see cref="P:Exiled.Events.Handlers.Server.ReportingCheater" /> and <see cref="P:Exiled.Events.Handlers.Server.LocalReporting" /> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RespawningTeam">
            <summary>
            Patch the <see cref="M:Respawning.RespawnManager.Spawn" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Server.RespawningTeam" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RestartingRound">
            <summary>
            Patches <see cref="M:RoundRestarting.RoundRestart.InitiateRoundRestart"/>.
            Adds the <see cref="P:Exiled.Events.Handlers.Server.RestartingRound" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.RoundEnd">
            <summary>
            Patches <see cref="M:RoundSummary._ProcessServerSideCode" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Server.EndingRound" /> and <see cref="P:Exiled.Events.Handlers.Server.RoundEnded" /> event.
            Adds the <see cref="P:Exiled.API.Features.Round.IgnoredPlayers" /> Propperty.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Server.SelectingRespawnTeam">
            <summary>
            Patches <see cref="M:Respawning.RespawnManager.Update"/> to add the <see cref="P:Exiled.Events.Handlers.Server.SelectingRespawnTeam"/> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.ChangingLeverStatus">
            <summary>
            Patches <see cref="M:PlayerInteract.UserCode_CmdUsePanel__AlphaPanelOperations(PlayerInteract.AlphaPanelOperations)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Warhead.ChangingLeverStatus" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Detonation">
            <summary>
            Patches <see cref="M:AlphaWarheadController.Detonate" />
            to add <see cref="P:Exiled.Events.Handlers.Warhead.Detonating"/> and <see cref="P:Exiled.Events.Handlers.Warhead.Detonated"/> events.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Starting">
            <summary>
            Patch the <see cref="M:AlphaWarheadController.StartDetonation(System.Boolean,System.Boolean,ReferenceHub)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Warhead.Starting" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Events.Warhead.Stopping">
            <summary>
            Patches <see cref="M:AlphaWarheadController.CancelDetonation(ReferenceHub)" />.
            Adds the <see cref="P:Exiled.Events.Handlers.Warhead.Stopping" /> event.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.FixPickupPreviousOwner">
            <summary>
            Patches <see cref="M:InventorySystem.InventoryExtensions.ServerDropAmmo(InventorySystem.Inventory,ItemType,System.UInt16,System.Boolean)"/> delegate.
            Fix than NW don't set the field <see cref="F:InventorySystem.Items.Pickups.ItemPickupBase.PreviousOwner"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.GetAmmoLimitFix">
            <summary>
            Patches the <see cref="M:InventorySystem.Configs.InventoryLimits.GetAmmoLimit(InventorySystem.Items.Armor.BodyArmor,ItemType)"/> delegate.
            Changes <see cref="F:System.UInt16.MaxValue"/> to <see cref="F:System.UInt16.MinValue"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.GrenadePropertiesFix">
            <summary>
            Patches <see cref="M:InventorySystem.Items.ThrowableProjectiles.ThrowableItem.ServerThrow(System.Single,System.Single,UnityEngine.Vector3,UnityEngine.Vector3)"/> to fix all grenade properties.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.KillPlayer">
            <summary>
            Prefix of KillPlayer action.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.LockerFixes">
            <summary>
            Fix for chamber lists weren't cleared.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.PositionSpawnScp0492Fix">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049ResurrectAbility.ServerComplete"/> delegate.
            Removes useless position setter for Scp0492.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.RoleChangedPatch">
            <summary>
            Patches <see cref="M:InventorySystem.InventoryItemProvider.RoleChanged(ReferenceHub,PlayerRoles.PlayerRoleBase,PlayerRoles.PlayerRoleBase)"/> to help override in <see cref="P:Exiled.Events.EventArgs.Player.ChangingRoleEventArgs.Items"/> and <see cref="T:Exiled.API.Features.Items.Ammo"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.Scp3114AttackAhpFix">
            <summary>
            Patches the <see cref="M:PlayerRoles.PlayableScps.Scp3114.Scp3114Slap.DamagePlayers"/> delegate.
            Fix than Scp3114Slap was giving humeshield even if player was not hit by Scp3114.
            Bug reported to NW (https://trello.com/c/1AwpM8XE/5814-scp3114-is-able-to-get-humeshield-with-godmod-player).
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.VoiceChatMutesClear">
            <summary>
            Fixes <see cref="M:VoiceChat.VoiceChatMutes.LoadMutes"/> method.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Fixes.WeaponAttachmentDesyncFix">
            <summary>
            Patches <see cref="M:InventorySystem.Items.Firearms.Attachments.AttachmentsServerHandler.SetupProvidedWeapon(ReferenceHub,InventorySystem.Items.ItemBase)"/>.
            Fixes if a plugin gives you an weapon that you do not have ammo for, your attachments will not correctly appear on said weapon.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.AirlockListAdd">
            <summary>
            Patch for adding <see cref="T:Exiled.API.Features.Doors.AirlockController"/> to list.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.AirlockListRemove">
            <summary>
            Patch for removing <see cref="T:Exiled.API.Features.Doors.AirlockController"/> to list.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.CameraList">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079InteractableBase.OnRegistered"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.CameraListRemove">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079InteractableBase.OnDestroy"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.CanScp049SenseTutorial">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility.CanFindTarget(ReferenceHub@)"/>.
            <see cref="P:Exiled.Events.Config.CanScp049SenseTutorial"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.CommandLogging">
            <summary>
            Patches <see cref="M:RemoteAdmin.CommandProcessor.ProcessQuery(System.String,CommandSender)"/> for command logging.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.CommandLogging.LogCommand(System.String,CommandSender)">
            <summary>
            Logs a command to the RA log file.
            </summary>
            <param name="query">The command being logged.</param>
            <param name="sender">The sender of the command.</param>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.CurrentHint">
            <summary>
            Patches <see cref="M:Hints.HintDisplay.Show(Hints.Hint)"/>.
            Implements <see cref="P:Exiled.API.Features.Player.CurrentHint"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.DestroyRecontainerInstance">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079Recontainer.OnDestroy"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.DoorList">
            <summary>
            Patches <see cref="M:Interactables.Interobjects.DoorUtils.DoorVariant.RegisterRooms"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.DoorListRemove">
            <summary>
            Patches <see cref="M:Interactables.Interobjects.DoorUtils.DoorVariant.OnDestroy"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.GeneratorList">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.Scp079Generator.Start"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.GeneratorListRemove">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.Scp079Generator.OnDestroy"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.GhostModePatch">
            <summary>
            Patches <see cref="M:PlayerRoles.FirstPersonControl.NetworkMessages.FpcServerPositionDistributor.WriteAll(ReferenceHub,Mirror.NetworkWriter)"/> to add <see cref="P:Exiled.API.Features.Roles.FpcRole.IsInvisible"/> and <see cref="P:Exiled.API.Features.Roles.FpcRole.IsInvisibleFor"/> functional.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.HazardList">
            <summary>
            Patch for controlling hazard list.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.IndividualFriendlyFire">
            <summary>
            Checks friendly fire rules.
            </summary>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayer(ReferenceHub,ReferenceHub)">
            <summary>
            Checks if there can be damage between two players, according to the FF rules.
            </summary>
            <param name="attackerHub">The person attacking.</param>
            <param name="victimHub">The person being attacked.</param>
            <returns>True if the attacker can damage the victim.</returns>
            <remarks>Use <see cref="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayer(Footprinting.Footprint,ReferenceHub)"/> instead of this if the damage is not done instantly.</remarks>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayer(Footprinting.Footprint,ReferenceHub)">
            <summary>
            Checks if there can be damage between two players, according to the FF rules.
            </summary>
            <param name="attackerFootprint">The person attacking.</param>
            <param name="victimHub">The person being attacked.</param>
            <returns>True if the attacker can damage the victim.</returns>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayerHitbox(ReferenceHub,ReferenceHub)">
            <summary>
            Checks if there can be damage between two players, according to the FF rules.
            </summary>
            <param name="attackerHub">The person attacking.</param>
            <param name="victimHub">The person being attacked.</param>
            <returns>True if the attacker can damage the victim.</returns>
            <remarks>Use <see cref="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayerHitbox(Footprinting.Footprint,ReferenceHub)"/> instead of this if the damage is not done instantly.</remarks>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayerHitbox(Footprinting.Footprint,ReferenceHub)">
            <summary>
            Checks if there can be damage between two players, according to the FF rules.
            </summary>
            <param name="attackerFootprint">The person attacking.</param>
            <param name="victimHub">The person being attacked.</param>
            <returns>True if the attacker can damage the victim.</returns>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayerRules(ReferenceHub,ReferenceHub,System.Single@)">
            <summary>
            Checks if there can be damage between two players, according to the FF rules.
            </summary>
            <param name="attackerHub">The person attacking.</param>
            <param name="victimHub">The person being attacked.</param>
            <param name="ffMultiplier"> FF multiplier. </param>
            <returns> True if the attacker can damage the victim.</returns>
            <remarks> Friendly fire multiplier is also provided back if needed. </remarks>
            <remarks>Use <see cref="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayerRules(Footprinting.Footprint,ReferenceHub,System.Single@)"/> instead of this if the damage is not done instantly.</remarks>
        </member>
        <member name="M:Exiled.Events.Patches.Generic.IndividualFriendlyFire.CheckFriendlyFirePlayerRules(Footprinting.Footprint,ReferenceHub,System.Single@)">
            <summary>
            Checks if there can be damage between two players, according to the FF rules.
            </summary>
            <param name="attackerFootprint">The person attacking.</param>
            <param name="victimHub">The person being attacked.</param>
            <param name="ffMultiplier"> FF multiplier. </param>
            <returns> True if the attacker can damage the victim.</returns>
            <remarks> Friendly fire multiplier is also provided back if needed. </remarks>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.HitboxIdentityCheckFriendlyFire">
            <summary>
            Patches <see cref="M:HitboxIdentity.IsDamageable(ReferenceHub,ReferenceHub)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.ProcessDamagePatch">
            <summary>
            Patches <see cref="M:PlayerStatsSystem.AttackerDamageHandler.ProcessDamage(ReferenceHub)"/> to allow or disallow friendly fire.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.InitRecontainerInstance">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079Recontainer.Start"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.InventoryControlAddPatch">
            <summary>
            Patches <see cref="M:InventorySystem.InventoryExtensions.ServerAddItem(InventorySystem.Inventory,ItemType,System.UInt16,InventorySystem.Items.Pickups.ItemPickupBase)"/> to help manage <see cref="P:Exiled.API.Features.Player.Items"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.InventoryControlRemovePatch">
            <summary>
            Patches <see cref="M:InventorySystem.InventoryExtensions.ServerDropItem(InventorySystem.Inventory,System.UInt16)"/> to help manage <see cref="P:Exiled.API.Features.Player.Items"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.LiftList">
            <summary>
            Patches <see cref="M:Interactables.Interobjects.ElevatorManager.RefreshChambers"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.LockerList">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.Locker.Start"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.ParseVisionInformation">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp096.Scp096TargetsTracker.IsObservedBy(ReferenceHub)"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp096Role.TurnedPlayers"/> support.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.PickupControlPatch">
            <summary>
            Patches <see cref="M:InventorySystem.InventoryExtensions.ServerCreatePickup(InventorySystem.Items.ItemBase,InventorySystem.Items.Pickups.PickupSyncInfo,UnityEngine.Vector3,UnityEngine.Quaternion,System.Boolean,System.Action{InventorySystem.Items.Pickups.ItemPickupBase})"/> to save scale for pickups and control <see cref="P:Exiled.API.Features.Pickups.Pickup.IsSpawned"/> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.TriggerPickupControlPatch">
            <summary>
            Patches <see cref="M:MapGeneration.Distributors.ItemDistributor.SpawnPickup(InventorySystem.Items.Pickups.ItemPickupBase)"/> to control <see cref="P:Exiled.API.Features.Pickups.Pickup.IsSpawned"/> property for delayed spawned pickup.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.RoomList">
            <summary>
            Patches <see cref="M:MapGeneration.RoomIdentifier.Awake"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.RoomListRemove">
            <summary>
            Patches <see cref="M:MapGeneration.RoomIdentifier.OnDestroy"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp079API.CallAbilityDuration">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049CallAbility.ServerProcessCmd(Mirror.NetworkReader)"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp049Role.CallAbilityDuration" /> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp079API.SenseAbilityBaseCooldown">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility.ServerProcessKilledPlayer(ReferenceHub)"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp049Role.SenseAbilityBaseCooldown" /> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp079API.SenseAbilityReducedCooldown">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp049.Scp049SenseAbility.ServerLoseTarget"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp049Role.SenseAbilityReducedCooldown" /> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp079Scan">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079ScannerTracker.AddTarget(ReferenceHub)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp106API.CooldownReductionReward">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106Attack.ReduceSinkholeCooldown"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp106Role.CooldownReductionReward" /> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp106API.CustomAttack">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106Attack.ServerShoot"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp106Role.AttackDamage" />, <see cref="P:Exiled.API.Features.Roles.Scp106Role.CorrodingTime" />,  <see cref="P:Exiled.API.Features.Roles.Scp106Role.VigorCaptureReward" />property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp106API.HunterAtlastCostPerMetter">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106HuntersAtlasAbility.ServerProcessCmd(Mirror.NetworkReader)"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp106Role.HuntersAtlasCostPerMeter" /> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp106API.SinkholeAbilityCooldown">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106Attack.ReduceSinkholeCooldown"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp106Role.SinkholeCooldownDuration" /> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp106API.StalkVigorUse">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106StalkAbility.UpdateServerside"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp106Role.VigorStalkCostMoving" /> and <see cref="P:Exiled.API.Features.Roles.Scp106Role.VigorStalkCostStationary" /> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp106API.VigorRegeneration">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp106.Scp106StalkAbility.UpdateServerside"/>.
            Adds the <see cref="P:Exiled.API.Features.Roles.Scp106Role.VigorRegeneration" /> property.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp173BeingLooked">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp173.Scp173ObserversTracker.UpdateObserver(ReferenceHub)"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp559List">
            <summary>
            Patches <see cref="M:Scp559Cake.Start"/>
            to control <see cref="P:Exiled.API.Features.Scp559.List"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.Scp956Capybara">
            <summary>
            Patches <see cref="M:Scp956Pinata.UpdateAi"/>
            to implement better pinata capybara.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.ServerNamePatch">
            <summary>
            Patch the <see cref="M:ServerConsole.ReloadServerName"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.SnowpileListAdd">
            <summary>
            Patches <see cref="M:Snowpile.Awake"/> to control list.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.SpeakerInRoom">
            <summary>
            Patches <see cref="M:PlayerRoles.PlayableScps.Scp079.Scp079Speaker.OnRegistered"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.StaminaRegen">
            <summary>
            Patches <see cref="P:InventorySystem.Inventory.StaminaRegenMultiplier"/>.
            Implements <see cref="P:Exiled.API.Features.Roles.FpcRole.StaminaRegenMultiplier"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.StaminaUsage">
            <summary>
            Patches <see cref="P:InventorySystem.Inventory.StaminaUsageMultiplier"/>.
            Implements <see cref="P:Exiled.API.Features.Player.IsUsingStamina"/>, <see cref="P:Exiled.API.Features.Roles.FpcRole.IsUsingStamina"/> and <see cref="P:Exiled.API.Features.Roles.FpcRole.StaminaUsageMultiplier"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.TeleportList">
            <summary>
            Patches <see cref="M:PocketDimensionGenerator.PrepTeleports"/>.
            </summary>
        </member>
        <member name="T:Exiled.Events.Patches.Generic.TeslaList">
            <summary>
            Patches <see cref="M:TeslaGateController.Start"/>.
            </summary>
        </member>
    </members>
</doc>
